import{_ as o,r as l,o as c,c as u,d as n,e as s,a,w as i,b as t}from"./app-df2e2230.js";const d={},r=t('<h2 id="_1-盒模型" tabindex="-1"><a class="header-anchor" href="#_1-盒模型" aria-hidden="true">#</a> 1. 盒模型</h2><p>浏览器的渲染引擎在对网页文档进行布局时，会按照 “CSS 基础盒模型” （CSS Basic Box Model）标准，将文档中的所有元素都表示为一个个矩形的盒子，再用 CSS 去决定这些盒子的大小尺寸、显示位置、以及其他属性（如颜色、背景、边框等）</p><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型</p><p>盒模型都是由四个部分组成的，分别是margin（外边距）、border（边框）、padding（内边距）和content（内容）</p><p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</p><ul><li>标准盒模型的width和height属性的范围只包含了content</li><li>IE盒模型的width和height属性的范围包含了border、padding和content</li></ul><p>在 CSS3 中，我们可以通过设置 box-sizing 的值来决定具体使用何种盒模型：</p><ul><li>content-box 标准盒模型（默认值）</li></ul><ul><li>border-box 怪异盒模型（IE盒模型）</li></ul><h2 id="_2-css选择器及其优先级" tabindex="-1"><a class="header-anchor" href="#_2-css选择器及其优先级" aria-hidden="true">#</a> 2. CSS选择器及其优先级</h2>',10),k={href:"https://zhf521.github.io/mynotes/front-end/css-notes/02-CSS%E9%80%89%E6%8B%A9%E5%99%A8.html",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"_3-css样式引入方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-css样式引入方式","aria-hidden":"true"},"#"),s(" 3. CSS样式引入方式")],-1),b={href:"https://zhf521.github.io/mynotes/front-end/css-notes/01-%E5%88%9D%E8%AF%86CSS.html#_2-css%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="_4-css中可继承与不可继承属性有哪些" tabindex="-1"><a class="header-anchor" href="#_4-css中可继承与不可继承属性有哪些" aria-hidden="true">#</a> 4. CSS中可继承与不可继承属性有哪些</h2><h3 id="_1-可继承属性" tabindex="-1"><a class="header-anchor" href="#_1-可继承属性" aria-hidden="true">#</a> 1. 可继承属性</h3><ul><li>字体系列属性 <ul><li>font-family：字体系列</li><li>font-weight：字体的粗细</li><li>font-size：字体的大小</li><li>font-style：字体的风格</li></ul></li><li>文本系列属性 <ul><li>text-indent：文本缩进</li><li>text-align：文本水平对齐</li><li>line-height：行高</li><li>word-spacing：单词之间的间距</li><li>letter-spacing：中文或者字母之间的间距</li><li>text-transform：控制文本大小写（即uppercase、lowercase、capitalize）</li><li>color：文本颜色</li></ul></li><li>元素可见性 <ul><li>visibility：控制元素显示隐藏</li></ul></li><li>列表布局属性 <ul><li>list-style：列表风格，包括list-style-type、list-style-image等</li></ul></li><li>光标属性 <ul><li>cursor：光标显示为何种形态</li></ul></li></ul><h3 id="_2-不可继承属性" tabindex="-1"><a class="header-anchor" href="#_2-不可继承属性" aria-hidden="true">#</a> 2. 不可继承属性</h3><ul><li>display</li><li>文本属性 <ul><li>vertical-align：垂直文本对齐</li><li>text-decoration：规定添加到文本的装饰</li><li>text-shadow：文本阴影效果</li><li>white-space：空白符的处理</li><li>unicode-bidi：设置文本的方向</li></ul></li><li>盒子模型的属性</li><li>背景属性</li><li>定位属性</li><li>生成内容属性</li><li>轮廓样式属性</li><li>页面样式属性</li><li>声音样式属性</li></ul><h2 id="_5-display的属性值及其作用" tabindex="-1"><a class="header-anchor" href="#_5-display的属性值及其作用" aria-hidden="true">#</a> 5. display的属性值及其作用</h2><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>元素不显示，并且会从文档流中移除</td></tr><tr><td>block</td><td>块类型。默认宽度为父元素宽度，可设置宽高，换行显示</td></tr><tr><td>inline</td><td>行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示</td></tr><tr><td>inline-block</td><td>默认宽度为内容宽度，可以设置宽高，同行显示</td></tr><tr><td>list-item</td><td>像块类型元素一样显示，并添加样式列表标记</td></tr><tr><td>table</td><td>此元素会作为块级表格来显示</td></tr><tr><td>inherit</td><td>规定应该从父元素继承display属性的值</td></tr></tbody></table><h2 id="_6-display的block、inline和inline-block的区别" tabindex="-1"><a class="header-anchor" href="#_6-display的block、inline和inline-block的区别" aria-hidden="true">#</a> 6. display的block、inline和inline-block的区别</h2><ul><li>block：会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性</li><li>inline：元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin</li><li>inline-block：将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内</li></ul><h2 id="_7-隐藏元素的方法" tabindex="-1"><a class="header-anchor" href="#_7-隐藏元素的方法" aria-hidden="true">#</a> 7. 隐藏元素的方法</h2><ul><li>display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件</li><li>visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件</li><li>opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件</li><li>position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏</li><li>z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏</li><li>clip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件</li><li>transform: scale(0,0)：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件</li></ul><h2 id="_8-link与-import的区别" tabindex="-1"><a class="header-anchor" href="#_8-link与-import的区别" aria-hidden="true">#</a> 8. link与@import的区别</h2><p>两者都是外部引用CSS的方式，区别如下：</p><ul><li><code>link</code>功能较多，可以定义<code>RSS</code>，而<code>@import</code>只能用于加载<code>CSS</code></li><li>当解析到<code>link</code>时，页面会同步加载所引用的 <code>css</code>，而<code>@import</code>所引用的 <code>css</code> 会等到页面加载完才被加载</li><li><code>@import</code>兼容性差</li><li><code>link</code>可以使用 <code>js</code> 动态引入，<code>@import</code>不行</li></ul><h2 id="_9-display-none与visibility-hidden的区别" tabindex="-1"><a class="header-anchor" href="#_9-display-none与visibility-hidden的区别" aria-hidden="true">#</a> 9. display:none与visibility:hidden的区别</h2><p><code>display:none</code>与<code>visibility:hidden</code>都可以使元素不可见，区别如下：</p><ul><li>渲染树中 <ul><li><code>display: none;</code>会使元素完全从渲染树中消失，不占据任何空间</li><li><code>visibility: hidden;</code>不会使元素从渲染树中消失，仍然占据空间，只是内容不可见</li></ul></li><li>继承性 <ul><li><code>display: none;</code>是非继承属性，子孙节点消失是因为元素本身从渲染树中消失，修改子孙节点的属性无法使其显示</li><li><code>visibility: hidden;</code>是继承属性，子孙节点消失是因为继承了<code>hidden</code>属性，通过设置<code>visibility: visible;</code>可以使子孙节点显示</li></ul></li><li>导致重排和重绘 <ul><li>修改具有常规流的元素的<code>display</code>属性通常会导致文档重排（重新计算元素的位置和大小）</li><li>修改<code>visibility</code>属性只会导致本元素的重绘（重新绘制元素的可见部分）</li></ul></li><li>读屏器（屏幕阅读软件） <ul><li>不会读取<code>display: none;</code>元素的内容</li><li>会读取<code>visibility: hidden;</code>元素的内容</li></ul></li></ul><h2 id="_10-伪元素和伪类的区别和作用" tabindex="-1"><a class="header-anchor" href="#_10-伪元素和伪类的区别和作用" aria-hidden="true">#</a> 10. 伪元素和伪类的区别和作用？</h2><p>伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p::before</span> <span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;第一章：&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::after</span> <span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;Hot!&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::first-line</span> <span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p::first-letter</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a:hover</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> #FF00FF<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">p:first-child</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：伪类是通过在元素选择器上加入伪类改变元素状态，而伪元素通过对元素的操作进行对元素的改变</p><h2 id="_11-对requestanimationframe的理解" tabindex="-1"><a class="header-anchor" href="#_11-对requestanimationframe的理解" aria-hidden="true">#</a> 11. 对requestAnimationFrame的理解</h2><p>实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是请求动画帧</p><p>语法： <code>window.requestAnimationFrame(callback);</code> 其中，callback是下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示<code>requestAnimationFrame()</code>开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行</p><p>取消动画：使用<code>cancelAnimationFrame()</code>来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了</p><p>优势：</p><ul><li>CPU节能</li><li>函数节流</li><li>减少DOM操作</li></ul><p>setTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象</p><h2 id="_12-为什么有时候用translate来改变位置而不是定位" tabindex="-1"><a class="header-anchor" href="#_12-为什么有时候用translate来改变位置而不是定位" aria-hidden="true">#</a> 12. 为什么有时候用translate来改变位置而不是定位？</h2><p>translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使用到 CPU。 因此translate()更高效，可以缩短平滑动画的绘制时间。 而translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发生这种情况</p><h2 id="_13-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决" tabindex="-1"><a class="header-anchor" href="#_13-li-与-li-之间有看不见的空白间隔是什么原因引起的-如何解决" aria-hidden="true">#</a> 13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</h2><p>浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度</p><p>解决办法：</p><ol><li>为<code>&lt;li&gt;</code>设置<code>float:left</code>。不足：有些容器是不能设置浮动，如左右切换的焦点图等。</li><li>将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观。</li><li>将<code>&lt;ul&gt;</code>内的字符尺寸直接设为0，即<code>font-size:0</code>。不足：<code>&lt;ul&gt;</code>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔</li><li>消除<code>&lt;ul&gt;</code>的字符间隔<code>letter-spacing:-8px</code>，不足：这也设置了<code>&lt;li&gt;</code>内的字符间隔，因此需要将<code>&lt;li&gt;</code>内的字符间隔设为默认<code>letter-spacing:normal</code></li></ol><h2 id="_14-css3中有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_14-css3中有哪些新特性" aria-hidden="true">#</a> 14. CSS3中有哪些新特性</h2><ul><li>新增各种CSS选择器 （<code>: not(.input)</code>：所有 class 不是“input”的节点）</li><li>圆角 （border-radius:8px）</li><li>多列布局 （multi-column layout）</li><li>阴影和反射 （Shadoweflect）</li><li>文字特效 （text-shadow）</li><li>文字渲染 （text-decoration）</li><li>线性渐变 （gradient）</li><li>旋转 （transform）</li><li>增加了旋转,缩放,定位,倾斜,动画,多背景</li><li>flex</li></ul><h2 id="_15-可替换元素的概念及计算规则" tabindex="-1"><a class="header-anchor" href="#_15-可替换元素的概念及计算规则" aria-hidden="true">#</a> 15. 可替换元素的概念及计算规则</h2><p>可替换元素（replaced elements）是一种具有内在尺寸和宽高的元素，其内容由外部资源（如图像、视频等）决定。可替换元素的内容在渲染时会被外部资源替代。</p><p>其它特性：</p><ul><li>内容的外观不受页面上的CSS的影响</li><li>有自己的尺寸，大部分默认为300px*150px</li><li>内容的外观不受页面上的CSS的影响：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的</li></ul><p>可替换元素的尺寸从内而外分为三类：</p><ul><li>固有尺寸： 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的</li><li>HTML尺寸： 只能通过HTML原生属性改变，这些HTML原生属性包括<code>&lt;img&gt;</code>的width和height属性、<code>&lt;input&gt;</code>的size属性，<code>&lt;textarea&gt;</code>的cols和rows属性</li><li>CSS尺寸： 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content-box</li></ul><p>这三层结构的计算规则具体如下：</p><ol><li>如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高</li><li>如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高</li><li>如果有CSS尺寸，则最终尺寸由CSS属性决定</li><li>如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示</li><li>如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素</li><li>内联替换元素和块级替换元素使用上面同一套尺寸计算规则</li></ol><p>常见的可替换元素：</p><ol><li><code>&lt;img&gt;</code>：用于显示图像。</li><li><code>&lt;input&gt;</code>：包括不同类型的输入字段，如文本框、复选框、单选按钮等。</li><li><code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code>：用于嵌入视频和音频内容。</li><li><code>&lt;object&gt;</code>：用于嵌入外部资源，如Flash动画、PDF文件等。</li><li><code>&lt;iframe&gt;</code>：用于嵌入另一个HTML文档。</li><li><code>&lt;canvas&gt;</code>：用于绘制图形和动画。</li><li><code>&lt;embed&gt;</code> 和 <code>&lt;param&gt;</code>：用于嵌入多媒体内容。</li></ol><h2 id="_16-对css-sprites的理解" tabindex="-1"><a class="header-anchor" href="#_16-对css-sprites的理解" aria-hidden="true">#</a> 16. 对CSS Sprites的理解</h2><p>CSS Sprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位</p><p>优点：</p><ul><li>利用CSS Sprites能很好地减少网页的http请求，从而大大提高了页面的性能，这是CSS Sprites最大的优点</li><li>CSS Sprites能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和</li></ul><p>缺点：</p><ul><li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂</li><li>CSSSprites在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置</li><li>维护方面：CSS Sprites在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS</li></ul><h2 id="_17-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" tabindex="-1"><a class="header-anchor" href="#_17-什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" aria-hidden="true">#</a> 17. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？</h2><p>物理像素：是设备屏幕（或图像）实际具有的像素数目，设备一出厂就确定的，固定的，是屏幕的最小物理单位</p><p>逻辑像素：逻辑像素就是css中设置的像素。默认情况下1物理像素 = 1逻辑像素, 在高像素密度的设备上1逻辑像素 = 多个物理像素</p><p>像素密度：像素密度是指在给定区域内物理像素的数量。通常用PPI（Pixels Per Inch）表示。较高的像素密度意味着相同的区域内有更多的物理像素，因此图像和文本会显示得更加细腻和清晰。常见的像素密度有低像素密度（例如ldpi）、中像素密度（例如mdpi）、高像素密度（例如hdpi）、超高像素密度（例如xhdpi）、超超高像素密度（例如xxhdpi）等</p><p>在移动端开发中需要使用@3x、@2x等图片，是为了适应不同像素密度的设备，并提供更好的显示效果。当使用高像素密度的设备时（如@2x或@3x），如果使用与物理像素相等的逻辑像素的图片进行显示，图片会显得模糊或失真。因此，我们需要提供多个像素密度的图片版本，让设备根据自身的像素密度选择合适的图片进行显示。例如，@3x图像适用于高像素密度设备，@2x图像适用于中等像素密度设备，而标准尺寸的图像适用于低像素密度设备。这样可以确保图像在不同设备上显示清晰和细腻</p><p>使用媒体查询可以实现：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">my-image</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>low.png<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-device-pixel-ratio</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">#my-image</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>high.png<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-margin-和-padding-的使用场景" tabindex="-1"><a class="header-anchor" href="#_18-margin-和-padding-的使用场景" aria-hidden="true">#</a> 18. margin 和 padding 的使用场景</h2><ul><li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin</li><li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding</li></ul><h2 id="_19-对line-height-的理解及其赋值方式" tabindex="-1"><a class="header-anchor" href="#_19-对line-height-的理解及其赋值方式" aria-hidden="true">#</a> 19. 对line-height 的理解及其赋值方式</h2><p>line-height的概念：</p><ul><li>line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离</li><li>如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定</li><li>一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容</li><li>把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中</li><li>line-height 和 height 都能撑开一个高度</li></ul><p>line-height 的赋值方式：</p><ul><li>带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高</li><li>纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px</li><li>百分比：将计算后的值传递给后代</li></ul><h2 id="_20-css-优化和提高性能的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_20-css-优化和提高性能的方法有哪些" aria-hidden="true">#</a> 20. CSS 优化和提高性能的方法有哪些？</h2><p>加载性能：</p><ol><li>css压缩：将写好的css进行打包压缩，可以减小文件体积</li><li>css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高</li><li>减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载</li></ol><p>选择器性能：</p><ol><li>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等</li><li>如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）</li><li>避免使用通配规则，如<code>*{}</code>计算次数惊人，只对需要用到的元素进行选择</li><li>尽量少的去对标签进行选择，而是用class</li><li>尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素</li><li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li></ol><p>渲染性能：</p><ol><li>慎重使用高性能属性：浮动、定位</li><li>尽量减少页面重排、重绘</li><li>去除空规则：<code>{}</code>。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积</li><li>属性值为0时，不加单位</li><li>属性值为浮动小数<code>0.**</code>，可以省略小数点之前的0</li><li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后</li><li>不使用@import前缀，它会影响css的加载速度</li><li>选择器优化嵌套，尽量避免层级过深</li><li>css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用</li><li>正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能</li><li>不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</li></ol><p>可维护性、健壮性：</p><ol><li>将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性</li><li>样式与内容分离：将css代码定义到外部css中</li></ol><h2 id="_21-css预处理器-后处理器是什么-为什么要使用它们" tabindex="-1"><a class="header-anchor" href="#_21-css预处理器-后处理器是什么-为什么要使用它们" aria-hidden="true">#</a> 21. CSS预处理器/后处理器是什么？为什么要使用它们？</h2><p>预处理器，如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，mixin， 变量，循环， 函数等对编写以及开发UI组件都极为方便</p><p>后处理器， 如： postCss（<code>PostCSS</code> 提供了一个灵活的平台和插件生态系统，可以对 <code>CSS</code> 进行各种转换和优化，使开发者能够更好地编写和管理样式代码，并兼容不同的浏览器和未来的 <code>CSS</code> 标准），通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题</p><p>css预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等</p><p>使用原因：</p><ul><li>结构清晰， 便于扩展</li><li>可以很方便的屏蔽浏览器私有语法的差异</li><li>可以轻松实现多重继承</li><li>完美的兼容了CSS代码，可以应用到老项目中</li></ul><h2 id="_22-before-和-after-的双冒号和单冒号有什么区别" tabindex="-1"><a class="header-anchor" href="#_22-before-和-after-的双冒号和单冒号有什么区别" aria-hidden="true">#</a> 22. ::before 和 :after 的双冒号和单冒号有什么区别？</h2><ul><li>冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素</li><li>::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中</li></ul><h2 id="_23-display-inline-block-什么时候会显示间隙" tabindex="-1"><a class="header-anchor" href="#_23-display-inline-block-什么时候会显示间隙" aria-hidden="true">#</a> 23. display:inline-block 什么时候会显示间隙？</h2><ul><li>有空格时会有间隙，可以删除空格解决</li><li>margin正值时，可以让margin使用负值解决</li><li>使用font-size时，可通过设置font-size:0、letter-spacing、word-spacing解决</li></ul><h2 id="_24-单行、多行文本溢出隐藏" tabindex="-1"><a class="header-anchor" href="#_24-单行、多行文本溢出隐藏" aria-hidden="true">#</a> 24. 单行、多行文本溢出隐藏</h2><p>单行文本溢出：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>      // 溢出用省略号显示
<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>         // 规定段落中的文本不进行换行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行文本溢出：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            // 溢出隐藏
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>     // 溢出用省略号显示
<span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>         // 作为弹性伸缩盒子模型显示。
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span> // 设置伸缩盒子的子元素排列方式：从上到下垂直排列
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span>        // 显示的行数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_25-sass、less-是什么-为什么要使用他们" tabindex="-1"><a class="header-anchor" href="#_25-sass、less-是什么-为什么要使用他们" aria-hidden="true">#</a> 25. <strong>Sass、Less 是什么？为什么要使用他们？</strong></h2><p>他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。</p><p>为什么要使用它们？</p><ul><li>结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动</li><li>可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译</li></ul><h2 id="_26-对媒体查询的理解" tabindex="-1"><a class="header-anchor" href="#_26-对媒体查询的理解" aria-hidden="true">#</a> 26. 对媒体查询的理解？</h2><p>媒体查询是自 CSS3 开始加入的一个功能。它可以进行响应式适配展示。</p><p>媒体查询由两部分组成：</p><ul><li>一个可选的媒体类型（如 screen、print 等）</li><li>零个或多个媒体功能限定表达式（如 max-width: 500px、orientation: landscape 等）</li></ul><p>这两部分最终都会被解析为 true 或 false 值，然后整个媒体查询值为 true，则和该媒体查询关联的样式就生效，否则就不生效</p><p>例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 应用于屏幕宽度小于600px的情况 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 应用于打印时的情况 */</span>
<span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 12pt<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-如何判断元素是否到达可视区域" tabindex="-1"><a class="header-anchor" href="#_27-如何判断元素是否到达可视区域" aria-hidden="true">#</a> 27. 如何判断元素是否到达可视区域</h2><p>在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如：</p><ul><li>图片的懒加载</li><li>列表的无限滚动</li><li>计算广告元素的曝光情况</li><li>可点击链接的预加载</li></ul><p>判断一个元素是否在可视区域，我们常用的有三种办法：</p><ul><li>offsetTop、scrollTop</li><li>getBoundingClientRect</li><li>Intersection Observer</li></ul><h3 id="_1-offsettop、scrolltop" tabindex="-1"><a class="header-anchor" href="#_1-offsettop、scrolltop" aria-hidden="true">#</a> 1. offsetTop、scrollTop</h3><p>client 相关：</p><table><thead><tr><th>名称</th><th>概念</th><th>备注</th></tr></thead><tbody><tr><td>clientWidth</td><td><strong>可视区域</strong>宽度，包含 padding，但并不包含 border、scrollbar、margin</td><td>单位 px，只读，若元素大小超出可视区域，仅计算可视区域</td></tr><tr><td>clientHeight</td><td><strong>可视区域</strong>高度，包含 padding，但并不包含 border、scrollbar、margin</td><td>单位 px，只读，若元素大小超出可视区域，仅计算可视区域</td></tr><tr><td>clientTop</td><td>元素上边框宽度，不包含上部的 padding 与 margin</td><td>单位 px，只读，与 borderTopWidth 属性相同</td></tr><tr><td>clientLeft</td><td>元素左边框宽度，不包含左部的 padding 与 margin</td><td>单位 px，只读，与 borderLeftWidth 属性相同，如果该元素有滚动条且 direction 为 right-to-left，在 windows 平台非 IE 浏览器该属性返回值为左边框宽度+滚动条宽度，IE 返回值为 0，在 macOS 平台均返回左边框宽度</td></tr></tbody></table><p>offset 相关：</p><table><thead><tr><th>名称</th><th>概念</th><th>备注</th></tr></thead><tbody><tr><td>offsetWidth</td><td><strong>可视区域</strong>宽度，包含 padding、border、scrollbar，但不包含 margin</td><td>单位 px，只读，若元素大小超出可视区域，仅计算可视区域</td></tr><tr><td>offsetHeight</td><td><strong>可视区域</strong>高度，包含 padding、border、scrollbar，但不包含 margin</td><td>单位 px，只读，若元素大小超出可视区域，仅计算可视区域</td></tr><tr><td>offsetParent</td><td>返回最近的 position 不为 static 的祖先元素</td><td>只读，若元素的 display 为’none’，则该属性为 null，该属性是 offsetTop、offsetLeft 的计算依据</td></tr><tr><td>offsetTop</td><td>返回当前元素顶部相对父元素 offsetParent 顶部的距离，包含当前元素的 margin 及相对父元素的 padding、scrollbar、border</td><td>只读，即当前元素 border 以外（不含 border）相对父元素 offsetParent border 以内（含 border）的距离</td></tr><tr><td>offsetLeft</td><td>返回当前元素左侧相对父元素 offsetParent 左侧的距离，包含当前元素的 margin 及相对父元素的 padding、scrollbar、border</td><td>只读，即当前元素 border 以外（不含 border）相对父元素 offsetParent border 以内（含 border）的距离</td></tr></tbody></table><p>scroll 相关：</p><table><thead><tr><th>名称</th><th>概念</th><th>备注</th></tr></thead><tbody><tr><td>scrollWidth</td><td>返回元素的全部宽度，包含 padding 但不包含 scrollbar、border、margin</td><td>单位 px，只读，该属性包含了元素超出可视区域的部分</td></tr><tr><td>scrollHeight</td><td>返回元素的全部高度，包含 padding 但不包含 scrollbar、border、margin</td><td>单位 px，只读，该属性包含了元素超出可视区域的部分</td></tr><tr><td>scrollTop</td><td>设置或返回元素在垂直方向的滚动像素数</td><td>如果设置值非法或元素不可滚动，该属性会被设置为 0，如果设置值超过最大值，则设置为最大值</td></tr><tr><td>scrollLeft</td><td>设置或返回元素在水平方向的滚动像素数</td><td>如果设置值非法或元素不可滚动，该属性会被设置为 0，如果设置值超过最大值，则设置为最大值</td></tr></tbody></table><p>公式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>el<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">&lt;=</span> viewPortHeight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isInViewPortOfOne</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// viewPortHeight 兼容所有浏览器写法，用于获取视口的高度</span>
    <span class="token keyword">const</span> viewPortHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
    <span class="token comment">// 用于获取元素相对于文档顶部的偏移量（即距离文档顶部的距离）</span>
    <span class="token keyword">const</span> offsetTop <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    <span class="token comment">// 用于获取当前文档滚动的距离，即滚动条顶部到页面顶部的距离</span>
    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
    <span class="token comment">// 表示元素顶部相对于视口顶部的距离，计算方式是将元素的偏移量减去滚动距离</span>
    <span class="token keyword">const</span> top <span class="token operator">=</span> offsetTop <span class="token operator">-</span> scrollTop<span class="token punctuation">;</span>
    <span class="token keyword">return</span> top <span class="token operator">&lt;=</span> viewPortHeight<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-getboundingclientrect" tabindex="-1"><a class="header-anchor" href="#_2-getboundingclientrect" aria-hidden="true">#</a> 2. getBoundingClientRect</h3><p>getBoundingClientRect 是元素上的一个方法，调用后返回元素的大小、相对视窗口的位置等信息。（每次滚动位置改变时，调用该方法的返回值都会变化）</p><p>返回的对象有 8 个属性：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>元素原点（左上角顶点）的 x 坐标（相对视窗口左边的距离）</td></tr><tr><td>y</td><td>元素原点（左上角顶点）的 y 坐标（相对视窗口顶部的距离）</td></tr><tr><td>width</td><td>元素的宽度，包含 padding、scrollbar、border</td></tr><tr><td>height</td><td>元素的高度，包含 padding、scrollbar、border</td></tr><tr><td>left</td><td>元素左边相对视窗口左边的距离，通常与 x 相同，若 width 是负值，则为 x + width 的值</td></tr><tr><td>top</td><td>元素顶部相对视窗口顶部的距离，通常与 y 相同，若 height 为负值，则为 y + height 的值</td></tr><tr><td>right</td><td>元素右边相对视窗口左边的距离，通常与 x + width 相同，若 width 为负值，则为 x 的值</td></tr><tr><td>bottom</td><td>元素底部相对视窗口顶部的距离，通常与 y + height 相同，若 height 为负值，则为 y 的值</td></tr></tbody></table><p>如果一个元素在视窗之内的话，那么它一定满足下面四个条件：</p><ul><li>top 大于等于 0</li><li>left 大于等于 0</li><li>bottom 小于等于视窗高度</li><li>right 小于等于视窗宽度</li></ul><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isInViewPort</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> viewWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
  <span class="token keyword">const</span> viewHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    top<span class="token punctuation">,</span>
    right<span class="token punctuation">,</span>
    bottom<span class="token punctuation">,</span>
    left<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    top <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    right <span class="token operator">&lt;=</span> viewWidth <span class="token operator">&amp;&amp;</span>
    bottom <span class="token operator">&lt;=</span> viewHeight
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-intersection-observer" tabindex="-1"><a class="header-anchor" href="#_3-intersection-observer" aria-hidden="true">#</a> 3. Intersection Observer</h3><p><code>Intersection Observer</code> 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比<code>getBoundingClientRect </code>会好很多</p><p>使用步骤主要分为两步：创建观察者和传入被观察者</p><ol><li><p>创建观察者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 表示重叠面积占被观察者的比例，从 0 - 1 取值，</span>
  <span class="token comment">// 1 表示完全被包含</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">root</span><span class="token operator">:</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#scrollArea&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 必须是目标元素的父级元素</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>new IntersectionObserver</code>创建了观察者 <code>observer</code>，传入的参数 <code>callback</code> 在重叠比例超过 <code>threshold</code> 时会被执行\`</p><p>关于<code>callback</code>回调函数常用属性如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 上段代码中被省略的 callback</span>
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        entry<span class="token punctuation">.</span>time<span class="token punctuation">;</span>               <span class="token comment">// 触发的时间</span>
        entry<span class="token punctuation">.</span>rootBounds<span class="token punctuation">;</span>         <span class="token comment">// 根元素的位置矩形，这种情况下为视窗位置</span>
        entry<span class="token punctuation">.</span>boundingClientRect<span class="token punctuation">;</span> <span class="token comment">// 被观察者的位置举行</span>
        entry<span class="token punctuation">.</span>intersectionRect<span class="token punctuation">;</span>   <span class="token comment">// 重叠区域的位置矩形</span>
        entry<span class="token punctuation">.</span>intersectionRatio<span class="token punctuation">;</span>  <span class="token comment">// 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算）</span>
        entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span>             <span class="token comment">// 被观察者</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>传入被观察者</p><p>通过 <code>observer.observe(target)</code> 这一行代码即可简单的注册被观察者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_28-z-index属性在什么情况下会失效" tabindex="-1"><a class="header-anchor" href="#_28-z-index属性在什么情况下会失效" aria-hidden="true">#</a> 28. z-index属性在什么情况下会失效</h2><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed</p><p>z-index属性在下列情况下会失效：</p><ul><li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static</li><li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种</li><li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li></ul><h2 id="_29-常见的css布局单位" tabindex="-1"><a class="header-anchor" href="#_29-常见的css布局单位" aria-hidden="true">#</a> 29. 常见的CSS布局单位</h2><p>常用的布局单位包括像素（px），百分比（%），em，rem，vw/vh</p><p><strong>px</strong>：绝对单位，页面按精确像素展示</p><p><strong>em</strong>：相对单位，em是相对于元素的字体大小来计算的，<code>1em = &lt;self&gt;.font-size</code>，也就说em值会根据元素本身的字体大小的改变而改变。<code>em</code> 会继承父级元素的字体大小</p><p><strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p><p><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p><p><strong>百分比（%）</strong>：当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素</p><h2 id="_30-两栏布局的实现" tabindex="-1"><a class="header-anchor" href="#_30-两栏布局的实现" aria-hidden="true">#</a> 30. 两栏布局的实现</h2><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong></p><ul><li><p>利用浮动：将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用浮动：左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.left</span><span class="token punctuation">{</span>
     <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
     <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
     <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector">.right</span><span class="token punctuation">{</span>
     <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
     <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用flex布局：将左边元素设置为固定宽度200px，将右边的元素设置为flex:1</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用绝对定位：将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用绝对定位：将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_31-三栏布局的实现" tabindex="-1"><a class="header-anchor" href="#_31-三栏布局的实现" aria-hidden="true">#</a> 31. 三栏布局的实现</h2><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong></p><ul><li><p>利用绝对定位：左右两栏设置为绝对定位，中间设置对应方向大小的margin的值</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用flex布局：左右两栏设置固定大小，中间一栏设置为flex:1</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>利用浮动：左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>

  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>

  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.outer</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.left</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.right</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>

  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.center</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_32-水平垂直居中的实现-如果元素不定宽高呢" tabindex="-1"><a class="header-anchor" href="#_32-水平垂直居中的实现-如果元素不定宽高呢" aria-hidden="true">#</a> 32. 水平垂直居中的实现，如果元素不定宽高呢？</h2>`,149),h={href:"https://lamphc.github.io/fe-up/#/css/center?id=%e9%9d%a2%e8%af%95%e5%ae%98%ef%bc%9a%e5%85%83%e7%b4%a0%e6%b0%b4%e5%b9%b3%e5%9e%82%e7%9b%b4%e5%b1%85%e4%b8%ad%e7%9a%84%e6%96%b9%e6%b3%95%e6%9c%89%e5%93%aa%e4%ba%9b%ef%bc%9f%e5%a6%82%e6%9e%9c%e5%85%83%e7%b4%a0%e4%b8%8d%e5%ae%9a%e5%ae%bd%e9%ab%98%e5%91%a2%ef%bc%9f",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="_33-如何根据设计稿进行移动端适配" tabindex="-1"><a class="header-anchor" href="#_33-如何根据设计稿进行移动端适配" aria-hidden="true">#</a> 33. 如何根据设计稿进行移动端适配？</h2><p>移动端适配主要有两个维度：</p><ul><li>适配不同像素密度，针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真</li><li>适配不同屏幕大小，由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。</li></ul><p>为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位</p><h2 id="_34-flex-1-表示什么" tabindex="-1"><a class="header-anchor" href="#_34-flex-1-表示什么" aria-hidden="true">#</a> 34. flex:1 表示什么</h2><p>它表示当剩余空间不足以完全填充容器时，所有使用 <code>flex: 1</code> 的子元素将平分剩余空间</p><p>如果有多个元素设置了 <code>flex: 1</code>，并且它们的父容器有剩余空间，那么这些元素将会按照一定的比例分配这个剩余空间。如果只有一个元素设置了 <code>flex: 1</code>，则这个元素将会填满剩余空间</p><p>flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。flex:1 表示 flex: 1 1 0%：</p><ul><li>第一个参数表示: flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大；</li><li>第二个参数表示: flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小；</li><li>第三个参数表示: flex-basis给上面两个属性分配多余空间之前, 计算项目是否有多余空间, 默认值为 auto, 即项目本身的大小</li></ul><h2 id="_35-响应式设计的概念及基本原理" tabindex="-1"><a class="header-anchor" href="#_35-响应式设计的概念及基本原理" aria-hidden="true">#</a> 35. 响应式设计的概念及基本原理</h2><p>响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本</p><p>关于原理： 基本原理是通过媒体查询（@media）查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有meta声明的viewport</p><h2 id="_36-实现-品-字布局" tabindex="-1"><a class="header-anchor" href="#_36-实现-品-字布局" aria-hidden="true">#</a> 36. 实现“品”字布局</h2><p>使用定位实现，对于上面的盒子，使用magin属性让他水平居中；下面的两个盒子使用浮动即可实现</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span> 
  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">font-size</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span> 
  <span class="token property">line-height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> 
  <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div1</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> 
  <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div2</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> 
  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span> 
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div3</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> 
  <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span> 
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用inline-block实现，这里将div设置为了inline-block，实际上和上面的float的作用是一眼的，就是让下面的两个块不换行</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span> 
  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">font-size</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span> 
  <span class="token property">line-height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span> 
  <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> 
  <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div1</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> 
  <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div2</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> 
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.div3</span><span class="token punctuation">{</span> 
  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> 
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_37-实现九宫格布局" tabindex="-1"><a class="header-anchor" href="#_37-实现九宫格布局" aria-hidden="true">#</a> 37. 实现九宫格布局</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">ul</span> <span class="token punctuation">{</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">li</span> <span class="token punctuation">{</span> 
	<span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
	<span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
	<span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>flex布局实现九宫格很简单，需要设置一个flex-wrap: wrap;使得盒子在该换行的时候进行换行。</p><p>由于我们给每个元素设置了下边距和右边距，所以最后同一列（3、6、9）的右边距和最后一行（7、8、9）的下边距撑大了ul，所以这里使用类型选择器来消除他们的影响</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">ul</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">li</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">li:nth-of-type(3n)</span><span class="token punctuation">{</span> 
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">li:nth-of-type(n+7)</span><span class="token punctuation">{</span> 
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_38-为什么要清除浮动-清除浮动的方式" tabindex="-1"><a class="header-anchor" href="#_38-为什么要清除浮动-清除浮动的方式" aria-hidden="true">#</a> 38. 为什么要清除浮动？清除浮动的方式</h2><p>浮动元素脱离标准流，在标准流中不占位置，不能撑开父元素的高度，当父元素的高度为0时，就会影响后面的标准流，影响元素排版</p>`,25),x={href:"https://zhf521.github.io/mynotes/front-end/css-notes/09-CSS%E4%BC%A0%E7%BB%9F%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F.html#_2-5-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8",target:"_blank",rel:"noopener noreferrer"},y=t('<h2 id="_39-对bfc的理解-如何创建bfc" tabindex="-1"><a class="header-anchor" href="#_39-对bfc的理解-如何创建bfc" aria-hidden="true">#</a> 39. 对BFC的理解，如何创建BFC</h2><p>BFC：块级格式化上下文</p><p>形成独立的渲染区域，内部元素的渲染不会影响外界</p><p>如何触发：</p><ul><li>根元素</li><li>绝对定位（absolute）、固定定位（fixed）的元素</li><li>overflow 的值不为 visible 的块元素</li><li>flex元素</li><li>inline-block元素</li></ul><p>应用场景：清除浮动等</p><p>BFC的特点：</p><ol><li>BFC <strong>内部的</strong>子元素，在垂直方向上，自上而下排列，<strong>边距margin会发生重叠</strong></li><li>BFC在页面中是独立的容器，外面的元素不会影响里面的元素，反之亦然。</li><li><strong>BFC区域不与旁边的<code>float box</code>区域重叠</strong>。（可以用来清除浮动带来的影响）</li><li>计算<code>BFC</code>的高度时，浮动的子元素也参与计算</li></ol><h2 id="_40-什么是margin塌陷问题-如何解决" tabindex="-1"><a class="header-anchor" href="#_40-什么是margin塌陷问题-如何解决" aria-hidden="true">#</a> 40. 什么是margin塌陷问题？如何解决？</h2>',9),f={href:"https://zhf521.github.io/mynotes/front-end/css-notes/07-CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.html#_4-2-margin%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="_41-元素层叠顺序" tabindex="-1"><a class="header-anchor" href="#_41-元素层叠顺序" aria-hidden="true">#</a> 41. 元素层叠顺序</h2><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则：</p><p>从下到上：</p><ol><li>背景和边框：建立当前层叠上下文元素的背景和边框</li><li>负的z-index：当前层叠上下文中，z-index属性值为负的元素</li><li>块级元素：文档流内非行内级非定位后代元素</li><li>浮动元素：非定位浮动元素</li><li>行内元素：文档流内行内级非定位后代元素</li><li>z-index:0/auto：层叠级数为0或auto的定位元素</li><li>正z-index：z-index属性值为正的定位元素</li></ol><h2 id="_42-position的属性有哪些-区别是什么" tabindex="-1"><a class="header-anchor" href="#_42-position的属性有哪些-区别是什么" aria-hidden="true">#</a> 42. position的属性有哪些，区别是什么</h2>',5),S={href:"https://zhf521.github.io/mynotes/front-end/css-notes/09-CSS%E4%BC%A0%E7%BB%9F%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F.html#_3-%E5%AE%9A%E4%BD%8D",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="_43-absolute与fixed共同点与不同点" tabindex="-1"><a class="header-anchor" href="#_43-absolute与fixed共同点与不同点" aria-hidden="true">#</a> 43. absolute与fixed共同点与不同点</h2><p>共同点：</p><ul><li>使元素脱离普通文档流，不再占据文档物理空间</li><li>覆盖非定位文档元素</li></ul><p>不同点：</p><ul><li>absolute与fixed的根元素不同，absolute的根元素可以设置，fixed根元素一般是浏览器视口</li><li>在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置</li></ul><h2 id="_44-对-sticky-定位的理解" tabindex="-1"><a class="header-anchor" href="#_44-对-sticky-定位的理解" aria-hidden="true">#</a> 44. 对 sticky 定位的理解</h2><p>sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：position: sticky; 基于用户的滚动位置来定位</p><p>粘性定位的特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</li></ul><p>元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位</p><h2 id="_45-css实现梯形、三角形、扇形、圆形、半圆" tabindex="-1"><a class="header-anchor" href="#_45-css实现梯形、三角形、扇形、圆形、半圆" aria-hidden="true">#</a> 45. CSS实现梯形、三角形、扇形、圆形、半圆</h2><h3 id="_1-梯形" tabindex="-1"><a class="header-anchor" href="#_1-梯形" aria-hidden="true">#</a> 1. 梯形</h3>',12),C=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".box"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 50px solid transparent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-bottom"),n("span",{class:"token punctuation"},":"),s(" 50px solid orange"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("h3",{id:"_2-三角形",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-三角形","aria-hidden":"true"},"#"),s(" 2. 三角形")],-1),A=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".box"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s("50px solid transparent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-bottom"),n("span",{class:"token punctuation"},":"),s(" 50px solid orange"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("h3",{id:"_3-扇形",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扇形","aria-hidden":"true"},"#"),s(" 3. 扇形")],-1),q=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".box"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-radius"),n("span",{class:"token punctuation"},":"),s(" 50%"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s("50px solid transparent"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-bottom"),n("span",{class:"token punctuation"},":"),s(" 50px solid orange"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("h3",{id:"_4-圆形",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-圆形","aria-hidden":"true"},"#"),s(" 4. 圆形")],-1),L=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".box"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token property"},"border-radius"),n("span",{class:"token punctuation"},":"),s(" 50%"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(` green
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h3",{id:"_5-半圆",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-半圆","aria-hidden":"true"},"#"),s(" 5. 半圆")],-1),j=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[n("span",{class:"token selector"},".box"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),s(" 100px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),s(" 50px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-top-left-radius"),n("span",{class:"token punctuation"},":"),s(" 50px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"border-top-right-radius"),n("span",{class:"token punctuation"},":"),s(" 50px"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" green"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=t(`<h2 id="_46-实现一个宽高自适应的正方形" tabindex="-1"><a class="header-anchor" href="#_46-实现一个宽高自适应的正方形" aria-hidden="true">#</a> 46. 实现一个宽高自适应的正方形</h2><p>利用vw来实现：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.square</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用元素的margin/padding百分比是相对父元素width的性质来实现：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.square</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用子元素的margin-top的值来实现：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.square</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.square::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_47-画一条0-5px的线" tabindex="-1"><a class="header-anchor" href="#_47-画一条0-5px的线" aria-hidden="true">#</a> 47. 画一条0.5px的线</h2><p>采用transform: scale()的方式，该方法用来定义元素的2D 缩放转换：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;

&lt;style&gt;
  .line</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
    <span class="token property">transform-origin</span><span class="token punctuation">:</span> top left<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
&lt;/style&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用meta viewport的方式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;meta name=<span class="token string">&quot;viewport&quot;</span> content=<span class="token string">&quot;width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5&quot;</span>/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>viewport只针对于移动端，只在移动端上才能看到效果</p><h2 id="_48-设置小于12px的字体" tabindex="-1"><a class="header-anchor" href="#_48-设置小于12px的字体" aria-hidden="true">#</a> 48. 设置小于12px的字体</h2><p>在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。</p><p>解决办法：</p><ul><li>实现小于12px的字体效果可以使用CSS的<code>transform: scale()</code>属性。但需要注意的是，该属性只能应用于具有宽度和高度的元素，而行内元素默认是没有宽度和高度的。为了在行内元素上应用缩放效果，可以将其转换为具有宽度和高度的块级元素，例如使用<code>display: inline-block</code></li><li>使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.small-text</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_49-如何解决-1px-问题" tabindex="-1"><a class="header-anchor" href="#_49-如何解决-1px-问题" aria-hidden="true">#</a> 49. 如何解决 1px 问题？</h2><p>一般来说，在PC端浏览器中，设备像素比（dpr）等于1，1个css像素就代表1个物理像素；但是在<code>retina</code>屏幕中，dpr普遍是2或3，1个css像素不再等于1个物理像素，因此比实际设计稿看起来粗不少</p><p>解决思路：</p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>直接写 0.5px</td><td>代码简单</td><td>IOS及Android老设备不支持</td></tr><tr><td>用图片代替边框</td><td>全机型兼容</td><td>修改颜色及不支持圆角</td></tr><tr><td>background渐变</td><td>全机型兼容</td><td>代码多及不支持圆角</td></tr><tr><td>box-shadow模拟边框实现</td><td>全机型兼容</td><td>有边框和虚影无法实现</td></tr><tr><td>伪元素先放大后缩小</td><td>简单实用</td><td>缺点不明显</td></tr><tr><td>设置viewport解决问题</td><td>一套代码适用所有页面</td><td>缺点不明显</td></tr></tbody></table>`,22);function W(R,J){const e=l("ExternalLinkIcon"),p=l("CodeDemo");return c(),u("div",null,[r,n("p",null,[s("详见："),n("a",k,[s("CSS选择器"),a(e)])]),v,n("p",null,[s("详见："),n("a",b,[s("CSS样式引入方式"),a(e)])]),m,n("p",null,[n("a",h,[s("https://lamphc.github.io/fe-up/#/css/center?id=面试官：元素水平垂直居中的方法有哪些？如果元素不定宽高呢？"),a(e)])]),g,n("p",null,[s("详见："),n("a",x,[s("清除浮动"),a(e)])]),y,n("p",null,[s("详见："),n("a",f,[s("margin塌陷"),a(e)])]),_,n("p",null,[s("详见："),n("a",S,[s("定位"),a(e)])]),w,a(p,{id:"code-demo-1962",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJxVzrsOwyAMheFXsTz3kg5daJonYYGAAhLBEbbaSFHevZY6ccZf33AOTLIWNDiG/IG5OOa3RU+7xWm8a5tsxQvOzGpu2uGwFXTfHCQZeAzDtr/+KcW8JOmbpxZiM/DUBEwlB5DmKm+uxSodunoSobWzpHaJyk69cf4AiL04OA=="},{default:i(()=>[C,E]),_:1}),B,a(p,{id:"code-demo-1969",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJxVzb0KwzAMBOBXEZr7k6WLm+ZJvNixiQ2OFSzRBkLevYIOTW6744PbMMlc0GAf8hvG4phfFj2tFof+rttgK15wZFZz0x02W0HzyUGSge75qynmKcm/e2ohNvPolhWYSg4gzVVeXItVTubqSYRmAwdLaqeobNf3/Qu4AzWG"},{default:i(()=>[A,z]),_:1}),F,a(p,{id:"code-demo-1976",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJxVjs0KgzAQhF9lWeitP168pNYnySUxwQRiItltK4jv3i2FinObmW9gVgw8JVTYufiCIRmih0ZbFo19d5Os1xnPOBAJc5UcVp1B9I6Og4Lm/rPBxzHw7m2pztdLNS4+SUHbnA6Fapt5ASopOuBqMs2m+szHsS3MZfqO/2wRdvSCbXJr+wD+Ej0i"},{default:i(()=>[q,T]),_:1}),H,a(p,{id:"code-demo-1983",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJxNzUEOwiAQheGrTCZxZxUXbrD2JLOhQICIgxmoNml6d0nc+JZfXvJvGNszo8bRpTfYbGq9E85lJZzGc7eJGI9oa+2fU3fYiKHvk1yLGi5KvdYbMbXoU4jtX+YizssgxqWlariqw4+NfQQpC7vBllxEQxDvmXjvqf0LdWww6w=="},{default:i(()=>[L,I]),_:1}),O,a(p,{id:"code-demo-1990",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJx1jsEOwiAQRH+F7Fm0Hrxg7ZdwoYBARLZZqDZp+u+u8eBF5/jmTTIrxHbPoKB36SFsNrVeNIy4aBj6A7NBF9iBrZWdPXOx6iI4z+RaVOLYddNy/qDoU4hNidMXjUjOk2w4yeyvTZJxaa7/FHrvfzrG3gLhXJy0mJGUCOR94Xbje9sLL69ATw=="},{default:i(()=>[j,P]),_:1}),D])}const N=o(d,[["render",W],["__file","02-面试笔记-CSS.html.vue"]]);export{N as default};
