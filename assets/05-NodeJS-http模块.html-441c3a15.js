import{_ as n,o as s,c as a,b as t}from"./app-12752cda.js";const e={},p=t(`<h2 id="_1-创建http服务" tabindex="-1"><a class="header-anchor" href="#_1-创建http服务" aria-hidden="true">#</a> 1. 创建HTTP服务</h2><h3 id="_1-1-操作步骤" tabindex="-1"><a class="header-anchor" href="#_1-1-操作步骤" aria-hidden="true">#</a> 1.1 操作步骤</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//2. 创建服务对象 create 创建 server 服务</span>
<span class="token comment">// request 意为请求，是对请求报文的封装对象，通过 request 对象可以获得请求报文的数据</span>
<span class="token comment">// response 意为响应，是对响应报文的封装对象，通过 response 对象可以设置响应报文</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 	
    <span class="token comment">// 设置响应体</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello HTTP server&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 返回结果是一个对象</span>

<span class="token comment">//3. 监听端口, 启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口 9000 监听中...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>http.createServer</code> 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行</p></blockquote><h3 id="_1-2-测试" tabindex="-1"><a class="header-anchor" href="#_1-2-测试" aria-hidden="true">#</a> 1.2 测试</h3><p>浏览器请求对应端口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_1-3-注意事项" aria-hidden="true">#</a> 1.3 注意事项</h3><ol><li><p>命令行 <code>ctrl + c</code> 停止服务</p></li><li><p>当服务启动后，更新代码必须重启服务才能生效</p></li><li><p>响应内容中文乱码的解决办法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>端口号被占用：<code>Error: listen EADDRINUSE: address already in use :::9000</code></p><ol><li>关闭当前正在运行监听端口的服务（使用较多）</li><li>修改其他端口号</li></ol></li><li><p><code>HTTP</code>协议默认端口是 <code>80</code>。<code>HTTPS</code> 协议的默认端口是<code>443</code>, HTTP 服务开发常用端口有 <code>3000</code>，<code>8080</code>，<code>8090</code>，<code>9000</code> 等</p></li></ol><blockquote><p>如果端口被其他程序占用，可以使用资源监视器找到占用端口的程序，然后使用任务管理器关闭对应的程序</p></blockquote><h2 id="_2-获取http请求报文" tabindex="-1"><a class="header-anchor" href="#_2-获取http请求报文" aria-hidden="true">#</a> 2. 获取HTTP请求报文</h2><table><thead><tr><th style="text-align:left;">含义</th><th style="text-align:left;">语法</th><th style="text-align:left;">重点掌握</th></tr></thead><tbody><tr><td style="text-align:left;">请求方法</td><td style="text-align:left;"><code>request.method</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求版本</td><td style="text-align:left;"><code>request.httpVersion</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">请求路径</td><td style="text-align:left;"><code>request.url</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">URL 路径</td><td style="text-align:left;"><code>require(&#39;url&#39;).parse(request.url).pathname</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">URL 查询字符串</td><td style="text-align:left;"><code>require(&#39;url&#39;).parse(request.url, true).query</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求头</td><td style="text-align:left;"><code>request.headers</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求体</td><td style="text-align:left;"><code>request.on(&#39;data&#39;, function(chunk){})</code><br><code>request.on(&#39;end&#39;, function(){})</code></td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取请求的方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token comment">// GET</span>
  <span class="token comment">// 获取请求的 url</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 只包含 url 中的 路径 与查询字符串</span>
  <span class="token comment">// 获取 http 协议的版本号</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span>  <span class="token comment">// 1.1</span>
  <span class="token comment">// 获取 http 的请求头</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token comment">// 结果是一个对象</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置响应体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ol><li><code>request.url</code> 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li><code>request.headers</code> 将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 <code>/</code> 』</li><li>关于 <code>favicon.ico</code>：这个请求是属于浏览器自动发送的请求</li></ol><p>其他操作：</p><ul><li><p>提取http报文的请求体</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 声明一个变量</span>
  <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 2. 绑定 data 事件</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    body <span class="token operator">+=</span> chunk
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 3. 绑定 end 事件</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  
    <span class="token comment">// 响应</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Http&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置响应体 </span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取http报文中url的路径与查询字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 1. 导入 url 模块</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2. 解析 request.url</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>   <span class="token comment">// /search?keyword=xxx</span>
  <span class="token comment">// 使用 parse 解析 request.url 的内容</span>
  <span class="token comment">// true 将 query 属性将会设置为一个 对象</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 为一个对象</span>
  <span class="token comment">// 路径</span>
  <span class="token keyword">let</span> pathname <span class="token operator">=</span> res<span class="token punctuation">.</span>pathname
  <span class="token comment">// 查询字符串</span>
  <span class="token keyword">let</span> keyword <span class="token operator">=</span> res<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>   <span class="token comment">// h5</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实例化 url 对象</span>
  <span class="token comment">// let url = new URL(&#39;/search?a=100&amp;b=200&#39;,&#39;http://127.0.0.1:9000&#39;)</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment">// 为一个对象</span>
  <span class="token comment">// 输出路径</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>  <span class="token comment">// /search</span>
  <span class="token comment">// 输出 keyword 查询字符串</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 100</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url new&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-设置http响应报文" tabindex="-1"><a class="header-anchor" href="#_3-设置http响应报文" aria-hidden="true">#</a> 3. 设置HTTP响应报文</h2><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td><code>response.statusCode</code></td></tr><tr><td>设置响应状态描述</td><td><code>response.statusMessage</code> （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td><code>response.setHeader(&#39;头名&#39;, &#39;头值&#39;)</code> (可以自定义)</td></tr><tr><td>设置响应体</td><td><code>response.write(&#39;xx&#39;)</code><br><code>response.end(&#39;xxx&#39;)</code></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 设置响应状态码</span>
response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">203</span>
<span class="token comment">// 2. 响应状态的描述</span>
response<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;i love you&#39;</span>
<span class="token comment">// 3. 响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 自定义响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;myHeader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test test&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 设置多个同名的响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// write 和 end 的两种使用情况：</span>
<span class="token comment">// 1. write 和 end 的结合使用 响应体相对分散</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每一个请求，在处理的时候必须要执行 end 方法的</span>

<span class="token comment">//2. 单独使用 end 方法 响应体相对集中</span>
response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-网页资源的基本加载过程" tabindex="-1"><a class="header-anchor" href="#_4-网页资源的基本加载过程" aria-hidden="true">#</a> 4. 网页资源的基本加载过程</h2><p>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等</p><h2 id="_5-静态资源服务" tabindex="-1"><a class="header-anchor" href="#_5-静态资源服务" aria-hidden="true">#</a> 5. 静态资源服务</h2><p><code>静态资源</code> 是指内容长时间不发生改变的资源，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等</p><p><code>动态资源</code> 是指内容经常更新的资源，例如百度首页，网易首页，京东搜索列表页面等</p><h3 id="_5-1-静态资源目录" tabindex="-1"><a class="header-anchor" href="#_5-1-静态资源目录" aria-hidden="true">#</a> 5.1 静态资源目录</h3><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是静态资源目录，也称之为网站根目录</p><h3 id="_5-2-url路径" tabindex="-1"><a class="header-anchor" href="#_5-2-url路径" aria-hidden="true">#</a> 5.2 URL路径</h3><p>网页中的URL路径主要分为两大类：<code>相对路径</code> 与 <code>绝对路径</code></p><h4 id="_5-2-1-绝对路径" tabindex="-1"><a class="header-anchor" href="#_5-2-1-绝对路径" aria-hidden="true">#</a> 5.2.1 绝对路径</h4><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td><code>http://atguigu.com/web</code></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td><code>//atguigu.com/web</code></td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td><code>/web</code></td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table><h4 id="_5-2-2-相对路径" tabindex="-1"><a class="header-anchor" href="#_5-2-2-相对路径" aria-hidden="true">#</a> 5.2.2 相对路径</h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 <code>计算</code> ，得到完整 URL 后，再发送请求，学习阶段用的较多</p><p>例如：<code>http://www.atguigu.com/course/h5.html</code></p><table><thead><tr><th>形式</th><th>最终的 <strong>URL</strong></th></tr></thead><tbody><tr><td><code>./css/app.css</code></td><td><code>http://www.atguigu.com/course/css/app.css</code></td></tr><tr><td><code>js/app.js</code></td><td><code>http://www.atguigu.com/course/js/app.js</code></td></tr><tr><td><code>../img/logo.png</code></td><td><code>http://www.atguigu.com/img/logo.png</code></td></tr><tr><td><code>../../mp4/show.mp4</code></td><td><code>http://www.atguigu.com/mp4/show.mp4</code></td></tr></tbody></table><h4 id="_5-2-3-网页中使用url的场景" tabindex="-1"><a class="header-anchor" href="#_5-2-3-网页中使用url的场景" aria-hidden="true">#</a> 5.2.3 网页中使用URL的场景</h4><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h3 id="_5-3-设置资源类型-mime类型" tabindex="-1"><a class="header-anchor" href="#_5-3-设置资源类型-mime类型" aria-hidden="true">#</a> 5.3 设置资源类型（mime类型）</h3><p><code>媒体类型</code>（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mime 类型结构： [type]/[subType]

例如： text/html text/css image/jpeg image/png application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 服务可以设置响应头 <code>Content-Type</code> 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token string">&#39;text/css&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">js</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">png</span><span class="token operator">:</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">jpg</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span> 
<span class="token literal-property property">gif</span><span class="token operator">:</span> <span class="token string">&#39;image/gif&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">mp4</span><span class="token operator">:</span> <span class="token string">&#39;video/mp4&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">mp3</span><span class="token operator">:</span> <span class="token string">&#39;audio/mpeg&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">json</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <code>下载</code> 效果</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//获取请求的方法已经路径</span>
	<span class="token keyword">let</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> request
	<span class="token comment">//判断请求方式以及请求路径</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span>
         response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/css/app.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public/css/app.css&#39;</span><span class="token punctuation">)</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/js/app.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public/js/app.js&#39;</span><span class="token punctuation">)</span>
         response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token comment">//404响应</span>
         response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;80端口正在启动中....&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//获取请求的方法已经路径</span>
	<span class="token keyword">let</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> request
	<span class="token comment">//文件夹路径  根路径</span>
	<span class="token keyword">let</span> rootDir <span class="token operator">=</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public&#39;</span>
	<span class="token comment">//拼接文件路径</span>
	<span class="token keyword">let</span> filePath <span class="token operator">=</span> rootDir <span class="token operator">+</span> url
	<span class="token comment">//读取文件内容</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token comment">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token comment">//如果出现错误，响应404状态码</span>
            response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>
            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token comment">//响应文件内容</span>
            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;80端口正在启动中....&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-get和post请求" tabindex="-1"><a class="header-anchor" href="#_6-get和post请求" aria-hidden="true">#</a> 6. GET和POST请求</h2><p><code>GET</code> 和 <code>POST</code> 是 HTTP 协议请求的两种方式</p><ul><li><code>GET</code> 主要用来获取数据，<code>POST</code> 主要用来提交数据</li><li><code>GET</code> 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，<code>POST</code> 带参数请求是将参数放到请求体中</li><li><code>POST</code> 请求相对 <code>GET</code> 安全一些，因为在浏览器中参数会暴露在地址栏</li><li><code>GET</code> 请求大小有限制，一般为 2K，而 POST 请求则没有</li></ul><p>GET 请求的情况：</p><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><p>POST 请求的情况：</p><ul><li>form 标签中的 method 为 post（不区分大小写）</li><li>AJAX 的 post 请求</li></ul>`,57),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","05-NodeJS-http模块.html.vue"]]);export{r as default};
