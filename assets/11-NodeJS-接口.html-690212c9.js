import{_ as o,r as p,o as r,c as l,d as a,e as n,a as t,b as e}from"./app-64250087.js";const d={},i=e('<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-1-接口是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-接口是什么" aria-hidden="true">#</a> 1.1 接口是什么</h3><blockquote><p>接口是前后端通信的桥梁</p></blockquote><p>简单理解：一个接口就是服务中的一个路由规则，根据请求响应结果</p><p>接口的英文单词是 API (Application Program Interface)，所以有时也称之为API 接口</p><p>这里的接口指的是数据接口，与编程语言（Java，Go 等）中的接口语法不同</p><h3 id="_1-2-接口的作用" tabindex="-1"><a class="header-anchor" href="#_1-2-接口的作用" aria-hidden="true">#</a> 1.2 接口的作用</h3><blockquote><p>实现前后端通信</p></blockquote><h3 id="_1-3-接口的开发与调用" tabindex="-1"><a class="header-anchor" href="#_1-3-接口的开发与调用" aria-hidden="true">#</a> 1.3 接口的开发与调用</h3><p>大多数接口都是由后端工程师开发的，开发语言不限</p><p>一般情况下接口都是由前端工程师调用的，但有时后端工程师也会调用接口，比如短信接口，支付接口等</p><h3 id="_1-4-接口的组成" tabindex="-1"><a class="header-anchor" href="#_1-4-接口的组成" aria-hidden="true">#</a> 1.4 接口的组成</h3><p>一个接口一般由以下几个部分组成：</p><ul><li><p>请求方法</p></li><li><p>接口地址（URL）</p></li><li><p>请求参数</p></li><li><p>响应结果</p></li></ul><h2 id="_2-restful-api" tabindex="-1"><a class="header-anchor" href="#_2-restful-api" aria-hidden="true">#</a> 2. RESTful API</h2><p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p><ul><li>URL 中的路径表示资源，路径中不能有动词，例如create, delete,update等这些都不能有</li><li>操作资源要与HTTP请求方法对应</li><li>操作结果要与HTTP 响应状态码对应</li></ul><p>规则示例：</p><table><thead><tr><th>操作</th><th>请求类型</th><th>URL</th><th>返回</th></tr></thead><tbody><tr><td>新增歌曲</td><td>POST</td><td>/song</td><td>返回新生成的歌曲信息</td></tr><tr><td>删除歌曲</td><td>DELETE</td><td>/song/10</td><td>返回一个空文档</td></tr><tr><td>修改歌曲</td><td>PUT</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>修改歌曲</td><td>PATCH</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>获取所有歌曲</td><td>GET</td><td>/song</td><td>返回歌曲列表数组</td></tr><tr><td>获取单个歌曲</td><td>GET</td><td>/song/10</td><td>返回单个歌曲信息</td></tr></tbody></table><h2 id="_3-json-server" tabindex="-1"><a class="header-anchor" href="#_3-json-server" aria-hidden="true">#</a> 3. json-server</h2><p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</p>',21),c={href:"https://github.com/typicode/json-server",target:"_blank",rel:"noopener noreferrer"},u=e(`<p>操作步骤：</p><ol><li><p>全局安装 <code>json-server</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> json-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建 JSON 文件（<code>db.json</code>），编写基本结构</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;song&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;干杯&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;五月天&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;当&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;动力火车&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;不能说的秘密&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;singer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;周杰伦&quot;</span> <span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以 JSON 文件所在文件夹作为工作目录，执行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>json-server <span class="token parameter variable">--watch</span> db.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认监听端口为：3000</p></li></ol><h2 id="_4-接口测试工具" tabindex="-1"><a class="header-anchor" href="#_4-接口测试工具" aria-hidden="true">#</a> 4. 接口测试工具</h2><p>几个接口测试工具：</p>`,4),h={href:"https://www.apipost.cn/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://apifox.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.postman.com/",target:"_blank",rel:"noopener noreferrer"};function b(v,m){const s=p("ExternalLinkIcon");return r(),l("div",null,[i,a("p",null,[n("官方地址："),a("a",c,[n("json-server"),t(s)])]),u,a("ul",null,[a("li",null,[n("apipost："),a("a",h,[n("Apipost"),t(s)])]),a("li",null,[n("apifox："),a("a",k,[n("Apifox"),t(s)])]),a("li",null,[n("postman："),a("a",_,[n("Postman"),t(s)])])])])}const g=o(d,[["render",b],["__file","11-NodeJS-接口.html.vue"]]);export{g as default};
