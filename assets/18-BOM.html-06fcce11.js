import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,b as t}from"./app-34ea1732.js";const e={},p=t(`<p><code>BOM（Browser Object Model）</code>： 浏览器对象模型</p><p>其实就是操作浏览器的一些能力</p><p>我们可以操作哪些内容？</p><ul><li>获取一些浏览器的相关信息（窗口的大小）</li><li>操作浏览器进行页面跳转</li><li>获取当前浏览器地址栏的信息</li><li>操作浏览器的滚动条</li><li>浏览器的信息（浏览器的版本）</li><li>让浏览器出现一个弹出框（<code>alert</code> / <code>confirm</code> / <code>prompt</code>）</li><li>……</li></ul><p><code>BOM</code> 的核心就是 <code>window</code> 对象，<code>window</code> 是浏览器内置的一个对象，里面包含着操作浏览器的方法</p><h2 id="获取浏览器窗口的尺寸" tabindex="-1"><a class="header-anchor" href="#获取浏览器窗口的尺寸" aria-hidden="true">#</a> 获取浏览器窗口的尺寸</h2><p><code> innerHeight</code> 和 <code>innerWidth</code></p><p>这两个方法分别是用来获取浏览器窗口的宽度和高度（包含滚动条的）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> windowHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windowHeight<span class="token punctuation">)</span>

<span class="token keyword">var</span> windowWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windowWidth<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器的弹出层" tabindex="-1"><a class="header-anchor" href="#浏览器的弹出层" aria-hidden="true">#</a> 浏览器的弹出层</h2><ul><li><p><code>alert</code> 是在浏览器弹出一个提示框</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个提示框&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>这个弹出层只是一个提示内容，只有一个确定按钮</p></li><li><p>点击确定按钮以后，这个提示框就消失了</p></li></ul></li><li><p><code>confirm</code> 是在浏览器弹出一个询问框</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> boo <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个询问框&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个弹出层有一个询问信息和两个按钮</li><li>当你点击确定的时候，就会得到 <code>true</code></li><li>当你点击取消的时候，就会得到 <code>false</code></li></ul></li><li><p><code>prompt</code> 是在浏览器弹出一个输入框</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入内容&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个弹出层有一个输入框和两个按钮</li><li>当你点击取消的时候，得到的是 <code>null</code></li><li>当你点击确定的时候得到的就是你输入的内容</li></ul></li></ul><h2 id="浏览器的地址信息" tabindex="-1"><a class="header-anchor" href="#浏览器的地址信息" aria-hidden="true">#</a> 浏览器的地址信息</h2><p>在 <code>window</code> 中有一个对象叫做 <code>location</code>，就是专门用来存储浏览器的地址栏内的信息的</p><h3 id="location-href" tabindex="-1"><a class="header-anchor" href="#location-href" aria-hidden="true">#</a> location.href</h3><p><code>location.href</code> 这个属性存储的是浏览器地址栏内 <code>url</code> 地址的信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会把中文变成 <code>url</code> 编码的格式</p><p><code>location.href</code> 这个属性也可以给它赋值，赋值时用于地址的跳转</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;./index.html&#39;</span>
<span class="token comment">// 这个就会跳转页面到后面你给的那个地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="location-search" tabindex="-1"><a class="header-anchor" href="#location-search" aria-hidden="true">#</a> location.search</h3><p><code>location.search</code>这个属性用于获取地址中携带的参数，符号 ？后面部分</p><h3 id="location-hash" tabindex="-1"><a class="header-anchor" href="#location-hash" aria-hidden="true">#</a> location.hash</h3><p><code>location.hash</code>这个属性用于获取地址中的哈希值，符号 # 后面部分</p><h2 id="location-reload" tabindex="-1"><a class="header-anchor" href="#location-reload" aria-hidden="true">#</a> location.reload</h2><p><code>location.reload()</code> 这个方法会重新加载一遍页面，就相当于刷新，传入参数 true 时表示强制刷新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意： <strong>不要写在全局，不然浏览器就会一直处在刷新状态</strong></p><h2 id="浏览器的历史记录" tabindex="-1"><a class="header-anchor" href="#浏览器的历史记录" aria-hidden="true">#</a> 浏览器的历史记录</h2><p><code>window</code> 中有一个对象叫做 <code>history</code>，是专门用来存储历史记录信息的</p><h3 id="history-back" tabindex="-1"><a class="header-anchor" href="#history-back" aria-hidden="true">#</a> history.back</h3><p><code>history.back</code> 是用来回退历史记录的，就是回到前一个页面，就相当于浏览器上的 ⬅️ 按钮</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前提是你要有上一条记录，不然就是一直在这个页面，也不会回退</p><h3 id="history-forword" tabindex="-1"><a class="header-anchor" href="#history-forword" aria-hidden="true">#</a> history.forword</h3><p><code>history.forword</code> 是去到下一个历史记录里面，也就是去到下一个页面，就相当于浏览器上的 ➡️ 按钮</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前提是你要之前有过回退操作，不然的话你现在就是最后一个页面，没有下一个</p><h3 id="history-go" tabindex="-1"><a class="header-anchor" href="#history-go" aria-hidden="true">#</a> history.go</h3><p><code>history.go(参数)</code>用来前进和后退，参数如果是 1 前进一个页面，如果是 -1 后退一个页面</p><h2 id="浏览器的onload-事件" tabindex="-1"><a class="header-anchor" href="#浏览器的onload-事件" aria-hidden="true">#</a> 浏览器的onload 事件</h2><p>这个不再是对象了，而是一个事件，是在页面所有资源加载完毕后执行的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;页面已经加载完毕&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-html-页面中把-js-写在-head-里面" tabindex="-1"><a class="header-anchor" href="#在-html-页面中把-js-写在-head-里面" aria-hidden="true">#</a> 在 html 页面中把 JS 写在 head 里面</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    	<span class="token comment">// 这个代码执行的时候，body 还没有加载</span>
      <span class="token comment">// 这个时候我们就获取不到 body 中的那个 div</span>

      <span class="token comment">// 就需要使用 window.onload 事件</span>
      window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个函数会在页面加载完毕以后在执行</span>
        <span class="token comment">// 那么这个时候页面的 DOM 元素都已经加载了，我们就可以获取 div 了</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-html-页面中把-js-写在-body-最后面" tabindex="-1"><a class="header-anchor" href="#在-html-页面中把-js-写在-body-最后面" aria-hidden="true">#</a> 在 html 页面中把 JS 写在 body 最后面</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    	<span class="token comment">// 这个代码执行的时候，body 已经加载完毕了</span>
      <span class="token comment">// 在这里就可以获取到 div，写不写 window.onload 就无所谓了</span>

      window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个函数会在页面加载完毕以后在执行</span>
        <span class="token comment">// 那么这个时候页面的 DOM 元素都已经加载了，我们就可以获取 div 了</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器的-onscroll-事件" tabindex="-1"><a class="header-anchor" href="#浏览器的-onscroll-事件" aria-hidden="true">#</a> 浏览器的 onscroll 事件</h2><p>这个 <code>onscroll</code> 事件是当浏览器的滚动条滚动的时候触发或者鼠标滚轮滚动的时候触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;浏览器滚动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>前提是页面的高度要超过浏览器的可是窗口才可以</strong></p><h2 id="浏览器滚动的距离" tabindex="-1"><a class="header-anchor" href="#浏览器滚动的距离" aria-hidden="true">#</a> 浏览器滚动的距离</h2><p>浏览器内的内容既然可以滚动，那么我们就可以获取到浏览器滚动的距离</p><blockquote><p>浏览器真的滚动了吗？</p><p>其实我们的浏览器是没有滚动的，是一直在那里，那么滚动的是什么？是我们的页面</p><p>，所以说，<strong>其实浏览器没有动，只不过是页面向上走了</strong>，所以，这个已经不能单纯的算是浏览器的内容了，而是我们页面的内容，所以不是在用 <code>window</code> 对象了，而是使用 <code>document</code> 对象</p></blockquote><h3 id="scrolltop" tabindex="-1"><a class="header-anchor" href="#scrolltop" aria-hidden="true">#</a> scrollTop</h3><p>获取的是页面向上滚动的距离</p><p>一共有两个获取方式</p><ul><li><p><code>document.body.scrollTop</code></p></li><li><p><code>document.documentElement.scrollTop</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>区别：</p><ul><li>IE 浏览器 <ul><li>没有 <code>DOCTYPE</code> 声明的时候，用这两个都行</li><li>有 <code>DOCTYPE</code> 声明的时候，只能用 <code>document.documentElement.scrollTop</code></li></ul></li><li>Chrome 和 FireFox <ul><li>没有 <code>DOCTYPE</code> 声明的时候，用 <code>document.body.scrollTop</code></li><li>有 <code>DOCTYPE</code> 声明的时候，用 <code>document.documentElement.scrollTop</code></li></ul></li><li>Safari <ul><li>两个都不用，使用一个单独的方法 <code>window.pageYOffset </code></li></ul></li></ul><h3 id="scrollleft" tabindex="-1"><a class="header-anchor" href="#scrollleft" aria-hidden="true">#</a> scrollLeft</h3><p>获取页面向左滚动的距离</p><p>两个方法</p><ul><li><p><code>document.body.scrollLeft</code></p></li><li><p><code>document.documentElementLeft</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="本地存储" tabindex="-1"><a class="header-anchor" href="#本地存储" aria-hidden="true">#</a> 本地存储</h2><p>本地存储：将数据存储在本地浏览器中</p><p>优点：</p><ol><li>页面刷新或者关闭不丢失数据，实现数据持久化</li><li>容量较大，sessionStorage 和 localStorage 约 5M 左右</li></ol><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h3><p>作用: 数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失, 除非手动删除</p><p>特性：可以多窗口共享（同一浏览器可以共享），以键值对的形式存储，并且存储的是字符串，省略了 window</p><p>语法： 存储数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>本地存储-localstorage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储 - localstorage 存储的是字符串 </span>
    <span class="token comment">// 1. 存储</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
    <span class="token comment">// 2. 获取</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 3. 删除</span>
    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在浏览器使用 <code>F12</code>，通过 Application 查看本地数据</p><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h3><p>特性：</p><ul><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口（页面）下数据可以共享</li><li>以键值对的形式存储使用</li></ul><ul><li>用法跟 localStorage 基本相同</li></ul><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 存储</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token comment">// 获取</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token comment">// 删除</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localstorage-存储复杂数据类型" tabindex="-1"><a class="header-anchor" href="#localstorage-存储复杂数据类型" aria-hidden="true">#</a> localStorage 存储复杂数据类型</h3><p>问题：本地只能存储字符串, 无法存储复杂数据类型</p><p>解决方法：需要将复杂数据类型转换成 JSON 字符串, 再存储到本地</p><p>语法：<code>JSON.stringify(复杂数据类型)</code></p><p>JSON 字符串：</p><ul><li>首先是1个字符串</li><li>属性名使用双引号引起来，不能单引号</li><li>属性值如果是字符串型也必须双引号</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储复杂数据类型</span>
    <span class="token keyword">var</span> goods <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1999</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// localStorage.setItem(&#39;goods&#39;, goods)</span>
    <span class="token comment">// console.log(localStorage.getItem(&#39;goods&#39;))</span>
    <span class="token comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(typeof localStorage.getItem(&#39;goods&#39;))</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：因为本地存储里面取出来的是字符串，不是对象，无法直接使用</p><p>解决：把取出来的字符串转换为对象</p><p>语法：<code>JSON.parse(JSON字符串)</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 本地存储复杂数据类型</span>
    <span class="token keyword">var</span> goods <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1999</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// localStorage.setItem(&#39;goods&#39;, goods)</span>
    <span class="token comment">// console.log(localStorage.getItem(&#39;goods&#39;))</span>
    <span class="token comment">// 1. 把对象转换为JSON字符串  JSON.stringify</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(typeof localStorage.getItem(&#39;goods&#39;))</span>
    <span class="token comment">// 2. 把JSON字符串转换为对象  JSON.parse</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,95),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","18-BOM.html.vue"]]);export{r as default};
