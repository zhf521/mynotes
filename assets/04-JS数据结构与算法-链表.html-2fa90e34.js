import{_ as p,r as t,o,c as i,d as n,a as e,b as s,e as c}from"./app-59ed2b97.js";const l={},r=s(`<h2 id="_1-什么是链表" tabindex="-1"><a class="header-anchor" href="#_1-什么是链表" aria-hidden="true">#</a> 1. 什么是链表</h2><p>链表和数组相似，它们都是有序的列表、都是线性结构（有且仅有一个前驱、有且仅有一个后继）</p><p>不同点在于，链表中，数据单位的名称叫做“结点”，而结点和结点的分布，在内存中可以是离散的</p><p>在链表中，每一个结点的结构都包括了两部分的内容：数据域和指针域</p><h2 id="_2-链表实现" tabindex="-1"><a class="header-anchor" href="#_2-链表实现" aria-hidden="true">#</a> 2. 链表实现</h2><p>JS 中的链表，是以嵌套的对象的形式来实现的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token comment">// 数据域</span>
    <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token comment">// 指针域，指向下一个结点</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">val</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据域存储的是当前结点所存储的数据值，而指针域则代表下一个结点（后继结点）的引用。 有了 next 指针来记录后继结点的引用，每一个结点至少都能知道自己后面的是哪位了，原本相互独立的结点之间就有联系</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表01.png" alt="JS数据结构与算法-链表01.png" tabindex="0" loading="lazy"><figcaption>JS数据结构与算法-链表01.png</figcaption></figure><p>要想访问链表中的任何一个元素，我们都得从起点结点开始，逐个访问 next，一直访问到目标结点为止。为了确保起点结点是可抵达的，我们有时还会设定一个 head 指针来专门指向链表的开始位置</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表02.png" alt="JS数据结构与算法-链表02.png" tabindex="0" loading="lazy"><figcaption>JS数据结构与算法-链表02.png</figcaption></figure><h3 id="_2-1-链表结点的创建" tabindex="-1"><a class="header-anchor" href="#_2-1-链表结点的创建" aria-hidden="true">#</a> 2.1 链表结点的创建</h3><p>创建链表结点，需要一个构造函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用构造函数创建结点时，传入 val （数据域对应的值内容）、指定 next （下一个链表结点）即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  
node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，就创建出了一个数据域值为1，next 结点数据域值为2的链表结点：</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表03.png" alt="JS数据结构与算法-链表03.png" tabindex="0" loading="lazy"><figcaption>JS数据结构与算法-链表03.png</figcaption></figure><h3 id="_2-2-链表元素的添加" tabindex="-1"><a class="header-anchor" href="#_2-2-链表元素的添加" aria-hidden="true">#</a> 2.2 链表元素的添加</h3>`,19),d=n("li",null,[n("p",null,"在链表尾部添加：直接将尾部的next指针指向要添加的元素结点即可")],-1),u=n("p",null,"在两个结点间插入一个结点：",-1),m=n("ul",null,[n("li",null,"动画演示：")],-1),k=s(`<ul><li><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果目标结点本来不存在，那么记得手动创建</span>
<span class="token keyword">const</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>     
<span class="token comment">// 把node3的 next 指针指向 node2（即 node1.next）</span>
node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">.</span>next
<span class="token comment">// 把node1的 next 指针指向 node3</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),v=n("h3",{id:"_2-3-链表元素的删除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-链表元素的删除","aria-hidden":"true"},"#"),c(" 2.3 链表元素的删除")],-1),g=n("p",null,"我们直接让要删除结点的前驱结点的 next 指针跳过它，指向要删除结点的后继即可",-1),h=s(`<p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node3<span class="token punctuation">.</span>next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-链表与数组" tabindex="-1"><a class="header-anchor" href="#_3-链表与数组" aria-hidden="true">#</a> 3. 链表与数组</h2><h3 id="_3-1-js中的数组" tabindex="-1"><a class="header-anchor" href="#_3-1-js中的数组" aria-hidden="true">#</a> 3.1 JS中的数组</h3><p>在JS中，如果我们在一个数组中只定义了一种类型的元素，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它是一个纯数字数组，那么对应的确实是连续内存</p><p>但如果我们定义了不同类型的元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它对应的就是一段非连续的内存。此时，JS 数组不再具有数组的特征，其底层使用哈希映射分配内存空间，是由对象链表来实现的</p><h3 id="_3-2-链表的特点" tabindex="-1"><a class="header-anchor" href="#_3-2-链表的特点" aria-hidden="true">#</a> 3.2 链表的特点</h3><p>有高效的增删操作，但是访问操作很麻烦</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 记录目标结点的位置</span>
<span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token number">10</span>  
<span class="token comment">// 设一个游标指向链表第一个结点，从第一个结点开始遍历</span>
<span class="token keyword">let</span> node <span class="token operator">=</span> head  
<span class="token comment">// 反复遍历到第10个结点为止</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token operator">&amp;&amp;</span>node<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随着链表长度的增加，我们搜索的范围也会变大、遍历其中任意元素的时间成本自然随之提高。这个变化的趋势呈线性规律，用大 O 表示法表示为 <code>O(n)</code></p><p>但在数组中，我们直接访问索引、可以做到一步到位，这个操作的复杂度会被降级为常数级别<code>(O(1))</code></p><p>和数组相比，内存空间消耗更大，因为每个存储数据的结点都需要额外的空间存储后继指针</p>`,16);function b(_,y){const a=t("ImageViewer");return o(),i("div",null,[r,n("ul",null,[d,n("li",null,[u,m,e(a,{images:["https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表04.png","https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表05.png","https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表06.png"]},null,8,["images"]),k])]),v,g,e(a,{images:["https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表07.png","https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表08.png","https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/JS数据结构与算法-链表09.png"]},null,8,["images"]),h])}const f=p(l,[["render",b],["__file","04-JS数据结构与算法-链表.html.vue"]]);export{f as default};
