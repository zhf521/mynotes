import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as o,d as a,e as n,a as e,b as i}from"./app-309a33ef.js";const c={},u={href:"https://github.com/zhf521/NoteDemoCode/tree/main/Vue/01-Vue%E6%A0%B8%E5%BF%83-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B",target:"_blank",rel:"noopener noreferrer"},r=a("h2",{id:"vue-简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#vue-简介","aria-hidden":"true"},"#"),n(" Vue 简介")],-1),d=a("h3",{id:"官网",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#官网","aria-hidden":"true"},"#"),n(" 官网")],-1),k={href:"https://vuejs.org",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},m=i(`<h3 id="介绍与描述" tabindex="-1"><a class="header-anchor" href="#介绍与描述" aria-hidden="true">#</a> 介绍与描述</h3><ul><li>Vue 是一套用来动态构建用户界面的渐进式 JavaScript 框架 <ul><li>构建用户界面：把数据通过某种办法变成用户界面</li><li>渐进式：Vue 可以自底向上逐层的应用，简单应用只需要一个轻量小巧的核心库，复杂应用可以引入各式各样的 Vue 插件</li></ul></li><li>作者 <ul><li>尤雨溪</li></ul></li></ul><h3 id="vue-的特点" tabindex="-1"><a class="header-anchor" href="#vue-的特点" aria-hidden="true">#</a> Vue 的特点</h3><ol><li>遵循 <code>MVVM</code> 模式</li><li>编码简洁，体积小，运行效率高，适合移动/PC 端开发</li><li>它本身只关注 UI，可以引入其它第三方库开发项目</li><li>采用组件化模式，提高代码复用率、且让代码更好维护</li><li>声明式编码，让编码人员无需直接操作 DOM，提高开发效率</li><li>使用虚拟 DOM 和 Diff 算法，尽量复用 DOM 节点</li></ol><h3 id="与其他-js-框架的关联" tabindex="-1"><a class="header-anchor" href="#与其他-js-框架的关联" aria-hidden="true">#</a> 与其他 JS 框架的关联</h3><ul><li>借鉴 angular 的模板和数据绑定技术</li><li>借鉴 react 的组件化和虚拟 DOM 技术</li></ul><h3 id="vue-周边库" tabindex="-1"><a class="header-anchor" href="#vue-周边库" aria-hidden="true">#</a> Vue 周边库</h3><ul><li>vue-cli：vue 脚手架</li><li>vue-resource (axios)：ajax 请求</li><li>vue-router：路由</li><li>vuex：状态管理（它是 vue 的插件，但是没有用 vue-xxx 的命名规则）</li><li>vue-lazyload：图片懒加载</li><li>vue-scroller：页面滑动相关</li><li>mint-ui：基于 vue 的 UI 组件库（移动端）</li><li>element-ui：基于 vue 的 UI 组件库（PC 端）</li></ul><h2 id="初识-vue" tabindex="-1"><a class="header-anchor" href="#初识-vue" aria-hidden="true">#</a> 初识 Vue</h2><h3 id="前置工作" tabindex="-1"><a class="header-anchor" href="#前置工作" aria-hidden="true">#</a> 前置工作</h3><ol><li>给浏览器安装 <code>Vue Devtools</code> 插件</li><li>标签引入 Vue 包</li><li>（可选）阻止 Vue 在启动时生成生产提示 <code>Vue.config.productionTip = false</code></li></ol><h3 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h3><ol><li>想让 Vue 工作，就必须创建一个 <code>Vue实例</code>，且要传入一个配置对象</li><li>容器里的代码依然符合 HTML 规范，只不过混入了一些特殊的 Vue 语法</li><li>容器里的代码被称为 Vue 模板</li><li>Vue 实例与容器是一一对应的</li><li>真实开发中只有一个 Vue 实例，并且会配合着组件一起使用</li><li><code>{{xxx}}</code> 中的 <code>xxx</code> 要写 JS 表达式，且 <code>xxx</code> 可以自动读取到 data 中的所有属性</li><li>一旦 data 中的数据发生变化，那么页面中用到该数据的地方也会自动更新</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>初识Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 引入Vue --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 准备好一个容器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello，{{ name.toUpperCase() }}，{{ address }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 Vue 在启动时生成生产提示</span>
      <span class="token comment">// 创建Vue实例</span>
      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#demo&#39;</span><span class="token punctuation">,</span> <span class="token comment">// el用于指定当前Vue实例为哪个容器服务，值通常为CSS选择器字符串</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// data中用于存储数据，数据供el所指定的容器去使用，值暂时先写成一个对象</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhf&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;山东&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Vue核心-快速上手01.png" alt="Vue核心-快速上手01.png" tabindex="0" loading="lazy"><figcaption>Vue核心-快速上手01.png</figcaption></figure><p>注意区分：JS 表达式和 JS 代码（语句）</p><ol><li>JS 表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方，如：<code>a</code>、<code>a+b</code>、<code>demo(1)</code>、<code>x === y ? &#39;a&#39; : &#39;b&#39;</code></li><li>JS 代码（语句），只控制代码的走向，不生成值，如：<code>if (){}</code>、<code>for (){}</code></li></ol><h3 id="el-和-data" tabindex="-1"><a class="header-anchor" href="#el-和-data" aria-hidden="true">#</a> el 和 data</h3><h4 id="el" tabindex="-1"><a class="header-anchor" href="#el" aria-hidden="true">#</a> el</h4><p>el 用于指定当前 Vue 实例为哪个容器服务，值通常为 CSS 选择器字符串</p><h4 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h4><p>data 中用于存储数据，数据供 el 所指定的容器去使用，值暂时先写成一个对象</p><h4 id="el-和-data-的两种写法" tabindex="-1"><a class="header-anchor" href="#el-和-data-的两种写法" aria-hidden="true">#</a> el 和 data 的两种写法</h4><p>el 有两种写法：</p><ul><li>创建 Vue 实例对象的时候配置 el 属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span> <span class="token comment">//第一种写法</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhf&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先创建 Vue 实例，随后再通过 <code>vm.$mount(&#39;选择器&#39;)</code> 指定 el 的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhf&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
v<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span> <span class="token comment">//第二种写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>data 有两种写法：</p><ul><li>对象式：<code>data:{}</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>data:{
	name:&#39;zhf&#39;
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数式：<code>data(){return{}}</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>data(){
	console.log(&#39;@@@&#39;,this) //此处的this是Vue实例对象
	return{
		name:&#39;zhf&#39;
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何选择：组件时，data 必须使用函数式，否则会报错</p><p><mark>重要原则：由 Vue 管理的函数，一定不要写箭头函数，否则 this 就不再是 Vue 实例了</mark></p>`,36);function h(g,b){const s=l("ExternalLinkIcon");return p(),o("div",null,[a("blockquote",null,[a("p",null,[n("本文示例代码："),a("a",u,[n("NoteDemoCode/Vue/01-Vue核心-快速上手"),e(s)])])]),r,d,a("p",null,[a("a",k,[n("英文官网"),e(s)])]),a("p",null,[a("a",v,[n("中文官网"),e(s)])]),m])}const x=t(c,[["render",h],["__file","01-Vue核心-快速上手.html.vue"]]);export{x as default};
