import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as t,b as s}from"./app-95de414d.js";const e={},i=s(`<h2 id="css-长度单位" tabindex="-1"><a class="header-anchor" href="#css-长度单位" aria-hidden="true">#</a> CSS 长度单位</h2><ol><li>px：像素</li><li>em：相对元素 <code>font-size</code> 的倍数</li><li>rem：相对根字体大小，HTML 标签就是根</li><li>%：相对父元素计算</li></ol><h2 id="css-的元素显示模式" tabindex="-1"><a class="header-anchor" href="#css-的元素显示模式" aria-hidden="true">#</a> CSS 的元素显示模式</h2><p>定义：元素显示模式就是元素（标签）以什么方式进行显示，比如 <code>&lt;div&gt;</code> 自己占一行，比如一行可以放多个 <code>&lt;span&gt;</code></p><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页</p><h3 id="元素显示模式的分类" tabindex="-1"><a class="header-anchor" href="#元素显示模式的分类" aria-hidden="true">#</a> 元素显示模式的分类</h3><h4 id="块元素" tabindex="-1"><a class="header-anchor" href="#块元素" aria-hidden="true">#</a> 块元素</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 主体结构标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 排版标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 列表标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 表格相关标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 表单相关标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块级元素的特点：</p><ol><li>在页面中独占一行，不会与任何元素共用一行，是从上到下排列的</li><li>默认宽度：撑满父元素</li><li>默认高度：由内容撑开</li><li>可以通过 CSS 设置宽高</li></ol><p>注意：</p><ul><li>文字类的元素内不能放块级元素</li><li><code>&lt;p&gt;</code> 标签主要用于存放文字，因此 <code>&lt;p&gt;</code> 里面不能放块级元素，特别是不能放 <code>&lt;div&gt;</code></li><li><code>&lt;h1&gt;~&lt;h6&gt;</code> 等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h4 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素" aria-hidden="true">#</a> 行内元素</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 文本标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 其它标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;span&gt;</code> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素</p><p>行内元素的特点：</p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列</li><li>默认宽度：由内容撑开</li><li>默认高度：由内容撑开</li><li>无法通过 CSS 设置宽高</li></ol><p>注意：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换成块级模式最安全</li></ul><h4 id="行内块元素" tabindex="-1"><a class="header-anchor" href="#行内块元素" aria-hidden="true">#</a> 行内块元素</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 图片 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 单元格 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 表单控件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 框架标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们同时具有块元素和行内元素的特点</p><p>行内块元素的特点：</p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排 列</li><li>默认宽度：由内容撑开</li><li>默认高度：由内容撑开</li><li>可以通过 CSS 设置宽高</li></ol><h3 id="元素显示模式总结" tabindex="-1"><a class="header-anchor" href="#元素显示模式总结" aria-hidden="true">#</a> 元素显示模式总结</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的 100%</td><td>容器可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h3 id="元素显示模式的转换" tabindex="-1"><a class="header-anchor" href="#元素显示模式的转换" aria-hidden="true">#</a> 元素显示模式的转换</h3><p>通过 CSS 中的 display 属性可以修改元素的默认显示模式</p><p>转换方式：</p><ul><li>转换为块元素：<code>display: block;</code></li><li>转换为行内元素：<code>display: inline;</code></li><li>转换为行内块：<code>display: inline-block;</code></li><li>隐藏：<code>display: none;</code></li></ul><h2 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h2><p>CSS 会把所有的 HTML 元素都看成一个盒子，所有的样式也都是基于这个盒子</p><ol><li>margin（外边距）： 盒子与外界的距离</li><li>border（边框）： 盒子的边框</li><li>padding（内边距）： 紧贴内容的补白区域</li><li>content（内容）：元素中的文本或后代元素都是它的内容</li></ol><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS盒子模型01.png" alt="CSS盒子模型01.png" tabindex="0" loading="lazy"><figcaption>CSS盒子模型01.png</figcaption></figure><p><code>盒子的大小=content+左右 padding+左右border</code></p><p>注意：外边距 margin 不会影响盒子的大小，但会影响盒子的位置</p><h3 id="盒子内容区-content" tabindex="-1"><a class="header-anchor" href="#盒子内容区-content" aria-hidden="true">#</a> 盒子内容区（content）</h3><table><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>width</code></td><td>设置内容区域宽度</td><td>长度</td></tr><tr><td><code>max-width</code></td><td>设置内容区域的最大宽度</td><td>长度</td></tr><tr><td><code>min-width</code></td><td>设置内容区域的最小宽度</td><td>长度</td></tr><tr><td><code>height</code></td><td>设置内容区域高度</td><td>长度</td></tr><tr><td><code>max-height</code></td><td>设置内容区域的最大高度</td><td>长度</td></tr><tr><td><code>min-height</code></td><td>设置内容区域的最小高度</td><td>长度</td></tr></tbody></table><p>注意：</p><ol><li>max-width 、 min-width 一般不与 width 一起使用</li><li>max-height 、 min-height 一般不与 height 一起使用</li></ol><h4 id="关于默认宽度" tabindex="-1"><a class="header-anchor" href="#关于默认宽度" aria-hidden="true">#</a> 关于默认宽度</h4><p>所谓的默认宽度，就是不设置 width 属性时，元素所呈现出来的宽度</p><p><code>总宽度 = 父的content — 自身的左右margin</code></p><p><code>内容区的宽度 = 父的content — 自身的左右margin — 自身的左右border — 自身的左右padding</code></p><h3 id="盒子内边距-padding" tabindex="-1"><a class="header-anchor" href="#盒子内边距-padding" aria-hidden="true">#</a> 盒子内边距（padding）</h3><table><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td><td>长度</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td><td>长度</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距</td><td>长度</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td><td>长度</td></tr><tr><td><code>padding</code></td><td>复合属性</td><td>长度，可以设置 1~4 个值</td></tr></tbody></table><p>padding 复合属性的使用规则：</p><ol><li><code>padding: 10px;</code> 四个方向内边距都是 10px</li><li><code>padding: 10px 20px;</code> 上下 10px ，左右 20px 。（上下、左右）</li><li><code>padding: 10px 20px 30px;</code> 上 10px ，左右 20px ，下 30px 。（上、左右、下）</li><li><code>padding: 10px 20px 30px 40px;</code> 上 10px ，右 20px ，下 30px ，左 40px 。（上、右、下、左）</li></ol><p>注意点：</p><ol><li>padding 的值不能为负数</li><li>行内元素的左右内边距是没问题的，上下内边距不能完美的设置</li><li>块级元素、行内块元素，四个方向内边距都可以完美设置</li></ol><h3 id="盒子边框-border" tabindex="-1"><a class="header-anchor" href="#盒子边框-border" aria-hidden="true">#</a> 盒子边框（border）</h3><p>border 可以设置元素的边框</p><p>边框由三部分组成：边框宽度 (粗细)、边框样式、边框颜色</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border</span> <span class="token punctuation">:</span> border-width || border-style || border-color<span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是 px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><p>边框样式 border-style 可以设置如下值：</p><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线 (最为常用的)</li><li>dashed：边框为虚线</li><li>dotted：边框为点线</li></ul><p>边框简写：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  <span class="token comment">/* 没有顺序 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>边框分开写法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  <span class="token comment">/* 只设定上边框， 其余同理 */</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="盒子外边距-margin" tabindex="-1"><a class="header-anchor" href="#盒子外边距-margin" aria-hidden="true">#</a> 盒子外边距（margin）</h3><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><h4 id="margin-注意事项" tabindex="-1"><a class="header-anchor" href="#margin-注意事项" aria-hidden="true">#</a> margin 注意事项</h4><ol><li>子元素的 margin ，是参考父元素的 content 计算的。（因为是父亲的 content 中承装着子元素）</li><li>上 margin 、左 margin ：影响自己的位置；下 margin 、右 margin ：影响后面兄弟元素的位置</li><li>块级元素、行内块元素，均可以完美地设置四个方向的 margin ；但行内元素，左右 margin 可以完美设置，上下 margin 设置无效</li><li>margin 的值也可以是 auto ，如果给一个块级元素设置左右 margin 都为 auto ，该块级元素会在父元素中水平居中</li><li>margin 的值可以是负值</li></ol><h4 id="margin-合并问题" tabindex="-1"><a class="header-anchor" href="#margin-合并问题" aria-hidden="true">#</a> margin 合并问题</h4><p>上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加</p><p>相邻块元素垂直外边距的合并</p><ul><li>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并</li><li>解决方案：尽量只给一个盒子添加 margin 值</li></ul><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS盒子模型02.png" alt="CSS盒子模型02.png" tabindex="0" loading="lazy"><figcaption>CSS盒子模型02.png</figcaption></figure><h4 id="margin-塌陷问题" tabindex="-1"><a class="header-anchor" href="#margin-塌陷问题" aria-hidden="true">#</a> margin 塌陷问题</h4><p>第一个子元素的上 margin 会作用在父元素上，最后一个子元素的下 margin 会作用在父元素上</p><p>嵌套块元素垂直外边距的塌陷</p><ul><li>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</li><li>解决方案： <ul><li>可以为父元素定义上边框（border）</li><li>可以为父元素定义上内边距（padding）</li><li>可以为父元素添加 <code>overflow:hidden</code></li></ul></li></ul><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS盒子模型03.png" alt="CSS盒子模型02.png" tabindex="0" loading="lazy"><figcaption>CSS盒子模型02.png</figcaption></figure><h2 id="元素的显示与隐藏" tabindex="-1"><a class="header-anchor" href="#元素的显示与隐藏" aria-hidden="true">#</a> 元素的显示与隐藏</h2><ul><li>目的：让一个元素在页面中消失或者显示出来</li><li>场景：类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现</li></ul><h3 id="display-显示" tabindex="-1"><a class="header-anchor" href="#display-显示" aria-hidden="true">#</a> display 显示</h3><ul><li>display 属性用于设置一个元素应如何显示</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> none； <span class="token comment">/* 隐藏对象 */</span>
display：block；<span class="token comment">/* 除了转换为块级元素之外，同时还有显示元素的意思 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特点： display 隐藏元素后，不再占有原来的位置</li></ul><h3 id="visibility-可见性" tabindex="-1"><a class="header-anchor" href="#visibility-可见性" aria-hidden="true">#</a> visibility 可见性</h3><ul><li>visibility 属性用于指定一个元素应可见还是隐藏</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>visibility：visible<span class="token punctuation">;</span> 　<span class="token comment">/* 元素可视 */</span>
visibility：hidden<span class="token punctuation">;</span> 　 <span class="token comment">/* 元素隐藏 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特点：visibility 隐藏元素后，继续占有原来的位置</li><li>如果隐藏元素想要原来位置，就用 <code>visibility:hidden;</code></li><li>如果隐藏元素不想要原来位置，就用 <code>display:none;</code></li></ul><h3 id="overflow-溢出" tabindex="-1"><a class="header-anchor" href="#overflow-溢出" aria-hidden="true">#</a> overflow 溢出</h3><ul><li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><ul><li>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局</li><li>但是如果有定位的盒子，请慎用 <code>overflow:hidden</code> 因为它会隐藏多余的部分</li></ul><ul><li>用途 <ul><li>清除浮动</li><li>保证盒子里面的内容不会超出该盒子范围</li></ul></li></ul><h3 id="显示与隐藏总结" tabindex="-1"><a class="header-anchor" href="#显示与隐藏总结" aria-hidden="true">#</a> 显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td>display 显示</td><td>隐藏对象，不保留位置</td><td>配合后面 js 做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单，应用极为广泛</td></tr><tr><td>visibility 可见性</td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td>overflow 溢出</td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h2 id="布局小技巧" tabindex="-1"><a class="header-anchor" href="#布局小技巧" aria-hidden="true">#</a> 布局小技巧</h2><ol><li>行内元素、行内块元素，可以被父元素当做文本处理</li><li>如何让子元素在父亲中水平居中： <ul><li>若子元素为块元素，给父元素加上： <code>margin:0 auto;</code></li><li>若子元素为行内元素、行内块元素，给父元素加上： <code>text-align:center;</code></li></ul></li><li>如何让子元素，在父亲中垂直居中（若想绝对垂直居中，父元素 font-size 设置为 0）： <ul><li>若子元素为块元素，给子元素加上： <code>margin-top</code> ，值为：<code>(父元素content －子元素盒子总高) / 2</code></li><li>若子元素为行内元素、行内块元素：让父元素的 <code>height = line-height</code> ，每个子元素都加上： <code>vertical-align: middle;</code></li></ul></li></ol><h3 id="元素之间的空白问题" tabindex="-1"><a class="header-anchor" href="#元素之间的空白问题" aria-hidden="true">#</a> 元素之间的空白问题</h3><p>产生原因：行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符</p><p>解决方案：</p><ol><li>方案一： 去掉换行和空格（不推荐）</li><li>方案二： 给父元素设置 <code>font-size: 0</code> ，再给需要显示文字的元素，单独设置字体大小（推荐）</li></ol><h3 id="行内块的幽灵空白问题" tabindex="-1"><a class="header-anchor" href="#行内块的幽灵空白问题" aria-hidden="true">#</a> 行内块的幽灵空白问题</h3><p>产生原因：行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的</p><p>解决方案：</p><ol><li>方案一： 给行行内块设置 <code>vertical-align</code> ，值不为 baseline 即可，设置为 middel 、 bottom 、 top 均可</li><li>方案二： 若父元素中只有一张图片，设置图片为 <code>display: block;</code></li><li>方案三： 给父元素设置 <code>font-size: 0;</code> 。如果该行内块内部还有文本，则需单独设置 <code>font-size</code></li></ol>`,104),l=[i];function d(p,o){return n(),t("div",null,l)}const u=a(e,[["render",d],["__file","05-CSS盒子模型.html.vue"]]);export{u as default};
