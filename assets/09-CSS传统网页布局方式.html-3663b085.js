import{_ as e,r as i,o as l,c as d,a as o,w as r,b as t,d as n,e as a}from"./app-0bf01276.js";const c={},p=t(`<p>CSS 提供了三种传统布局方式 (简单说, 就是盒子如何进行排列)：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了</p><p>注意：实际开发中，一个页面基本都包含了这三种布局方式</p><h2 id="_1-标准流-普通流-文档流" tabindex="-1"><a class="header-anchor" href="#_1-标准流-普通流-文档流" aria-hidden="true">#</a> 1. 标准流（普通流/文档流）</h2><p>所谓的标准流: 就是标签按照规定好默认方式排列</p><ul><li>块级元素会独占一行，从上向下顺序排列 <ul><li>常用元素：<code>div</code>、<code>hr</code>、<code>p</code>、<code>h1</code>~<code>h6</code>、<code>ul</code>、<code>ol</code>、<code>dl</code>、<code>form</code>、<code>table</code></li></ul></li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行 <ul><li>常用元素：<code>span</code>、<code>a</code>、<code>i</code>、<code>em</code> 等</li></ul></li></ul><p>标准流是最基本的布局方式</p><h2 id="_2-浮动" tabindex="-1"><a class="header-anchor" href="#_2-浮动" aria-hidden="true">#</a> 2. 浮动</h2><h3 id="_2-1-为什么需要浮动" tabindex="-1"><a class="header-anchor" href="#_2-1-为什么需要浮动" aria-hidden="true">#</a> 2.1 为什么需要浮动</h3><p>有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式</p><p>浮动最典型的应用：可以让多个块级元素一行内排列显示</p><p><mark>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</mark></p><h3 id="_2-2-什么是浮动" tabindex="-1"><a class="header-anchor" href="#_2-2-什么是浮动" aria-hidden="true">#</a> 2.2 什么是浮动</h3><p>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及块或另一个浮动框的边缘</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">选择器</span> <span class="token punctuation">{</span> <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h3 id="_2-3-浮动特性" tabindex="-1"><a class="header-anchor" href="#_2-3-浮动特性" aria-hidden="true">#</a> 2.3 浮动特性</h3><p>加了浮动之后的元素, 会具有很多特性：</p><ul><li><p>浮动元素会脱离标准流 (脱标：浮动的盒子不再保留原先的位置)</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS传统网页布局方式01.png" alt="CSS传统网页布局方式01.png" tabindex="0" loading="lazy"><figcaption>CSS传统网页布局方式01.png</figcaption></figure></li><li><p>浮动的元素会一行内显示并且元素顶部对齐</p><ul><li>注意：浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐</li></ul></li><li><p>浮动的元素会具有行内块元素的特性</p><ul><li>任何元素都可以浮动，如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的</li></ul></li></ul><h3 id="_2-4-浮动布局注意点" tabindex="-1"><a class="header-anchor" href="#_2-4-浮动布局注意点" aria-hidden="true">#</a> 2.4 浮动布局注意点</h3><ul><li><p>浮动和标准流的父盒子搭配</p><ul><li><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是：先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置，符合网页布局第一准侧</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS传统网页布局方式02.png" alt="CSS传统网页布局方式02.png" tabindex="0" loading="lazy"><figcaption>CSS传统网页布局方式02.png</figcaption></figure></li><li><p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p></li></ul></li><li><p>一个元素浮动了，理论上其余的兄弟元素也要浮动</p><ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题</li></ul></li><li><p>浮动的盒子只会影响浮动盒子后面的标准流, 不会影响前面的标准流</p></li></ul><h3 id="_2-5-清除浮动" tabindex="-1"><a class="header-anchor" href="#_2-5-清除浮动" aria-hidden="true">#</a> 2.5 清除浮动</h3><h4 id="_2-5-1-为什么需要清除浮动" tabindex="-1"><a class="header-anchor" href="#_2-5-1-为什么需要清除浮动" aria-hidden="true">#</a> 2.5.1 为什么需要清除浮动</h4><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子</p><h4 id="_2-5-2-清除浮动本质" tabindex="-1"><a class="header-anchor" href="#_2-5-2-清除浮动本质" aria-hidden="true">#</a> 2.5.2 清除浮动本质</h4><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p><p>注意：</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了</li></ul><h4 id="_2-5-3-清除浮动样式" tabindex="-1"><a class="header-anchor" href="#_2-5-3-清除浮动样式" aria-hidden="true">#</a> 2.5.3 清除浮动样式</h4><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>属性值<span class="token punctuation">;</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>清除浮动的策略是: 闭合浮动</p><h4 id="_2-5-4-清除浮动的多种方式" tabindex="-1"><a class="header-anchor" href="#_2-5-4-清除浮动的多种方式" aria-hidden="true">#</a> 2.5.4 清除浮动的多种方式</h4><h5 id="_2-5-4-1-额外标签法" tabindex="-1"><a class="header-anchor" href="#_2-5-4-1-额外标签法" aria-hidden="true">#</a> 2.5.4.1 额外标签法</h5><p>额外标签法也称为隔墙法，是 W3C 推荐的做法</p><p>使用方式：额外标签法会在浮动元素末尾添加一个空的标签</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>，或者其他标签（如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>等）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差</li><li>注意： 要求这个新的空标签必须是块级元素</li></ul><h5 id="_2-5-4-2-父级添加overflow属性" tabindex="-1"><a class="header-anchor" href="#_2-5-4-2-父级添加overflow属性" aria-hidden="true">#</a> 2.5.4.2 父级添加overflow属性</h5><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll</p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span>hidden | auto | scroll<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li><li>注意：是给父元素添加代码</li></ul><h5 id="_2-5-4-3-父级添加after伪元素" tabindex="-1"><a class="header-anchor" href="#_2-5-4-3-父级添加after伪元素" aria-hidden="true">#</a> 2.5.4.3 父级添加after伪元素</h5><p><code>:after </code> 方式是额外标签法的升级版，给父元素添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> 
   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> 
   <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
   <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> 
   <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  
 <span class="token punctuation">}</span> 
 <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>  <span class="token comment">/* IE6、7 专有 */</span> 
   *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：兼容性问题</li></ul><h5 id="_2-5-4-4-父级添加双伪元素" tabindex="-1"><a class="header-anchor" href="#_2-5-4-4-父级添加双伪元素" aria-hidden="true">#</a> 2.5.4.4 父级添加双伪元素</h5><p>给父元素添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span> 
 <span class="token punctuation">}</span>
 <span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
   <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
    *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：代码更简洁</li><li>缺点：兼容性问题</li></ul><h3 id="_2-6-总结" tabindex="-1"><a class="header-anchor" href="#_2-6-总结" aria-hidden="true">#</a> 2.6 总结</h3><p>为什么需要清除浮动？</p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了</li></ol><table><thead><tr><th>清除浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级 <code>overflow:hidden;</code></td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级 <code>after</code> 伪元素</td><td>结构语义化，代码简洁</td><td>兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化，代码简洁</td><td>兼容性问题</td></tr></tbody></table><h2 id="_3-定位" tabindex="-1"><a class="header-anchor" href="#_3-定位" aria-hidden="true">#</a> 3. 定位</h2><h3 id="_3-1-为什么使用定位" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么使用定位" aria-hidden="true">#</a> 3.1 为什么使用定位</h3><p>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</p><p>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子</p><h3 id="_3-2-定位组成" tabindex="-1"><a class="header-anchor" href="#_3-2-定位组成" aria-hidden="true">#</a> 3.2 定位组成</h3><p>定位：将盒子定在某一个位置，所以<strong>定位也是在摆放盒子，按照定位的方式移动盒子</strong></p><p>定位也是用来布局的，它有两部分组成：<code>定位 = 定位模式 + 边偏移</code></p><p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式</p><p><strong>边偏移</strong>则决定了该元素的最终位置</p><h4 id="_3-2-1-边偏移-方位名词" tabindex="-1"><a class="header-anchor" href="#_3-2-1-边偏移-方位名词" aria-hidden="true">#</a> 3.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right 4 个属性</p><table><thead><tr><th>边偏移属性</th><th style="text-align:left;">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td style="text-align:left;"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong></td></tr><tr><td><code>bottom</code></td><td style="text-align:left;"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong></td></tr><tr><td><code>left</code></td><td style="text-align:left;"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong></td></tr><tr><td><code>right</code></td><td style="text-align:left;"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><p>定位的盒子有了边偏移才有价值。一般情况下，凡是有定位的地方必有边偏移</p><h4 id="_3-2-2-定位模式-position" tabindex="-1"><a class="header-anchor" href="#_3-2-2-定位模式-position" aria-hidden="true">#</a> 3.2.2 定位模式（position）</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span> 
    <span class="token property">position</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式</p><p>定位模式决定元素的定位方式，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th style="text-align:center;">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td style="text-align:center;"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td style="text-align:center;"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td style="text-align:center;"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td style="text-align:center;"><strong>固定</strong>定位</td></tr></tbody></table><h5 id="_3-2-2-1-静态定位-static" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-静态定位-static" aria-hidden="true">#</a> 3.2.2.1 静态定位 (static)</h5><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>，在不需要定位的时候用</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
    position: static; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态定位按照标准流特性摆放位置，它没有边偏移，静态定位在布局时几乎不用</p><h5 id="_3-2-2-2-相对定位-relative" tabindex="-1"><a class="header-anchor" href="#_3-2-2-2-相对定位-relative" aria-hidden="true">#</a> 3.2.2.2 相对定位 (relative)</h5><p><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
	position: relative; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对定位的特点：（务必记住）</p><ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）</li></ul><ul><li><strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它，因此，<strong>相对定位并没有脱标</strong></li></ul><h5 id="_3-2-2-3-绝对定位-absolute" tabindex="-1"><a class="header-anchor" href="#_3-2-2-3-绝对定位-absolute" aria-hidden="true">#</a> 3.2.2.3 绝对定位 (absolute)</h5><h6 id="_3-2-2-3-1-绝对定位的介绍" tabindex="-1"><a class="header-anchor" href="#_3-2-2-3-1-绝对定位的介绍" aria-hidden="true">#</a> 3.2.2.3.1 绝对定位的介绍</h6><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
 	position: absolute; 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绝对定位的特点：</p><ul><li><strong>完全脱标</strong> —— 完全不占位置</li><li>如果没有祖先元素或者祖先元素没有定位，则以<strong>浏览器</strong>为准定位（Document 文档）</li><li>如果祖先元素有定位 (相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</li></ul><h6 id="_3-2-2-3-2-定位口诀——子绝父相" tabindex="-1"><a class="header-anchor" href="#_3-2-2-3-2-定位口诀——子绝父相" aria-hidden="true">#</a> 3.2.2.3.2 定位口诀——子绝父相</h6><p><mark>子级是绝对定位的话，父级要用相对定位</mark></p><ul><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</li><li>父盒子需要加定位限制子盒子在父盒子内显示</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位</li></ul><p><strong>父级要占有位置，子级要任意摆放</strong>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong></p><p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到</p><h5 id="_3-2-2-4-固定定位-fixed" tabindex="-1"><a class="header-anchor" href="#_3-2-2-4-固定定位-fixed" aria-hidden="true">#</a> 3.2.2.4 固定定位 (fixed)</h5><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong></p><p>主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
 	position: fixed; 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>固定定位的特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong></li><li>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong></li></ul><h5 id="_3-2-2-5-粘性定位-sticky" tabindex="-1"><a class="header-anchor" href="#_3-2-2-5-粘性定位-sticky" aria-hidden="true">#</a> 3.2.2.5 粘性定位 (sticky)</h5><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
     position: sticky; 
     top: 10px; 
 }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>粘性定位的特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</li></ul><h5 id="_3-2-2-6-总结" tabindex="-1"><a class="header-anchor" href="#_3-2-2-6-总结" aria-hidden="true">#</a> 3.2.2.6 总结</h5><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static 静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否 (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><p>注意：</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong></li><li><code>top</code> 和 <code>bottom</code> 不要同时使用</li><li><code>left</code> 和 <code>right</code> 不要同时使用</li></ol><h3 id="_3-3-定位的应用" tabindex="-1"><a class="header-anchor" href="#_3-3-定位的应用" aria-hidden="true">#</a> 3.3 定位的应用</h3><p>固定定位小技巧： 固定在版心右侧位置</p><p>小算法：</p><ol><li>让固定定位的盒子 <code>left: 50%;</code>，走到浏览器可视区（也可以看做版心）的一半位置</li><li>让固定定位的盒子 <code>margin-left: 版心宽度的一半距离;</code> 多走版心宽度的一半位置</li><li>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了</li></ol><h3 id="_3-4-定位堆叠顺序-z-index" tabindex="-1"><a class="header-anchor" href="#_3-4-定位堆叠顺序-z-index" aria-hidden="true">#</a> 3.4 定位堆叠顺序 (z-index)</h3><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>，此时，可以使用 <code>z-index</code> 来控制盒子的前后次序 (z轴)</p><p>语法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
	z-index: 1; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>z-index</code> 的特性如下：</p><ul><li>属性值：正整数、负整数或0，默认值是0，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来者居上</li><li>数字后面<mark>不能加单位</mark></li></ul><p><mark>注意：<code>z-index</code> 只能应用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效</mark></p><h3 id="_3-5-定位的拓展" tabindex="-1"><a class="header-anchor" href="#_3-5-定位的拓展" aria-hidden="true">#</a> 3.5 定位的拓展</h3><h4 id="_3-5-1-绝对定位的盒子居中" tabindex="-1"><a class="header-anchor" href="#_3-5-1-绝对定位的盒子居中" aria-hidden="true">#</a> 3.5.1 绝对定位的盒子居中</h4><p>注意：加了绝对定位/固定定位的盒子不能通过设置 <code>margin: auto</code> 设置水平居中，但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p><ol><li><code>left: 50%;</code> 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left: -x px;</code> 让盒子向左移动自身宽度的一半</li></ol>`,134),u=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("style")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[a(`
    `),n("span",{class:"token selector"},".box"),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),a("50px"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),a("50px"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),a("pink"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token property"},"position"),n("span",{class:"token punctuation"},":"),a("absolute"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token property"},"left"),n("span",{class:"token punctuation"},":"),a("50%"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a("-25px"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("style")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("box"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=t('<h4 id="_3-5-2-定位特殊特性" tabindex="-1"><a class="header-anchor" href="#_3-5-2-定位特殊特性" aria-hidden="true">#</a> 3.5.2 定位特殊特性</h4><p>绝对定位和固定定位也和浮动类似：</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li></ol><p>display 是显示模式，可以改变显示模式有以下方式:</p><ul><li>可以用 <code>inline-block</code> 转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似，默认转换的特性转换为行内块</li></ul><blockquote><p>所以说，一个行内的盒子，如果加了浮动、固定定位和绝对定位，不用转换，就可以给这个盒子直接设置宽度和高度等</p></blockquote><h4 id="_3-5-3-脱标的盒子不会触发外边距塌陷" tabindex="-1"><a class="header-anchor" href="#_3-5-3-脱标的盒子不会触发外边距塌陷" aria-hidden="true">#</a> 3.5.3 脱标的盒子不会触发外边距塌陷</h4><p>浮动元素、绝对定位 (固定定位）元素的都不会触发外边距合并的问题</p><p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题</p><h4 id="_3-5-4-绝对定位-固定定位-会完全压住盒子" tabindex="-1"><a class="header-anchor" href="#_3-5-4-绝对定位-固定定位-会完全压住盒子" aria-hidden="true">#</a> 3.5.4 绝对定位(固定定位)会完全压住盒子</h4><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字，但是绝对定位（固定定位）会压住下面标准流所有的内容</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的，文字会围绕浮动元素</p>',12);function g(v,b){const s=i("CodeDemo");return l(),d("div",null,[p,o(s,{id:"code-demo-995",type:"normal",title:"Demo%20%E6%BC%94%E7%A4%BA",code:"eJxdj8EOgjAQRH+FNPGIGBMutfIlvbS00g2lS2hRCOHfpYraOKfNm8nu7EJM6CyhhPkwW11xl206SpyW9xj1ABUMLU/9dPlBo6Ex4Z9KUbfNgKNTeY0WB9qDaxO/Rw8B0FEhPdox6MSz+hb3HRLUiaEBl7+c/Fx+T63cseLTmElU896cKbhntRXeXznZvuCkYsXGYqzYc2R9AmfoSvA="},{default:r(()=>[u]),_:1}),h])}const m=e(c,[["render",g],["__file","09-CSS传统网页布局方式.html.vue"]]);export{m as default};
