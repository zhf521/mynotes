import{_ as s,o as n,c as a,b as e}from"./app-f0a1caf1.js";const i={},t=e(`<h2 id="_1-设计模式" tabindex="-1"><a class="header-anchor" href="#_1-设计模式" aria-hidden="true">#</a> 1. 设计模式</h2><h3 id="_1-什么是设计模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是设计模式" aria-hidden="true">#</a> 1. 什么是设计模式</h3><p>在软件工程中，设计模式是对软件设计中普遍存在的各种问题所提出的解决方案</p><p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案</p><h3 id="_2-常见的设计模式" tabindex="-1"><a class="header-anchor" href="#_2-常见的设计模式" aria-hidden="true">#</a> 2. 常见的设计模式</h3><ul><li>单例模式 <ul><li>全局唯一的实例</li><li>保证一个类仅有一个实例，并提供一个访问它的全局访问点</li><li>实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象</li><li>如<code>Vuex</code>中的<code>store</code></li><li>如登录框</li></ul></li><li>工厂模式 <ul><li>工厂模式通常会分成3个角色： <ul><li>工厂角色-负责实现创建所有实例的内部逻辑</li><li>抽象产品角色-是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</li><li>具体产品角色-是创建目标，所有创建的对象都充当这个角色的某个具体类的实例</li></ul></li></ul></li><li>策略模式 <ul><li>策略模式，就是定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换</li></ul></li><li>代理模式 <ul><li>为对象提供一个代用品或占位符，以便控制对它的访问</li><li>例如实现图片懒加载的功能，先通过一张<code>loading</code>图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到<code>img</code>标签里面</li><li>如<code>ES6 Proxy</code>实现<code>Vue3</code>响应式</li></ul></li><li>装饰者模式 <ul><li>在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法</li><li>通常运用在原有方法维持不变，在原有方法上再挂载其他方法来满足现有需求</li></ul></li><li>发布订阅模式 <ul><li>一种对象间一对多的依赖关系，当一个对象的状态发生改变时，所依赖它的对象都将得到状态改变的通知</li><li>广泛应用于异步编程中(替代了传递回调函数)</li></ul></li></ul><h2 id="_2-require与import的区别与使用" tabindex="-1"><a class="header-anchor" href="#_2-require与import的区别与使用" aria-hidden="true">#</a> 2. require与import的区别与使用</h2><p>区别：</p><ol><li><strong>规范</strong>：require是<strong>CommonJS</strong>规范的模块化语法，import是<strong>ECMAScript 6</strong>规范的模块化语法，如果要兼容浏览器的话必须转化成ES5的语法；CommonJS模块默认export的是一个对象，即使导出的是<strong>基础数据类型</strong></li><li><strong>本质：<strong>require是</strong>赋值</strong>过程，其实require 的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量，引入复杂数据类型时，数据<strong>浅拷贝</strong>该对象。import是<strong>解构</strong>过程</li><li><strong>加载</strong>：require是<strong>运行</strong>时加载，import是<strong>编译</strong>时加载</li><li><strong>位置</strong>：require可以写在代码的<strong>任意</strong>位置，import只能写在文件的<strong>最顶端</strong>且不可在条件语句或函数作用域中使用</li><li><strong>改变</strong>：require通过<strong>module.exports</strong>导出的<strong>值</strong>就<strong>不能再变</strong>，import通过export导出的值可以改变</li></ol><p>使用：</p><p>CommonJS标准：</p><p>导出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> 变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;模块名或路径&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Node.js 环境内置模块直接写模块名（例如：fs，path，http）</span>
<span class="token comment">// 自定义模块：写模块文件路径（例如：./utils.js)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> func1 <span class="token operator">=</span> moduleA<span class="token punctuation">.</span>func1<span class="token punctuation">;</span>
<span class="token keyword">const</span> func2 <span class="token operator">=</span> moduleA<span class="token punctuation">.</span>func2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ECMAScript 6标准：</p><p>导出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 变量名 <span class="token keyword">from</span> <span class="token string">&#39;模块名或路径&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> func1<span class="token punctuation">,</span> func2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">;</span>
 
module<span class="token punctuation">.</span>exports<span class="token operator">/</span><span class="token keyword">export</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-javascript的运行环境" tabindex="-1"><a class="header-anchor" href="#_3-javascript的运行环境" aria-hidden="true">#</a> 3. JavaScript的运行环境</h2><p><strong>脚本语言</strong>需要一个<strong>解析器</strong>才能<strong>运行</strong>，每一种解析器都是一个<strong>运行环境</strong></p><p>JavaScript是脚本语言，在不同的位置有不一样的解析器</p><h3 id="_1-浏览器" tabindex="-1"><a class="header-anchor" href="#_1-浏览器" aria-hidden="true">#</a> 1. 浏览器</h3><p>写入HTML的JavaScript，浏览器是它的解析器角色</p><p>浏览器中的JavaScript的用途是操作DOM，浏览器就提供了document之类的内置对象</p><h3 id="_2-node" tabindex="-1"><a class="header-anchor" href="#_2-node" aria-hidden="true">#</a> 2. Node</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，独立于浏览器的运行环境</p><p>Node.js中的JavaScript的用途是操作磁盘文件或搭建HTTP服务器，Node.js就相应提供了fs,http等内置对象</p>`,33),o=[t];function r(p,l){return n(),a("div",null,o)}const d=s(i,[["render",r],["__file","06-面试笔记-前端工程化.html.vue"]]);export{d as default};
