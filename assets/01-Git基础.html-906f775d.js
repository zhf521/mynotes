import{_ as s,r as d,o as c,c as t,d as a,e,a as o,b as n}from"./app-9283506f.js";const r={},l=n('<h2 id="_1-git简介" tabindex="-1"><a class="header-anchor" href="#_1-git简介" aria-hidden="true">#</a> 1. Git简介</h2><p>Git 是目前世界上最先进的分布式<mark>版本控制系统</mark></p><p>版本控制系统（version control system）, 是一种<mark>记录一个或若干文件内容变化</mark>，以便将来查阅特定版本修订情况的系统</p><h3 id="_1-1-git的诞生" tabindex="-1"><a class="header-anchor" href="#_1-1-git的诞生" aria-hidden="true">#</a> 1.1 Git的诞生</h3><p>Git 是由 Linux 之父 Linus 开发的，在 2005 年 4 月 3 号开始开发，到 4 月 7 号仅四天时间 Git 就可以投入使用了。到同年 6 月份，Linux 已经在使用 Git 管理代码了</p><p>Git 是用什么语言开发的：<mark>C 语言</mark></p><h3 id="_1-2-集中式vs分布式" tabindex="-1"><a class="header-anchor" href="#_1-2-集中式vs分布式" aria-hidden="true">#</a> 1.2 集中式vs分布式</h3><p>集中式和分布式的区别是：你的本地是否有完整的版本库历史！</p><p>假设 SVN 服务器没了，那你丢掉了所有历史信息，因为你的本地只有当前版本以及部分历史信息。必须联网才能工作</p><p>假设 GitHub 服务器没了，你不会丢掉任何 git 历史信息，因为你的本地有完整的版本库信息。你可以把本地的 git 库重新上传到另外的 git 服务商。可以离线工作</p><h2 id="_2-安装git" tabindex="-1"><a class="header-anchor" href="#_2-安装git" aria-hidden="true">#</a> 2. 安装Git</h2>',11),p={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},u=n(`<p>安装完成后，在桌面右键菜单里找到<code>Git Bash Here</code>，会出现一个类似命令行窗口的东西，说明 Git 安装成功！输入<code>git -v</code>可以查看版本号</p><h2 id="_3-git初始化" tabindex="-1"><a class="header-anchor" href="#_3-git初始化" aria-hidden="true">#</a> 3. Git初始化</h2><h3 id="_3-1-设置用户签名" tabindex="-1"><a class="header-anchor" href="#_3-1-设置用户签名" aria-hidden="true">#</a> 3.1 设置用户签名</h3><blockquote><p>签名的作用就是用来标识用户，以区分不同的开发人员</p></blockquote><p>==安装完成后，还需要最后一步设置，==在命令行输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Your Name&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>git config</code> 命令的 <code>--global</code> 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址</p><h3 id="_3-2-初始化仓库" tabindex="-1"><a class="header-anchor" href="#_3-2-初始化仓库" aria-hidden="true">#</a> 3.2 初始化仓库</h3><p><mark>如果你使用 Windows 系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文</mark></p><p>通过 <code>git init</code> 命令可以把目录变成 Git 可以管理的仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git 初始化的指令</span>
<span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>瞬间 Git 就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），可以发现当前目录下多了一个 <code>.git</code> 的目录，这个目录是 Git 来跟踪仓库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把 Git 仓库给破坏了。</p><p>如果你没有看到 <code>.git</code> 目录，那是因为这个目录默认是隐藏的，用 <code>ls -ah</code> 命令就可以看见</p><p><mark>也不一定必须在空目录下创建 Git 仓库，选择一个已经有东西的目录也是可以的</mark></p><h2 id="_4-git工作机制" tabindex="-1"><a class="header-anchor" href="#_4-git工作机制" aria-hidden="true">#</a> 4. Git工作机制</h2><p>Git有三个区域：分别是Git工作区、暂存区和版本库</p><p><mark>具体流程：代码提交到暂存区（暂时保存），然后暂存区提交到 master 分支（版本库）</mark></p><h3 id="_4-1-git工作区" tabindex="-1"><a class="header-anchor" href="#_4-1-git工作区" aria-hidden="true">#</a> 4.1 Git工作区</h3><p>在电脑里面能够看得到的项目目录，但是项目目录下隐藏了一个 <code>.git</code> 目录，这个目录不属于工作区，而是版本库</p><h3 id="_4-2-git暂存区" tabindex="-1"><a class="header-anchor" href="#_4-2-git暂存区" aria-hidden="true">#</a> 4.2 Git暂存区</h3><p>英文叫 stage 或 index。一般存放在<code> .git</code> 目录下的 index 文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（index）</p><h3 id="_4-3-git版本库" tabindex="-1"><a class="header-anchor" href="#_4-3-git版本库" aria-hidden="true">#</a> 4.3 Git版本库</h3><p><code>.git</code> 目录就是版本库</p><h2 id="_5-托管平台" tabindex="-1"><a class="header-anchor" href="#_5-托管平台" aria-hidden="true">#</a> 5. 托管平台</h2><ul><li>局域网（内网） <ul><li>GitLab</li></ul></li><li>公网（外网） <ul><li>GitLab</li><li>GitHub</li><li>Gitee</li></ul></li></ul><h2 id="_6-添加文件到暂存区" tabindex="-1"><a class="header-anchor" href="#_6-添加文件到暂存区" aria-hidden="true">#</a> 6. 添加文件到暂存区</h2><p>我们要放入暂存区，要使用 <code>git add</code> 命令</p><p>把单独一个文件放在暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下的index.txt文本放在暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> index.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>把单独一个文件夹放在暂存区（<mark>暂存区不能存放空文件夹</mark>）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下的test文件夹放在暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> test/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>把所有文件都放在暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下所有的内容都放在暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span>
<span class="token comment"># git add --all 有一个简单的写法</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>git status</code> 命令来查看仓库当前的状态 可以使用 <code>git rm --cached &lt;file&gt;</code> 命令来从暂存区中删除 file</p><h2 id="_7-提交暂存区到本地仓库" tabindex="-1"><a class="header-anchor" href="#_7-提交暂存区到本地仓库" aria-hidden="true">#</a> 7. 提交暂存区到本地仓库</h2><p>将暂存区文件提交到本地仓库，使用 <code>git commit</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把暂存区的内容放到本地仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;备注&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>git log</code> 命令来查看版本信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前历史区版本信息</span>
<span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-切换版本" tabindex="-1"><a class="header-anchor" href="#_8-切换版本" aria-hidden="true">#</a> 8. 切换版本</h2><h3 id="_8-1-版本回退" tabindex="-1"><a class="header-anchor" href="#_8-1-版本回退" aria-hidden="true">#</a> 8.1 版本回退</h3><p>使用 <code>git reset --hard 版本编号</code> 进行版本回退（回退到工作区）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 回退到上一次提交的版本</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
<span class="token comment"># 回退到上上次提交的版本</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 <code>HEAD</code> 指针，当你回退版本的时候，Git 仅仅是把 HEAD 从指向 <code>当前版本</code> ，改为指向 <code>要回到的版本</code></p><p>然后顺便把工作区的文件更新了。所以你让 <code>HEAD</code> 指向哪个版本号，你就把当前版本定位在哪</p><p><mark>如果回退错了，可以使用 <code>git reflog</code> 命令来查看所有的操作记录，可以通过前面的标识符（版本号）来回退</mark></p><p>使用 <code>git reset --soft 版本编号</code> 可以回退到暂存区，用处：备注重写和版本合并</p><h3 id="_8-2-git-revert和git-reset" tabindex="-1"><a class="header-anchor" href="#_8-2-git-revert和git-reset" aria-hidden="true">#</a> 8.2 git revert和git reset</h3><p>git reset 是回滚到对应的 <code>commit-id</code>，相当于是删除了 <code>commit-id</code> 以后的所有的提交，并且不会产生新的 <code>commit-id</code> 记录，如果要推送到远程服务器的话，需要强制推送<code>-f</code></p><p>git revert 是反做撤销其中的 <code>commit-id</code>，然后重新生成一个 <code>commit-id</code>。本身不会对其他的提交 <code>commit-id</code> 产生影响，如果要推送到远程服务器的话，就是普通的操作 <code>git push</code> 就可以</p><h2 id="_9-git分支" tabindex="-1"><a class="header-anchor" href="#_9-git分支" aria-hidden="true">#</a> 9. Git分支</h2><h3 id="_9-1-初识分支" tabindex="-1"><a class="header-anchor" href="#_9-1-初识分支" aria-hidden="true">#</a> 9.1 初识分支</h3><p><code>git</code> 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域</p><p>比如我们在开发 <code>登录</code> 功能的时候，可以放在 <code>login</code> 分支下进行开发；在开发 <code>列表</code> 功能的时候，可以放在 <code>list</code> 分支下进行开发，大家互不干扰，每一个功能都是一个独立的功能分支，这样开发会更好</p><p><code>git</code> 在初始化的时候，会自动生成一个分支，叫做 <code>master</code>，是表示主要分支的意思</p><p>我们可以自己开辟出很多独立分支</p><h3 id="_9-2-分支管理" tabindex="-1"><a class="header-anchor" href="#_9-2-分支管理" aria-hidden="true">#</a> 9.2 分支管理</h3><p>开辟一个分支，使用 <code>git branch 分支名称</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开辟一个login分支</span>
<span class="token function">git</span> branch login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看一下当前分支情况，前面有个 <code>*</code> 的，并且有高亮显示的，表示你当前所处的分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前分支情况</span>
<span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>切换分支（HEAD 指向会跟着一起变），使用 <code>git checkout 分支名称</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到master分支</span>
<span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：切换分支时，记得将当前分支提交到暂存区（git add）</mark></p><p>合并分支，使用 <code>git merge 分支名称</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 合并login分支到master分支</span>
<span class="token comment"># 首先切换到master分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 合并分支</span>
<span class="token function">git</span> merge login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除分支，使用 <code>git branch -d 分支名称</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除login分支</span>
<span class="token comment"># 先切换到别的分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 删除login分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-分支合并冲突" tabindex="-1"><a class="header-anchor" href="#_9-3-分支合并冲突" aria-hidden="true">#</a> 9.3 分支合并冲突</h3><p>分支合并后如有冲突，git 会在文件中标识出来，需要我们人工解决冲突</p><h2 id="_10-团队协作" tabindex="-1"><a class="header-anchor" href="#_10-团队协作" aria-hidden="true">#</a> 10. 团队协作</h2><p>需要使用托管平台来实现，如 GitHub</p><h3 id="_10-1-创建并连接github远端仓库" tabindex="-1"><a class="header-anchor" href="#_10-1-创建并连接github远端仓库" aria-hidden="true">#</a> 10.1 创建并连接GitHub远端仓库</h3><p>首先，登陆 GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在 Repository name 填入你的仓库名，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的 Git 仓库</p><p>目前，在GitHub上的这个仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库</p><p>现在，我们根据 GitHub 的提示，在本地的要上传的仓库下运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:你的账户名/你的仓库名.git
<span class="token comment"># 如：git remote add origin git@github.com:zhf521/learngit.git</span>
<span class="token comment"># 这里的origin是你的远端库的别名，可以是任意的，以后你提交的时候就可以向origin提交即可</span>
<span class="token comment"># 使用 git remote remove origin 命令即可删除,这里的origin是仓库的别名，可以使用git remote -v查看</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>git remote -v</code> 可以查看连接的远程库</p><h3 id="_10-2-推送" tabindex="-1"><a class="header-anchor" href="#_10-2-推送" aria-hidden="true">#</a> 10.2 推送</h3><p>使用 <code>git push</code> 推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
<span class="token comment"># 将本地分支推送到远程库（别名为origin）master分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>-u</code> 参数即可以后只使用 <code>git push</code> 来推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>关于<code>-u</code>参数</p><p><code>-u</code> 参数是 Git 命令中的一个可选参数，通常用于在执行 <code>git push</code> 或 <code>git pull</code> 等命令时，建立本地分支和远程分支之间的关联关系。其实际含义是 <code>--set-upstream</code>，表示设置当前分支跟踪指定的远程分支</p><p>当使用 <code>git push</code> 命令将本地分支推送到远程仓库的某个分支时，如果指定了 <code>-u</code> 参数，Git 会在成功推送后自动把本地分支和远程分支建立一个追踪关系。这样，在以后的操作中，Git 就知道要将本地分支与哪个远程分支进行同步，并可以通过简单的命令来完成相应的操作</p><p>例如，执行以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令将会把本地的 <code>master</code> 分支推送到名为 <code>origin</code> 的远程仓库，并在本地的 <code>master</code> 分支与远程的 <code>origin/master</code> 分支之间建立追踪关系。这样，在以后的操作中，可以直接使用 <code>git push</code> 命令将本地的 <code>master</code> 分支提交到远程的 <code>origin/master</code> 分支上，或者使用 <code>git pull</code> 命令将远程的 <code>origin/master</code> 分支上的更新合并到本地的 <code>master</code> 分支上</p><p>需要注意的是，<code>-u</code> 参数只用于首次推送本地分支时，后续的推送和拉取操作可以直接使用 <code>git push</code> 和 <code>git pull</code> 命令来完成。另外，在执行 <code>git branch</code> 命令时，可以通过 <code>-u</code> 参数来手动建立本地分支和远程分支之间的追踪关系</p></blockquote><h3 id="_10-3-拉取" tabindex="-1"><a class="header-anchor" href="#_10-3-拉取" aria-hidden="true">#</a> 10.3 拉取</h3><p>使用 <code>git pull</code> 拉取更新的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin master
<span class="token comment"># 将远程库（别名为origin）master分支拉取到本地分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>-u</code> 参数即可以后只使用 <code>git pull</code> 来推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-4-克隆" tabindex="-1"><a class="header-anchor" href="#_10-4-克隆" aria-hidden="true">#</a> 10.4 克隆</h3><p>使用 <code>git clone 仓库地址</code> 克隆远程仓库里面的内容到本地==（注意：克隆只能克隆主分支）==</p><p>可以克隆别人的公开的仓库，也可以克隆自己的仓库，克隆别人的仓库，我们只能拿来用，修改后不能重新上传；克隆自己的仓库，我们修改后还可以再次上传更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接克隆仓库</span>
<span class="token function">git</span> clone 仓库地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-团队协作的分支管理" tabindex="-1"><a class="header-anchor" href="#_11-团队协作的分支管理" aria-hidden="true">#</a> 11. 团队协作的分支管理</h2><p>本地分支推送到远程分支</p><p>使用 <code>git push</code> 推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin login
<span class="token comment"># 将本地分支推送到远程库（别名为origin）login分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：克隆只能克隆主分支，需要拉取分支</mark></p><p>使用 <code>git pull</code> 拉取更新的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin login
<span class="token comment"># 将远程库（别名为origin）login分支拉取到本地分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin :login
<span class="token comment"># 将远程库（别名为origin）login分支删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-跨团队协作" tabindex="-1"><a class="header-anchor" href="#_12-跨团队协作" aria-hidden="true">#</a> 12. 跨团队协作</h2><p>先 fork 到自己的仓库，然后修改，然后 pull request，等待原作者审核</p><h2 id="_13-忽略文件" tabindex="-1"><a class="header-anchor" href="#_13-忽略文件" aria-hidden="true">#</a> 13. 忽略文件</h2><p>在使用 git 过程中，我们可能有些文件不需要上传上去，比如一些缓存文件，生成的图片，运行环境的一些配置等等，这时就需要用到 <code>.gitignore</code> 文件来忽略掉这些文件</p><h3 id="_13-1-创建-gitignore文件" tabindex="-1"><a class="header-anchor" href="#_13-1-创建-gitignore文件" aria-hidden="true">#</a> 13.1 创建.gitignore文件</h3><p>在要管理的根目录下（即 <code>.git</code> 文件夹同级目录中）创建一个 <code>.gitignore</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建.gitignore文件命令</span>
<span class="token function">touch</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-2-写入要忽略的文件或文件夹" tabindex="-1"><a class="header-anchor" href="#_13-2-写入要忽略的文件或文件夹" aria-hidden="true">#</a> 13.2 写入要忽略的文件或文件夹</h3><p>使用 Vim 来写入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令</span>
<span class="token function">vim</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<mark><code>.gitignore</code> 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 <code>.gitignore</code> 是无效的。那么解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交</mark></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-3-gitignore的格式规范" tabindex="-1"><a class="header-anchor" href="#_13-3-gitignore的格式规范" aria-hidden="true">#</a> 13.3 .gitignore的格式规范</h3><ul><li><code>#</code> 为注释</li><li>可以使用 shell 所使用的正则表达式来进行模式匹配</li><li>匹配模式最后跟 <code>/</code> 说明要忽略的是目录</li><li>使用 <code>!</code> 取反，（例如目录中包含 <code>test.a</code>，并且 <code>.gitignore</code> 文件中包含 <code>*.[oa]</code>，如果在文件中加入 <code>!test.a</code> 表明忽略除 <code>test.a</code> 文件以外的后缀名为 <code>.a</code> 或者 <code>.o</code> 的文件）</li></ul><h3 id="_13-4-配置语法" tabindex="-1"><a class="header-anchor" href="#_13-4-配置语法" aria-hidden="true">#</a> 13.4 配置语法</h3><ul><li>以斜杠 <code>/</code> 开头表示目录</li><li>以星号 <code>*</code> 通配多个字符</li><li>以问号 <code>?</code> 通配多个字符</li><li>以方括号 <code>[]</code> 包含单个字符的匹配列表</li><li>以感叹号 <code>!</code> 表示不忽略（跟踪）匹配到的文件或目录</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*.a       <span class="token comment"># 忽略所有 .a 结尾的文件  </span>
<span class="token operator">!</span>lib.a    <span class="token comment"># 但 lib.a 除外  </span>
/TODO     <span class="token comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括subdir/TODO  </span>
build/    <span class="token comment"># 忽略 build/ 目录下的所有文件  </span>
doc/*.txt <span class="token comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<mark>git 对于 <code>.gitignore</code> 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效</mark></p><h2 id="_14-vscode集成git" tabindex="-1"><a class="header-anchor" href="#_14-vscode集成git" aria-hidden="true">#</a> 14. VSCode集成Git</h2><p>VSCode 中已经集成了 Git</p><h2 id="_15-一图总结" tabindex="-1"><a class="header-anchor" href="#_15-一图总结" aria-hidden="true">#</a> 15. 一图总结</h2><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git基础01.png" alt="Git基础01.png" tabindex="0" loading="lazy"><figcaption>Git基础01.png</figcaption></figure>`,125);function h(m,g){const i=d("ExternalLinkIcon");return c(),t("div",null,[l,a("p",null,[e("在 Windows 上使用 Git，可以从 Git 官网直接"),a("a",p,[e("下载安装程序"),o(i)]),e("，然后按默认选项安装即可")]),u])}const b=s(r,[["render",h],["__file","01-Git基础.html.vue"]]);export{b as default};
