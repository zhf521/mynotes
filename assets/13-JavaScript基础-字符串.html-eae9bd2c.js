import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-9d21922c.js";const c={},o=e(`<h2 id="创建字符串" tabindex="-1"><a class="header-anchor" href="#创建字符串" aria-hidden="true">#</a> 创建字符串</h2><p>我们创建字符串也分为两种方法 <strong>字面量</strong> 和 <strong>构造函数</strong></p><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="构造函数创建" tabindex="-1"><a class="header-anchor" href="#构造函数创建" aria-hidden="true">#</a> 构造函数创建</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集" aria-hidden="true">#</a> 字符集</h2><h3 id="ascii-字符集" tabindex="-1"><a class="header-anchor" href="#ascii-字符集" aria-hidden="true">#</a> ASCII 字符集</h3><p>我们都知道，计算机只能存储 <code>0101010</code> 这样的二进制数字，那么我们的 <code>a ~ z</code> 、<code>A ~ Z</code> 、<code>$</code> 、<code>@</code> 之类的内容也有由二进制数字组成的，我们可以简单的理解为， <code>a ~ z</code> 、 <code>A ~ Z</code>、 <code>$</code> 、 <code>@</code>之类的内容都有一个自己的编号，然后在计算机存储的时候，是存储的这些编号，我们看的时候，也是通过这些编号再解析成我们要看到的内容</p><h3 id="unicode-编码" tabindex="-1"><a class="header-anchor" href="#unicode-编码" aria-hidden="true">#</a> unicode 编码</h3><p>我们看到了，<code>ASCII</code> 只有这 <code>128</code> 个字符的编码结构，但是因为 <code>ASCII</code> 出现的比较早，而且是美国发明的，早先时候这些内容就够用了，因为存储一些英文的内容，传递一些英文的文章什么的都够用了，那么对于这个世界来说肯定是不够用的，因为我们的汉字没有办法存储，包括一些其他国家的语言也没有办法存储，所以就出现了 <code>unicode</code> 编码，也叫（万国码，统一码），<code>unicode</code> 对照表就是一个和 <code>ASCII</code> 一样的对照表，只不过变得很大很大，因为存储的内容特别的多，而且包含了世界上大部分国家的文字，所以我们的文字和字符现在在存储的时候，都是按照 <code>unicode</code> 编码转换成数字进行存储，我们的 <code>UTF-8</code> 就是一种 <code>8 位的 unicode</code> 字符集</p><h2 id="字符串的常用方法" tabindex="-1"><a class="header-anchor" href="#字符串的常用方法" aria-hidden="true">#</a> 字符串的常用方法</h2><p>字符串和数组有一个相同的特点，即字符串也是按照索引来排列的</p><h3 id="charat" tabindex="-1"><a class="header-anchor" href="#charat" aria-hidden="true">#</a> charAt</h3><p><code>charAt(索引)</code> 是找到字符串中指定索引位置的内容并返回</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>

<span class="token comment">// 使用 charAt 找到字符串中的某一个内容</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment">// c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为字符串也是按照索引进行排列的，也是同样从 0 开始，所以索引 2 的位置就是 <code>c</code></p><p>如果没有对应的索引，那么就会返回 空字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>

<span class="token comment">// 使用 charAt 找到字符串中的某一个内容</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个字符串根本没有索引 10 的位置，所以就会返回一个空字符串 <code>&#39;&#39;</code></p><h3 id="charcodeat" tabindex="-1"><a class="header-anchor" href="#charcodeat" aria-hidden="true">#</a> charCodeAt</h3><p><code>charCodeAt(索引)</code> 就是返回对应索引位置的 <code>unicode</code> 编码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>

<span class="token comment">// 使用 charAt 找到字符串中的某一个内容</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment">// 74</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>J</code> 在 <code>unicode</code> 对照表里面存储的是 74，所以就会返回 74</p><h3 id="indexof" tabindex="-1"><a class="header-anchor" href="#indexof" aria-hidden="true">#</a> indexOf</h3><p><code>indexOf</code> 就是按照字符找到对应的索引</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>

<span class="token comment">// 使用 indexOf 找到对应的索引</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;J&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为字符 <code>J</code> 在字符串 <code>Jack</code> 中的索引位置是 0，所以会返回 0</p><h3 id="substring" tabindex="-1"><a class="header-anchor" href="#substring" aria-hidden="true">#</a> substring</h3><p><code>substring</code> 是用来截取字符串使用的</p><p>语法： <code>substring(从哪个索引开始，到哪个索引截止)</code>，包含开始索引，不包含结束索引</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment">//         01234</span>

<span class="token comment">// 使用 substring 截取字符串</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment">// el</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从索引 1 开始，到索引 3 截止，包含前面的索引不包含后面的索引，所以返回的是 el</p><h3 id="substr" tabindex="-1"><a class="header-anchor" href="#substr" aria-hidden="true">#</a> substr</h3><p><code>substr</code> 也是用来截取字符串的</p><p>语法：<code>substr(从哪个索引开始，截取多少个)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment">//         01234</span>

<span class="token comment">// 使用 substr 截取字符串</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment">// ell</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法和 <code>substring</code> 不一样的是，第二个参数是截取多少个，从索引 1 开始，截取 3 个，所以得到的是 <code>ell</code></p><h3 id="tolowercase-和-touppercase" tabindex="-1"><a class="header-anchor" href="#tolowercase-和-touppercase" aria-hidden="true">#</a> toLowerCase 和 toUpperCase</h3><p>这两个方法分别使用用来给字符串转成 <strong>小写字母</strong> 和 <strong>大写字母</strong> 的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> hello

<span class="token comment">// 使用 toUpperCase 转换成大写</span>
<span class="token keyword">var</span> upper <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>upper<span class="token punctuation">)</span> <span class="token comment">// HELLO</span>

<span class="token comment">// 使用 toLowerCase 转换成小写</span>
<span class="token keyword">var</span> lower <span class="token operator">=</span> upper<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lower<span class="token punctuation">)</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),t=[o];function p(i,d){return s(),a("div",null,t)}const u=n(c,[["render",p],["__file","13-JavaScript基础-字符串.html.vue"]]);export{u as default};
