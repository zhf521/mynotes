import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,b as i}from"./app-2d3f6b0b.js";const c={},o=i('<p>JavaScript 语言的一大特点就是单线程，也就是说，同一时间只能做一件事</p><p>这是因为 JavaScript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。应该先进行添加，然后再删除</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样导致的问题是：如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉</p><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步</p><h2 id="同步和异步" tabindex="-1"><a class="header-anchor" href="#同步和异步" aria-hidden="true">#</a> 同步和异步</h2><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水做饭，等水开了（十分钟后），再去切菜、炒菜</p><p>在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法：我们在烧水的同时，利用这十分钟去切菜、炒菜</p><p><mark>它们的本质区别：这条流水线上各个流程的执行顺序不同</mark></p><h2 id="同步任务" tabindex="-1"><a class="header-anchor" href="#同步任务" aria-hidden="true">#</a> 同步任务</h2><p>同步任务都在主线程上执行，形成一个执行栈</p><h2 id="异步任务" tabindex="-1"><a class="header-anchor" href="#异步任务" aria-hidden="true">#</a> 异步任务</h2><p>JS 的异步是通过回调函数实现的，异步任务相关的添加到任务队列中（任务队列也称为消息队列）</p><p>一般而言，异步任务有以下三种类型：</p><ul><li>普通事件，如 <code>click</code>、<code>resize</code> 等</li><li>资源加载，如 <code>load</code>、<code>error</code> 等</li><li>定时器，如 <code>setInterval</code>、<code>setTimeout</code> 等</li></ul><h2 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h2><ol><li>先执行执行栈中的同步任务</li><li>异步任务放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><p>由于主线程不断的重复获得任务、执行任务、再获得任务、再执行，这种机制被称为事件循环（event loop）</p>',17),d=[o];function t(p,l){return a(),r("div",null,d)}const s=e(c,[["render",t],["__file","32-JavaScript-执行机制.html.vue"]]);export{s as default};
