import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,e as s}from"./app-b2689d13.js";const l={},i=s(`<p>数据类型是指存储在内存中的数据的类型，通常分为两大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></p><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><p>基本数据类型又叫做简单类型或者值类型，在存储时变量中存储的是值本身，因此叫做值类型，如 string，number，boolean，undefined，null</p><ol><li>数值类型（number） <ul><li>一切数字都是数值类型（包括二进制，十进制，十六进制等）</li><li><code>NaN</code>（not a number），一个非数字，NaN 代表一个计算错误，它是一个不正确的或一个未定义的数学操作所得到的结果，NaN 是粘性的，任何对 NaN 的操作都会返回 NaN</li></ul></li><li>字符串类型（string） <ul><li>被引号包裹的所有内容（可以是单引号<code>&#39;&#39;</code>也可以是双引号<code>&quot;&quot;</code>）,单引号和双引号没有本质上的区别，推荐使用单引号</li><li>注意： <ul><li>无论单引号或是双引号必须成对使用</li><li>单引号/双引号可以互相嵌套，但是不可以自已嵌套自已</li><li>必要时可以使用转义符 <code>\\</code>，输出单引号或双引号</li></ul></li></ul></li><li>布尔类型（boolean） <ul><li>只有两个（<code>true</code> 或者 <code>false</code>）</li></ul></li><li>null类型（null） <ul><li>只有一个，就是 <code>null</code>，表示”空“、”无“或”值未知“的意思</li></ul></li><li>未定义类型（undefined） <ul><li>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少直接为某个变量赋值为 undefined</li></ul></li></ol><h2 id="复杂数据类型" tabindex="-1"><a class="header-anchor" href="#复杂数据类型" aria-hidden="true">#</a> 复杂数据类型</h2><p>复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型</p><p>通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等</p><h2 id="判断数据类型" tabindex="-1"><a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a> 判断数据类型</h2><p>使用 <code>typeof</code> 关键字来检测数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种使用方式</span>
<span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n1<span class="token punctuation">)</span><span class="token comment">// number</span>

<span class="token comment">// 第二种使用方式</span>
<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h2><p>数据类型之间的转换，比如数字转成字符串，字符串转成布尔，布尔转成数字等</p><p>JavaScript 是弱类型语言：JavaScript 也不知道变量到底属于哪种数据类型，只有赋值了才清楚</p><h3 id="其他数据类型转成数值" tabindex="-1"><a class="header-anchor" href="#其他数据类型转成数值" aria-hidden="true">#</a> 其他数据类型转成数值</h3><ul><li><p><code>Number(变量)</code></p><ul><li>可以把一个变量强制转换成数值类型</li><li>可以转换小数，会保留小数</li><li>可以转换布尔值</li><li>遇到不可转换的都会返回 <code>NaN</code></li></ul></li><li><p><code>parseInt(变量)</code></p><ul><li>从第一位开始检查，是数字就转换，直到一个不是数字的内容</li><li>开头就不是数字，那么直接返回 <code>NaN</code></li><li>不认识小数点，只能保留整数</li></ul></li><li><p><code>parseFloat(变量)</code></p><ul><li>从第一位开始检查，是数字就转换，直到一个不是数字的内容</li><li>开头就不是数字，那么直接返回 <code>NaN</code></li><li>认识一次小数点</li></ul></li><li><p>除了加法以外的数学运算</p><ul><li>运算符两边都是可运算数字才行</li><li>如果运算符任何一边不是一个可运算数字，那么就会返回 <code>NaN</code></li><li>加法不可以用</li></ul></li></ul><h3 id="其他数据类型转成字符串" tabindex="-1"><a class="header-anchor" href="#其他数据类型转成字符串" aria-hidden="true">#</a> 其他数据类型转成字符串</h3><ul><li><p><code>变量.toString()</code></p><ul><li>有一些数据类型不能使用 <code>toString()</code> 方法，比如 <code>undefined</code> 和 <code>null</code></li></ul></li><li><p><code>String(变量)</code></p><ul><li>所有数据类型都可以</li></ul></li><li><p>使用加法运算</p><ul><li>在 JS 里面，<code>+</code> 由两个含义 <ul><li>字符串拼接： 只要 <code>+</code> 任意一边是字符串，就会进行字符串拼接</li><li>加法运算：只有 <code>+</code> 两边都是数字的时候，才会进行数学运算</li></ul></li></ul></li></ul><h3 id="其他数据类型转成布尔" tabindex="-1"><a class="header-anchor" href="#其他数据类型转成布尔" aria-hidden="true">#</a> 其他数据类型转成布尔</h3><ul><li><code>Boolean(变量)</code><ul><li>在 js 中，只有 <code>&#39;&#39;</code>、<code>0</code>、<code>null</code>、<code>undefined</code>、<code>NaN</code>，这些是 <code>false</code></li><li>其余都是 <code>true</code></li></ul></li></ul><h2 id="数据类型之间存储的区别" tabindex="-1"><a class="header-anchor" href="#数据类型之间存储的区别" aria-hidden="true">#</a> 数据类型之间存储的区别</h2><p>既然我们区分了基本数据类型和复杂数据类型，那么他们之间就一定会存在一些区别，他们最大的区别就是在存储上的区别</p><p>我们的存储空间分成两种：</p><ul><li><p>栈： 主要存储基本数据类型的内容</p></li><li><p>堆： 主要存储复杂数据类型的内容</p></li></ul><h3 id="基本数据类型在内存中的存储情况" tabindex="-1"><a class="header-anchor" href="#基本数据类型在内存中的存储情况" aria-hidden="true">#</a> 基本数据类型在内存中的存储情况</h3><p><code>var num = 100</code>，在内存中的存储情况，直接在 <strong>栈空间</strong> 内有存储一个数据</p><h3 id="复杂数据类型在内存中的存储情况" tabindex="-1"><a class="header-anchor" href="#复杂数据类型在内存中的存储情况" aria-hidden="true">#</a> 复杂数据类型在内存中的存储情况</h3><p>复杂数据类型的存储</p><ol><li><p>在堆里面开辟一个存储空间</p></li><li><p>把数据存储到存储空间内</p></li><li><p>把存储空间的地址赋值给栈里面的变量</p></li></ol><h2 id="数据类型之间比较的区别" tabindex="-1"><a class="header-anchor" href="#数据类型之间比较的区别" aria-hidden="true">#</a> 数据类型之间比较的区别</h2><p>基本数据类型是 <strong>值</strong> 之间的比较</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span>  
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>  

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">==</span> str<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂数据类型是 <strong>地址</strong> 之间的比较</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span> <span class="token punctuation">}</span>  
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span> <span class="token punctuation">}</span>  

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> obj2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们创建了两个对象，那么就会在 堆空间 里面开辟两个存储空间存储数据（两个地址），虽然存储的内容是一样的，那么也是两个存储空间，两个地址，复杂数据类型之间就是地址的比较，所以 <code>obj</code> 和 <code>obj2</code> 两个变量的地址不一样，所以我们得到的就是 <code>false</code></p>`,34),o=[i];function c(p,d){return n(),e("div",null,o)}const u=a(l,[["render",c],["__file","06-JavaScript基础-数据类型.html.vue"]]);export{u as default};
