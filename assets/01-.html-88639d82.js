import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-2a98f5a5.js";const t={},p=e(`<h2 id="_1-nodejs入门" tabindex="-1"><a class="header-anchor" href="#_1-nodejs入门" aria-hidden="true">#</a> 1. NodeJs入门</h2><h3 id="_1-1-什么是nodejs" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是nodejs" aria-hidden="true">#</a> 1.1 什么是NodeJS</h3><ol><li>Node.js 是一个独立的 JavaScript 运行环境，能独立执行 JS 代码，因为这个特点，它可以用来编写服务器后端的应用程序</li><li>Node.js 作用除了编写后端应用程序，也可以对前端代码进行压缩，转译，整合等等，提高前端开发和运行效率</li><li>Node.js 基于Chrome V8 引擎封装，独立执行 JS 代码，但是语法和浏览器环境的 V8 有所不同，没有 document 和 window 但是都支持 ECMAScript 标准的代码语法</li><li>Node.js 没有图形化界面，需要使用 cmd 终端命令行（利用一些命令来操控电脑执行某些程序软件）输入<code>node -v</code> 检查是否安装成功</li><li>Node.js 执行目标 JS 文件，需要使用<code>node xxx.js</code>命令来执行</li></ol><h3 id="_1-2-fs模块-读写文件" tabindex="-1"><a class="header-anchor" href="#_1-2-fs模块-读写文件" aria-hidden="true">#</a> 1.2 fs模块-读写文件</h3><p>模块：类似插件，封装了方法和属性供我们使用</p><p>fs 模块：封装了与本机文件系统进行交互的方法和属性</p><p>fs 模块使用语法如下：</p><ul><li><p>加载 fs 模块，得到 fs 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>写入文件内容语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;文件路径&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;写入内容&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 写入后的回调函数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读取文件内容的语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;文件路径&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取后的回调函数</span>
  <span class="token comment">// data 是文件内容的 Buffer 数据流</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-3-path模块-路径处理" tabindex="-1"><a class="header-anchor" href="#_1-3-path模块-路径处理" aria-hidden="true">#</a> 1.3 path模块-路径处理</h3><p>为什么在 Node.js 待执行的 JS 代码中要用绝对路径：Node.js 执行 JS 代码时，代码中的路径都是以终端所在文件夹出发查找相对路径，而不是以我们认为的从代码本身出发，会遇到问题，所以在 Node.js 要执行的代码中，访问其他文件，建议使用绝对路径</p><p>使用模块内置变量 <code>__dirname</code>配合 <code>path.join()</code> 来得到绝对路径</p><p><code>__dirname</code> 模块内置变量的值是动态获取当前文件所在文件夹的绝对路径</p><p>例：压缩前端html</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：压缩 html 里代码
 * 需求：把 public/index.html 里的，回车/换行符去掉，写入到 dist/index.html 中
 *  1.1 读取 public/index.html 内容
 *  1.2 使用正则替换内容字符串里的，回车符\\r 换行符\\n
 *  1.3 确认后，写入到 dist/index.html 内
 */</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 1.1 读取 public/index.html 内容</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> htmlStr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 1.2 使用正则替换内容字符串里的，回车符\\r 换行符\\n</span>
  <span class="token keyword">const</span> resultStr <span class="token operator">=</span> htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\r\\n]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 1.3 确认后，写入到 dist/index.html 内</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resultStr<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;压缩成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-url中的端口号" tabindex="-1"><a class="header-anchor" href="#_1-4-url中的端口号" aria-hidden="true">#</a> 1.4 URL中的端口号</h3><ol><li>URL 是统一资源定位符，简称网址，用于访问网络上的资源</li><li>端口号的作用：标记服务器里对应的服务程序，值为（0-65535 之间的任意整数）</li><li>注意：http 协议，默认访问的是 80 端口</li><li>Web服务：一个程序，用于提供网上信息浏览功能</li><li>注意：0-1023 和一些特定的端口号被占用，我们自己编写服务程序请避开使用</li></ol><h3 id="_1-5-http模块-创建web服务" tabindex="-1"><a class="header-anchor" href="#_1-5-http模块-创建web服务" aria-hidden="true">#</a> 1.5 http模块-创建Web服务</h3><ol><li>引入 http 模块，创建 Web 服务对象</li><li>监听 request 请求事件，对本次请求，做一些响应处理</li><li>启动 Web 服务监听对应端口号</li><li>运行本服务在终端进程中，用浏览器发起请求</li></ol><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：基于 http 模块创建 Web 服务程序
 *  1.1 加载 http 模块，创建 Web 服务对象
 *  1.2 监听 request 请求事件，设置响应头和响应体
 *  1.3 配置端口号并启动 Web 服务
 *  1.4 浏览器请求（http://localhost:3000）测试
 */</span>
<span class="token comment">// 1.1 加载 http 模块，创建 Web 服务对象</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 1.2 监听 request 请求事件，设置响应头和响应体</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置响应头-内容类型-普通文本以及中文编码格式</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain;charset=utf-8&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 设置响应体内容，结束本次请求与响应</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;欢迎使用 Node.js 和 http 模块创建的 Web 服务&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 1.3 配置端口号并启动 Web 服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Web 服务启动成功了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-nodejs模块化" tabindex="-1"><a class="header-anchor" href="#_2-nodejs模块化" aria-hidden="true">#</a> 2. NodeJS模块化</h2><h3 id="_2-1-模块化简介" tabindex="-1"><a class="header-anchor" href="#_2-1-模块化简介" aria-hidden="true">#</a> 2.1 模块化简介</h3><p>在 Node.js 中每个文件都被当做是一个独立的模块，模块内定义的变量和函数都是独立作用域的，因为 Node.js 在执行模块代码时，将使用如下所示的函数封装器对其进行封装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span>
<span class="token comment">// 模块代码实际存在于此处</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且项目是由多个模块组成的，每个模块之间都是独立的，而且提高模块代码复用性，按需加载，独立作用域</p><p>但是因为模块内的属性和函数都是私有的，如果对外使用，需要使用标准语法导出和导入才可以，而这个标准叫 CommonJS 标准</p><p>导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> 变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;模块名或路径&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// Node.js 环境内置模块直接写模块名（例如：fs，path，http）</span>
<span class="token comment">// 自定义模块：写模块文件路径（例如：./utils.js)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量名的值接收的就是目标模块导出的对象</p></blockquote><h3 id="_2-2-ecmascript标准-默认导出和导入" tabindex="-1"><a class="header-anchor" href="#_2-2-ecmascript标准-默认导出和导入" aria-hidden="true">#</a> 2.2 ECMAScript标准-默认导出和导入</h3><p>CommonJS 规范是 Node.js 环境中默认的，后来官方推出 ECMAScript 标准语法</p><p>导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 变量名 <span class="token keyword">from</span> <span class="token string">&#39;模块名或路径&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>变量名的值接收的就是目标模块导出的对象</p></blockquote><p>注意：Node.js 默认只支持 CommonJS 标准语法，如果想要在当前项目环境下使用 ECMAScript 标准语法，请新建 <code>package.json</code> 文件设置<code>type: &#39;module&#39;</code> 来进行设置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> “type”<span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-ecmascript标准-命名导出和导入" tabindex="-1"><a class="header-anchor" href="#_2-3-ecmascript标准-命名导出和导入" aria-hidden="true">#</a> 2.3 ECMAScript标准-命名导出和导入</h3><p>命名导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> 修饰定义语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命名导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> 同名变量 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;模块名或路径&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：同名变量指的是模块内导出的变量名</p></blockquote><p>与默认导出如何选择：</p><ul><li>按需加载，使用命名导出和导入</li><li>全部加载，使用默认导出和导入</li></ul><h3 id="_2-4-包的概念" tabindex="-1"><a class="header-anchor" href="#_2-4-包的概念" aria-hidden="true">#</a> 2.4 包的概念</h3><p>包：将模块，代码，其他资料整合成一个文件夹，这个文件夹就叫包</p><p>包分类：</p><ul><li>项目包：主要用于编写项目和业务逻辑</li><li>软件包：封装工具和方法进行使用</li></ul><p>包要求：根目录中，必须有 <code>package.json</code> 文件（记录包的清单信息）</p><p><code>package.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz_utils&quot;</span><span class="token punctuation">,</span>软件包名称
<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>软件包当前版本
<span class="token string">&quot;description&quot;</span>：“一个数组和字符串常用工具方法的包”，软件包筒短描述
<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>软件包入口点
<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;itheima&quot;</span><span class="token punctuation">,</span>软件包作者
<span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span>软件包许可证(商用后可以用作者名字宣传)
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包使用：在引入一个包文件夹到代码中，默认引入的是包文件节下的 index.js 模块文件里导出的对象，如果没有 index.js 文件，则会引入 package.json 里 main 属性指定的文件模块导出的对象</p><h3 id="_2-5-npm软件包管理器" tabindex="-1"><a class="header-anchor" href="#_2-5-npm软件包管理器" aria-hidden="true">#</a> 2.5 npm软件包管理器</h3><p>npm 简介：软件包管理器，用于下载和管理 Node.js 环境中的软件包</p><p>npm 使用步骤：</p><ol><li><p>初始化清单文件： <code>npm init -y</code> （得到 package.json 文件，有则跳过此命令）</p><blockquote><p>注意 <code>-y</code> 就是所有选项用默认值，所在文件夹不要有中文/特殊符号，建议英文和数字组成，因为 npm 包名限制建议用英文和数字或者下划线中划线</p></blockquote></li><li><p>下载软件包：<code>npm i 软件包名称</code></p></li><li><p>使用软件包</p></li></ol><h3 id="_2-6-npm安装所有依赖" tabindex="-1"><a class="header-anchor" href="#_2-6-npm安装所有依赖" aria-hidden="true">#</a> 2.6 npm安装所有依赖</h3><p>如何得到需要的所有依赖软件包呢？</p><blockquote><p>直接在项目目录下，运行终端命令：npm i 即可安装 package.json 里记录的所有包和对应版本到本项目中的 node_modules</p></blockquote><h3 id="_2-7-npm全局软件包-nodemon" tabindex="-1"><a class="header-anchor" href="#_2-7-npm全局软件包-nodemon" aria-hidden="true">#</a> 2.7 npm全局软件包-nodemon</h3><p>软件包区别：</p><ul><li>本地软件包：当前项目内使用，封装属性和方法，存在于 node_modules</li><li>全局软件包：本机所有项目使用，封装命令和工具，存在于系统设置的位置</li></ul><p>nodemon 作用：替代 node 命令，检测代码更改，自动重启程序</p><p>使用：</p><ol><li>安装：npm i nodemon -g （-g 代表安装到全局环境中）</li><li>运行：nodemon 待执行的目标 js 文件</li></ol><h2 id="_3-概念和常用命令总结" tabindex="-1"><a class="header-anchor" href="#_3-概念和常用命令总结" aria-hidden="true">#</a> 3. 概念和常用命令总结</h2><p>Node.js 模块化：把每个文件当做一个模块，独立作用域，按需加载，使用特定标准语法导出和导入使用</p><p>CommonJS 标准：一般应用在 Node.js 项目环境中</p><table><thead><tr><th></th><th>导出</th><th>导入</th></tr></thead><tbody><tr><td>语法</td><td><code>module.exports={}</code></td><td><code>require(&#39;模块名或路径&#39;)</code></td></tr></tbody></table><p>ECMAScript 标准：一般应用在前端工程化项目中</p><table><thead><tr><th></th><th>导出</th><th>导入</th></tr></thead><tbody><tr><td>默认</td><td><code>export default{}</code></td><td><code>import 变量名 form &#39;模块名或路径&#39;</code></td></tr><tr><td>命名</td><td><code>export 修饰定义语句</code></td><td><code>import{同名变量} form &#39;模块名或路径&#39;</code></td></tr></tbody></table><p>Node.js 包：把模块文件，代码文件，其他资料聚合成一个文件夹就是包</p><blockquote><p>项目包：编写项目需求和业务逻辑的文件夹</p><p>软件包：封装工具和方法进行使用的文件夹（一般使用 npm 管理）</p><ul><li>本地软件包：作用在当前项目，封装的属性/方法，供项目调用编写业务需求</li><li>全局软件包：作用在所有项目，一般封装的命令/工具，支撑项目运行</li></ul></blockquote><p>常用命令：</p><p>执行 js 文件：node xxx 初始化package.json：npm init -y 下载本地软件包：npm i 软件包名 下载全局软件包：npm i 软件包名 -g 删除软件包：npm uni 软件包名</p>`,79),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","01-.html.vue"]]);export{u as default};
