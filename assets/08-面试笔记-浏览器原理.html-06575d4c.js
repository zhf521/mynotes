import{_ as e,o as i,c as a,b as l}from"./app-c33b8229.js";const r={},d=l('<h2 id="_1-浏览器的渲染过程" tabindex="-1"><a class="header-anchor" href="#_1-浏览器的渲染过程" aria-hidden="true">#</a> 1. 浏览器的渲染过程</h2><h3 id="_1-基本过程" tabindex="-1"><a class="header-anchor" href="#_1-基本过程" aria-hidden="true">#</a> 1. 基本过程</h3><ol><li><p>解析HTML的所有标签，深度遍历生成DOM树</p></li><li><p>解析CSS，构建层叠样式表模型CSSOM树</p></li><li><p>构建Render Tree（渲染树）</p><p>DOM和CSSOM根据一定的规则组合起来生成了Render Tree</p></li><li><p>布局（Layout）</p><p>确定各个元素的大小、位置。浏览器使用一种<strong>流式</strong>处理的方法，只需要<strong>一次绘制</strong>操作就可以布局所有的元素</p></li><li><p>绘制（Painting）</p><p>浏览器会遍历Render Tree渲染树，调用paint方法，将渲染树的各个节点绘制到屏幕上</p></li></ol><h3 id="_2-关于css、js阻塞问题" tabindex="-1"><a class="header-anchor" href="#_2-关于css、js阻塞问题" aria-hidden="true">#</a> 2. 关于CSS、JS阻塞问题</h3><ul><li>CSS 加载会不会阻塞 JS 的加载？（不会）</li><li>CSS 加载会不会阻塞 JS 的执行？（会）</li><li>CSS 加载会不会阻塞 DOM 的解析？（不会）</li><li>CSS 加载会不会阻塞 DOM 的渲染？（会）</li><li>JS 加载会不会阻塞 DOM 的解析？（会）</li><li>JS 加载会不会阻塞 DOM 的渲染？（会）</li><li>JS 执行会不会阻塞 DOM 的解析？（会）</li><li>JS 执行会不会阻塞 DOM 的渲染？（会）</li></ul><p>关于 css，js 的阻塞问题，都跟浏览器的渲染进程有关。而渲染进程又是多线程的</p><ul><li>JS 引擎线程（单线程）：负责解析 Javascript 脚本，运行代码</li><li>GUI 渲染线程：负责渲染浏览器界面，解析 HTML，CSS，构建 DOM Tree，CSSOM Tree 和 Render Tree，布局和绘制等</li></ul><blockquote><p>注意：GUI 渲染线程与 JS 引擎线程是互斥的，当 JS 引擎执行时 GUI 线程会被挂起，所以当 JS 加载和执行时，会阻塞住 DOM 的解析和渲染，导致白屏时间很长</p></blockquote><blockquote><p>DOM Tree 和 CSSOM Tree 是并行构建的，所以 CSS 加载不会阻塞 DOM 的解析；由于 Render Tree 是依赖于 DOM Tree 和 CSSOM Tree 的，因此，CSS 加载会阻塞 DOM 的渲染</p></blockquote><blockquote><p>GUI 渲染线程与 JS 引擎线程是互斥的，加载解析 CSS 时，JS 引擎会被挂起，所以 CSS 会阻塞 JS 的执行</p></blockquote><ol><li>如果遇到普通（sync）JavaScript脚本加载：文档解析的过程中，如果遇到JavaScript脚本，就会停止页面的解析进行下载，当脚本都执行完毕后，才会继续解析页面</li><li>如果遇到异步（async）JavaScript脚本加载：异步脚本会在HTML加载和解析完毕后执行</li><li>如果遇到设置了推迟的JavaScript脚本加载：文档解析时，遇到设置了defer的脚本，就会在后台进行下载，但是并不会阻止文档的渲染，当页面解析和渲染完毕后，会等到所有的defer脚本加载完毕并按照顺序执行完毕才会触发</li></ol><blockquote><p><strong>defer是“渲染完再执行”：<strong>依赖于页面中的DOM元素（文档是否解析完毕），或者被其他脚本文件</strong>依赖</strong></p><p>**async是“下载完就执行”：**并不关心页面中的DOM元素（文档是否解析完毕），并且也不会产生其他脚本需要的数据</p></blockquote><h2 id="_2-xss攻击" tabindex="-1"><a class="header-anchor" href="#_2-xss攻击" aria-hidden="true">#</a> 2. XSS攻击</h2><h3 id="_1-什么是xss攻击" tabindex="-1"><a class="header-anchor" href="#_1-什么是xss攻击" aria-hidden="true">#</a> 1. 什么是XSS攻击</h3><p>XSS 攻击指的是<mark>跨站脚本攻击</mark>，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等</p><p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行</p><h3 id="_2-攻击类型" tabindex="-1"><a class="header-anchor" href="#_2-攻击类型" aria-hidden="true">#</a> 2. 攻击类型</h3><p>XSS 可以分为存储型、反射型和 DOM 型：</p><ul><li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行 <ul><li>常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等</li></ul></li><li>反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成 XSS 攻击 <ul><li>常见于通过 URL 传递参数的功能，如网站搜索、跳转等</li></ul></li><li>DOM 型指的通过修改页面的 DOM 节点形成的 XSS <ul><li>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端JavaScript自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</li></ul></li></ul><h3 id="_3-防御xss攻击" tabindex="-1"><a class="header-anchor" href="#_3-防御xss攻击" aria-hidden="true">#</a> 3. 防御XSS攻击</h3><ol><li>使用HTTP Only Cookie：将敏感信息存储在HTTP Only Cookie中，这样浏览器脚本无法访问或修改这些Cookie。这可以有效防止XSS攻击者窃取用户的身份验证信息</li><li>Content Security Policy（CSP）：通过CSP设置一系列策略（即白名单），限制页面中可以执行的内容来源，包括脚本、样式和其他资源</li><li>输入验证：要对用户输入的数据进行验证和过滤，确保只接受预期格式和合法字符。使用服务器端验证来拒绝恶意脚本或特殊字符</li><li>输出转义：对需要插入到HTML中的代码进行转义</li></ol><h2 id="_3-csrf攻击" tabindex="-1"><a class="header-anchor" href="#_3-csrf攻击" aria-hidden="true">#</a> 3. CSRF攻击</h2><h3 id="_1-什么是csrf攻击" tabindex="-1"><a class="header-anchor" href="#_1-什么是csrf攻击" aria-hidden="true">#</a> 1. 什么是CSRF攻击</h3><p>CSRF 攻击指的是<mark>跨站请求伪造攻击</mark>，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作</p><p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充</p><p>必要条件：</p><ol><li>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code>。（如果用户没有登录网站<code>A</code>，那么网站<code>B</code>在诱导的时候，请求网站<code>A</code>的<code>api</code>接口时，会提示你登录）</li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code>（其实是利用了网站<code>A</code>的漏洞）</li></ol><h3 id="_2-攻击类型-1" tabindex="-1"><a class="header-anchor" href="#_2-攻击类型-1" aria-hidden="true">#</a> 2. 攻击类型</h3><p>常见的 CSRF 攻击有三种：</p><ul><li>GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交</li><li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单</li><li>链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击</li></ul><h3 id="_3-防御csrf攻击" tabindex="-1"><a class="header-anchor" href="#_3-防御csrf攻击" aria-hidden="true">#</a> 3. 防御CSRF攻击</h3><ol><li>token验证</li><li>进行同源检测，根据HTTP请求头中的referer信息验证</li><li>对cookie进行双重验证</li><li>在设置cookie时设置samesite，限制cookie不可能作为第三方cookie使用</li></ol><h2 id="_4-中间人攻击" tabindex="-1"><a class="header-anchor" href="#_4-中间人攻击" aria-hidden="true">#</a> 4. 中间人攻击</h2><h3 id="_1-什么是中间人攻击" tabindex="-1"><a class="header-anchor" href="#_1-什么是中间人攻击" aria-hidden="true">#</a> 1. 什么是中间人攻击</h3><p>中间人攻击 (Man-in-the-middle attack, MITM) 是指攻击者与通讯的两端分别创建独立的联系, 并交换其所收到的数据, 使通讯的两端认为他们正在通过一个私密的连接与对方直接对话, 但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容</p><h3 id="_2-如何防范" tabindex="-1"><a class="header-anchor" href="#_2-如何防范" aria-hidden="true">#</a> 2. 如何防范</h3><ul><li>使用安全信道</li><li>使用加密通信</li></ul><h2 id="_5-可能引起前端安全问题的情况" tabindex="-1"><a class="header-anchor" href="#_5-可能引起前端安全问题的情况" aria-hidden="true">#</a> 5. 可能引起前端安全问题的情况</h2><ul><li>跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注入方式, 为了与 CSS 区分所以被称作 XSS。早期常见于网络论坛, 起因是网站没有对用户的输入进行严格的限制, 使得攻击者可以将脚本上传到帖子让其他人浏览到有恶意脚本的页面, 其注入方式很简单包括但不限于 JavaScript / CSS / Flash 等</li><li>iframe的滥用: iframe中的内容是由第三方来提供的，默认情况下他们不受控制，他们可以在iframe中运行JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端用户体验</li><li>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）: 指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击</li><li>恶意第三方库: 无论是后端服务器应用还是前端应用开发，绝大多数时候都是在借助开发框架和各种类库进行快速开发，一旦第三方库被植入恶意代码很容易引起安全问题</li></ul>',39),o=[d];function S(c,h){return i(),a("div",null,o)}const t=e(r,[["render",S],["__file","08-面试笔记-浏览器原理.html.vue"]]);export{t as default};
