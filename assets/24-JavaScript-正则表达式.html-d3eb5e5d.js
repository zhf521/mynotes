import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-1a6d4ced.js";const p={},e=t(`<p><strong>正则表达式</strong>（Regular Expression）是一种字符串匹配的模式（规则）</p><p>使用场景：</p><ul><li>通常用来提取、匹配、替换那些符合正则表达式的文本 <ul><li>例如验证表单：手机号表单要求用户只能输入11位的数字 (匹配)</li><li>过滤掉页面内容中的一些敏感词 (替换)</li><li>从字符串中获取我们想要的特定部分 (提取)</li></ul></li></ul><h2 id="_1-正则基本使用" tabindex="-1"><a class="header-anchor" href="#_1-正则基本使用" aria-hidden="true">#</a> 1. 正则基本使用</h2><h3 id="_1-1-定义规则" tabindex="-1"><a class="header-anchor" href="#_1-1-定义规则" aria-hidden="true">#</a> 1.1 定义规则</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>var 变量名 =  /表达式/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>其中 <code>/ /</code> 是正则表达式字面量</li><li>正则表达式也是<code>对象 </code></li></ul><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">前端</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-判断是否有符合规则的字符串" tabindex="-1"><a class="header-anchor" href="#_1-2-判断是否有符合规则的字符串" aria-hidden="true">#</a> 1.2 判断是否有符合规则的字符串</h3><p><code>test()</code> 方法用来查看正则表达式与指定的字符串是否匹配</p><p>如果正则表达式与指定的字符串匹配，返回 <code>true</code>，否则返回 <code>false</code></p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>正则表达式对象<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>被检测的字符串<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 正则表达式的基本使用</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;web前端开发&#39;</span>
    <span class="token comment">// 1. 定义规则</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">web</span><span class="token regex-delimiter">/</span></span>
    <span class="token comment">// 2. 使用正则  test()</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true  如果符合规则匹配上则返回true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;java开发&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  如果不符合规则匹配上则返回 false</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-检索-查找-符合规则的字符串" tabindex="-1"><a class="header-anchor" href="#_1-3-检索-查找-符合规则的字符串" aria-hidden="true">#</a> 1.3 检索(查找)符合规则的字符串</h3><p><code>exec()</code> 方法用于在一个指定字符串中执行一个搜索匹配</p><p>如果匹配成功，<code>exec()</code> 方法返回一个数组，否则返回 <code>null</code></p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>正则表达式对象<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>被检测的字符串<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-替换符合规则的字符串" tabindex="-1"><a class="header-anchor" href="#_1-4-替换符合规则的字符串" aria-hidden="true">#</a> 1.4 替换符合规则的字符串</h3><p><code>replace()</code> 方法用于替换字符串</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>字符串<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">正则表达式</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;替换的文本&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符" aria-hidden="true">#</a> 2. 元字符</h2><ul><li>普通字符: <ul><li>大多数的字符仅能够描述它们本身，这些字符称作普通字符，例如所有的字母和数字</li><li>普通字符只能够匹配字符串中与它们相同的字符</li><li>比如，规定用户只能输入英文26个英文字母，普通字符的话 <code>/[abcdefghijklmnopqrstuvwxyz]/</code></li></ul></li><li>元字符 (特殊字符） <ul><li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能</li><li>比如，规定用户只能输入英文26个英文字母，换成元字符写法：<code>/[a-z]/</code></li></ul></li></ul><h3 id="_2-1-边界符" tabindex="-1"><a class="header-anchor" href="#_2-1-边界符" aria-hidden="true">#</a> 2.1 边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td><code>$</code></td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 <code>^</code> 和 <code>$</code> 在一起，表示必须是精确匹配</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之边界符</span>
    <span class="token comment">// 1. 匹配开头的位置 ^</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^web</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 2. 匹配结束的位置 $</span>
    <span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">web$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  </span>

    <span class="token comment">// 3. 精确匹配 ^ $</span>
    <span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^web$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web前端&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;前端web学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;webweb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase </span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-量词" tabindex="-1"><a class="header-anchor" href="#_2-2-量词" aria-hidden="true">#</a> 2.2 量词</h3><p>量词用来设定某个模式重复次数</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复零次或更多次</td></tr><tr><td><code>+</code></td><td>重复一次或更多次</td></tr><tr><td><code>?</code></td><td>重复零次或一次</td></tr><tr><td><code>{n}</code></td><td>重复 n 次</td></tr><tr><td><code>{n,}</code></td><td>重复 n 次或更多次</td></tr><tr><td><code>{n,m}</code></td><td>重复 n 到 m 次</td></tr></tbody></table><p><mark>注意： 逗号左右两侧千万不要出现空格</mark></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之量词</span>
    <span class="token comment">// 1. * 重复次数 &gt;= 0 次</span>
    <span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w*$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 2. + 重复次数 &gt;= 1 次</span>
    <span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w+$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 3. ? 重复次数  0 || 1 </span>
    <span class="token keyword">var</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w?$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>


    <span class="token comment">// 4. {n} 重复 n 次</span>
    <span class="token keyword">var</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{3}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 5. {n,} 重复次数 &gt;= n </span>
    <span class="token keyword">var</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{2,}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------------&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 6. {n,m}   n =&lt; 重复次数 &lt;= m</span>
    <span class="token keyword">var</span> reg6 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^w{2,4}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;www&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg6<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;wwwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-字符集合" tabindex="-1"><a class="header-anchor" href="#_2-3-字符集合" aria-hidden="true">#</a> 2.3 字符集合</h3><ul><li><code>[abc]</code> 匹配包含的单个字符，也就是只有 a 或 b 或 c 这三个单字符则返回 true，可以理解为多选一</li><li><code>[a-z]</code> <code>-</code> 是连字符，用来指定字符范围，<code>[a-z]</code> 表示匹配 a 到 z 这26 个英文字母</li><li><code>[^abc]</code> <code>^</code> 是取反符，<code>[^abc]</code> 表示匹配除了小写字母以外的字符</li><li><code>[a-zA-Z]</code> 表示匹配大小写字母</li><li><code>[0-9]</code> 表示匹配 0~9 的数字</li><li><code>.</code> 表示匹配除换行符之外的任何单个字符</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 元字符之范围  []  </span>
    <span class="token comment">// 1. [abc] 匹配包含的单个字符， 多选1</span>
    <span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abc]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>

    <span class="token comment">// 2. [a-z] 连字符 单个</span>
    <span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
    <span class="token comment">// 想要包含小写字母，大写字母 ，数字</span>
    <span class="token keyword">var</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// flase</span>

    <span class="token comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span>
    <span class="token keyword">var</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z0-9_]{6,16}$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abcd1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abcd12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ABcd12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ABcd12_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

    <span class="token comment">// 3. [^a-z] 取反符</span>
    <span class="token keyword">var</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^a-z]$</span><span class="token regex-delimiter">/</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-常见模式的简写" tabindex="-1"><a class="header-anchor" href="#_2-4-常见模式的简写" aria-hidden="true">#</a> 2.4 常见模式的简写</h3><p>某些常见模式的简写方式，区分字母和数字</p><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td><code>\\d</code></td><td>匹配 0~9 之间的任一数字，相当于 <code>[0-9]</code></td></tr><tr><td><code>\\D</code></td><td>匹配一个非数字字符，相当于 <code>[^0-9]</code></td></tr><tr><td><code>\\w</code></td><td>匹配任意的字母、数字和下划线，相当于 <code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\\W</code></td><td>匹配除所有字母、数字和下划线以外的字符，相当于 <code>[^A-Za-z0-9_]</code></td></tr><tr><td><code>\\s</code></td><td>匹配空格（包括换行符、制表符、空格符等），相当于 <code>[\\t\\r\\n\\v\\f]</code></td></tr><tr><td><code>\\S</code></td><td>匹配非空格的字符，相当于 <code>[^\\t\\r\\n\\v\\f]</code></td></tr></tbody></table><p>如：日期格式：<code>^\\d{4}-\\d{1,2}-\\d{1,2}</code></p><h2 id="_3-修饰符" tabindex="-1"><a class="header-anchor" href="#_3-修饰符" aria-hidden="true">#</a> 3. 修饰符</h2><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">/</span>表达式<span class="token operator">/</span>修饰符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 修饰符</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#39;</span>
    <span class="token comment">// 1. 替换  replace  需求：把前端替换为 web</span>
    <span class="token comment">// 1.1 replace 返回值是替换完毕的字符串</span>
    <span class="token comment">// var strEnd = str.replace(/前端/, &#39;web&#39;) 只能替换一个</span>

    <span class="token comment">// 2. 修饰符 g 全部替换</span>
    <span class="token keyword">var</span> strEnd <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">前端</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strEnd<span class="token punctuation">)</span> 
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","24-JavaScript-正则表达式.html.vue"]]);export{r as default};
