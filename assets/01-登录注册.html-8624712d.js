import{_ as l,o as i,c as o,b as s}from"./app-95460e9f.js";const t={},n=s('<h2 id="_1-登录的流程" tabindex="-1"><a class="header-anchor" href="#_1-登录的流程" aria-hidden="true">#</a> 1. 登录的流程</h2><ul><li><p>使用JWT实现：</p><ol><li><p><strong>用户登录</strong>：</p><ul><li>用户在前端输入用户名和密码，并将其发送到后端进行验证。</li><li>后端验证用户的凭据，并生成一个包含用户信息的 JWT。</li></ul></li><li><p><strong>JWT生成</strong>：</p><ul><li>后端使用密钥对用户信息进行签名，生成一个 JWT。</li><li>JWT 包含了用户的一些信息以及用于验证的签名信息，通常会包含用户身份、权限等信息。</li></ul></li><li><p><strong>JWT返回</strong>：</p><ul><li>后端将生成的 JWT 发送回前端应用程序。</li></ul></li><li><p><strong>前端存储</strong>：</p><ul><li>前端应用程序接收到 JWT 后，将其存储在本地，通常是在浏览器的本地存储（如 Local Storage 或 Session Storage）中。</li></ul></li><li><p><strong>后续请求</strong>：</p><ul><li>用户在前端应用程序执行其他操作时，前端会将 JWT 添加到每个请求的 Authorization 头中。</li><li>后端服务器在收到请求后，会验证 JWT 的有效性，从而验证用户的身份和权限。</li></ul></li></ol></li><li><p>使用session实现：</p><ol><li><p><strong>用户登录</strong>：</p><ul><li>用户在前端输入用户名和密码，并将其发送到后端进行验证。</li><li>后端验证用户的凭据，并创建一个会话来存储用户的身份信息。</li></ul></li><li><p><strong>会话创建</strong>：</p><ul><li>后端创建一个唯一的会话标识符（session ID），并将用户身份信息与该会话关联起来。</li><li>会话可以在服务器端存储，通常会保存在内存、数据库或者缓存中。</li></ul></li><li><p><strong>会话标识返回</strong>：</p><ul><li>后端将生成的会话标识符发送回前端应用程序，通常通过设置一个名为 <code>sessionID</code> 的 HTTP Cookie。</li></ul></li><li><p><strong>后续请求</strong>：</p><ul><li>用户在前端应用程序执行其他操作时，浏览器会自动将包含会话标识符的 Cookie 添加到每个请求的头部中。</li></ul></li><li><p><strong>会话验证</strong>：</p><ul><li>后端在收到请求时，会根据会话标识符找到对应的会话，并验证用户的身份信息以及权限。</li></ul></li></ol></li><li><p>使用OAuth实现：</p><ol><li><p><strong>用户登录</strong>：</p><ul><li>用户在前端输入用户名和密码，并将其发送到后端进行验证。</li></ul></li><li><p><strong>OAuth认证请求</strong>：</p><ul><li>后端服务器向认证服务器发起 OAuth 认证请求，包括包含客户端标识和重定向URI的认证请求。</li></ul></li><li><p><strong>用户授权</strong>：</p><ul><li>认证服务器要求用户进行身份验证，然后询问用户是否授权客户端应用程序访问其受保护的资源。</li><li>如果用户同意，认证服务器将发回一个授权码（authorization code）。</li></ul></li><li><p><strong>授权码交换令牌</strong>：</p><ul><li>后端服务器使用授权码向认证服务器请求访问令牌（access token）。</li><li>认证服务器验证授权码，并发回访问令牌和可能的刷新令牌。</li></ul></li><li><p><strong>访问令牌返回</strong>：</p><ul><li>后端服务器将访问令牌发送回前端应用程序。</li></ul></li><li><p><strong>后续请求</strong>：</p><ul><li>用户在前端应用程序执行其他操作时，前端应用程序将访问令牌添加到每个请求的 Authorization 头中。</li><li>后端服务器验证访问令牌，以确保用户被授权执行请求的操作。</li></ul></li></ol></li></ul><h3 id="_2-注册的流程" tabindex="-1"><a class="header-anchor" href="#_2-注册的流程" aria-hidden="true">#</a> 2. 注册的流程</h3><ul><li><p>使用JWT实现：</p><ol><li><p><strong>前端注册页面</strong>：</p><ul><li>前端提供用户注册表单，用户输入注册所需的信息，如用户名、密码、邮箱等。</li></ul></li><li><p><strong>前端验证</strong>：</p><ul><li>前端应用程序对用户输入的信息进行验证，确保格式正确并满足要求。</li></ul></li><li><p><strong>发送注册请求</strong>：</p><ul><li>用户填写完注册信息后，前端应用程序将注册信息发送到后端进行处理。</li></ul></li><li><p><strong>后端处理注册请求</strong>：</p><ul><li>后端服务器接收到注册请求后，验证用户提供的信息的有效性，如检查用户名是否已存在。</li></ul></li><li><p><strong>用户信息存储和JWT生成</strong>：</p><ul><li>如果提供的信息有效，后端服务器将用户信息存储到数据库中，并生成一个包含用户信息的 JWT。</li><li>JWT 包含了用户的一些信息以及用于验证的签名信息，通常会包含用户身份、权限等信息。</li></ul></li><li><p><strong>JWT返回</strong>：</p><ul><li>后端向前端发送包含生成的 JWT 的响应，通知用户注册成功。</li></ul></li></ol></li><li><p>使用session实现：</p><ol><li><p><strong>前端注册页面</strong>：</p><ul><li>前端提供用户注册表单，用户输入注册所需的信息，如用户名、密码、邮箱等。</li></ul></li><li><p><strong>前端验证</strong>：</p><ul><li>前端应用程序对用户输入的信息进行验证，确保格式正确并满足要求。</li></ul></li><li><p><strong>发送注册请求</strong>：</p><ul><li>用户填写完注册信息后，前端应用程序将注册信息发送到后端进行处理。</li></ul></li><li><p><strong>后端处理注册请求</strong>：</p><ul><li>后端服务器接收到注册请求后，验证用户提供的信息的有效性，如检查用户名是否已存在。</li></ul></li><li><p><strong>用户信息存储和会话创建</strong>：</p><ul><li>如果提供的信息有效，后端服务器将用户信息存储到数据库中，并创建一个会话来存储用户的身份信息。</li><li>后端服务器创建一个唯一的会话标识符（session ID），并将用户身份信息与该会话关联起来。</li></ul></li><li><p><strong>会话标识返回</strong>：</p><ul><li>后端将生成的会话标识符发送回前端应用程序，通常通过设置一个名为 <code>sessionID</code> 的 HTTP Cookie。</li></ul></li><li><p><strong>注册成功反馈</strong>：</p><ul><li>后端向前端发送注册成功的响应，通知用户注册成功。</li></ul></li></ol></li></ul><h3 id="_3-nest实现注册功能" tabindex="-1"><a class="header-anchor" href="#_3-nest实现注册功能" aria-hidden="true">#</a> 3. Nest实现注册功能</h3>',5),r=[n];function u(p,e){return i(),o("div",null,r)}const a=l(t,[["render",u],["__file","01-登录注册.html.vue"]]);export{a as default};
