import{_ as n,o as s,c as a,b as t}from"./app-326d8c13.js";const p={},e=t(`<blockquote><p>fs 全称为 <code>file system</code> ，称之为 <code>文件系统</code> ，是 Node.js 中的 <code>内置模块</code> ，可以对计算机中的磁盘进行操作</p></blockquote><h2 id="_1-文件写入" tabindex="-1"><a class="header-anchor" href="#_1-文件写入" aria-hidden="true">#</a> 1. 文件写入</h2><blockquote><p>文件写入就是将数据保存到文件中，我们可以使用如下几个方法来实现该效果</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile</td><td>异步写入</td></tr><tr><td>writeFileSync</td><td>同步写入</td></tr><tr><td>appendFile / appendFileSync</td><td>追加写入</td></tr><tr><td>createWriteStream</td><td>流式写入</td></tr></tbody></table><h3 id="_1-1-异步写入" tabindex="-1"><a class="header-anchor" href="#_1-1-异步写入" aria-hidden="true">#</a> 1.1 异步写入</h3><p><strong>语法</strong>： <code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>file 文件名</p></li><li><p>data 待写入的数据</p></li><li><p>options 选项设置 <code>（可选）</code></p></li><li><p>callback 写入回调</p></li></ul><p><strong>返回值</strong>： <code>undefined</code></p><p><strong>代码示例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// require 是 Node.js 环境中的 &#39;全局&#39; 变量，用来导入模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 将 [三人行，必有我师焉。] 写入到当前文件夹下的 [座右铭.txt] 文件中</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三人行，必有我师焉。&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 如果写入失败，则回调函数调用时，会传入错误对象，如写入成功，会传入 null</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入成功&#39;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-同步写入" tabindex="-1"><a class="header-anchor" href="#_1-2-同步写入" aria-hidden="true">#</a> 1.2 同步写入</h3><p><strong>语法:</strong> <code>fs.writeFileSync(file, data[, options])</code></p><p>参数与 <code>fs.writeFile</code> 大体一致，只是没有 callback 参数</p><p><strong>返回值：</strong><code>undefined</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三人行，必有我师焉。&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Node.js 中的磁盘操作是由其他 <code>线程</code> 完成的，结果的处理有两种模式:</p><ul><li>同步处理 JavaScript 主线程 <code>会等待</code> 其线程的执行结果，然后再继续执行主线程的代码，<code>效率较低</code></li><li>异步处理 JavaScript 主线程 <code>不会等待</code> 其线程的执行结果，直接执行后续的主线程代码，<code>效率较好</code></li></ul></blockquote><h3 id="_1-3-追加写入" tabindex="-1"><a class="header-anchor" href="#_1-3-追加写入" aria-hidden="true">#</a> 1.3 追加写入</h3><blockquote><p><code>appendFile</code> 作用是在文件尾部追加内容，<code>appendFile</code> 语法与 <code>writeFile</code> 语法完全相同</p></blockquote><p><strong>语法</strong>:</p><p><code>fs.appendFile(file, data[, options], callback)</code></p><p><code>fs.appendFileSync(file, data[, options])</code></p><p><strong>返回值</strong>：二者都为 <code>undefined</code></p><p>实例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;则其善者而从之，其不善者而改之。&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;\\r\\n温故而知新，可以为师矣&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用writeFile也可以实现追加写入，通过设置配置项参数为 <code>{ flag: &#39;a&#39; }</code>，实现对文件的追加写入</p><h3 id="_1-4-流式写入" tabindex="-1"><a class="header-anchor" href="#_1-4-流式写入" aria-hidden="true">#</a> 1.4 流式写入</h3><p><strong>语法</strong>：<code>fs.createWriteStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p><code>path</code> 文件路径</p></li><li><p><code>options</code> 选项配置（ <code>可选</code> ）</p></li></ul><p>**返回值: **<code>Object</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//写入数据到流</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;半亩方塘一鉴开\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;天光云影共徘徊\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;问渠那得清如许\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;为有源头活水来\\r\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//关闭写入流，表明已没有数据要被写入可写流</span>
ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//或者是ws.close()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数</p><p>流式写入方式适用于大文件写入或者频繁写入的场景，<code>writeFile</code>适合于写入频率较低的场景</p></blockquote><h3 id="_1-5-写入文件的场景" tabindex="-1"><a class="header-anchor" href="#_1-5-写入文件的场景" aria-hidden="true">#</a> 1.5 写入文件的场景</h3><p><code>文件写入</code> 在计算机中是一个非常常见的操作，下面的场景都用到了文件写入</p><ul><li><p>下载文件</p></li><li><p>安装软件</p></li><li><p>保存程序日志，如 Git</p></li><li><p>编辑器保存文件</p></li><li><p>视频录制</p></li></ul><blockquote><p>当需要持久化保存数据的时候，应该想到 <code>文件写入</code></p></blockquote><h2 id="_2-文件读取" tabindex="-1"><a class="header-anchor" href="#_2-文件读取" aria-hidden="true">#</a> 2. 文件读取</h2><blockquote><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile</td><td>异步读取</td></tr><tr><td>readFileSync</td><td>同步读取</td></tr><tr><td>createReadStream</td><td>流式读取</td></tr></tbody></table><h3 id="_2-1-异步读取" tabindex="-1"><a class="header-anchor" href="#_2-1-异步读取" aria-hidden="true">#</a> 2.1 异步读取</h3><p><strong>语法</strong>: <code>fs.readFile(path[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置</p></li><li><p>callback 回调函数</p></li></ul><p><strong>返回值：</strong> <code>undefined</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 fs 模块</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uft-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-同步读取" tabindex="-1"><a class="header-anchor" href="#_2-2-同步读取" aria-hidden="true">#</a> 2.2 同步读取</h3><p><strong>语法：</strong><code>fs.readFileSync(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置</p></li></ul><p><strong>返回值：</strong><code>string | Buffer</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-流式读取" tabindex="-1"><a class="header-anchor" href="#_2-3-流式读取" aria-hidden="true">#</a> 2.3 流式读取</h3><p><strong>语法：</strong><code>fs.createReadStream(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li></ul><p><strong>返回值：</strong><code>Object</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建读取流对象</span>
<span class="token keyword">let</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 每次取出 64k 数据后执行一次 data 回调</span>
<span class="token comment">// 绑定一个 data 事件  chunk 块儿  大块儿</span>
re<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//65536字节=&gt;64kb</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 读取完毕后，执行 end 回调 (可选事件)</span>
re<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取完毕&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-读取文件应用场景" tabindex="-1"><a class="header-anchor" href="#_2-4-读取文件应用场景" aria-hidden="true">#</a> 2.4 读取文件应用场景</h3><ul><li><p>电脑开机</p></li><li><p>程序运行</p></li><li><p>编辑器打开文件</p></li><li><p>查看图片</p></li><li><p>播放视频</p></li><li><p>播放音乐</p></li><li><p>Git 查看日志</p></li><li><p>上传文件</p></li><li><p>查看聊天记录</p></li></ul><h2 id="_3-文件移动与重命名" tabindex="-1"><a class="header-anchor" href="#_3-文件移动与重命名" aria-hidden="true">#</a> 3. 文件移动与重命名</h2><blockquote><p>在 Node.js 中，我们可以使用 <code>rename</code> 或 <code>renameSync</code> 来移动或重命名 <code>文件或文件夹</code></p></blockquote><p><strong>语法：</strong></p><p><code>fs.rename(oldPath, newPath, callback)</code></p><p><code>fs.renameSync(oldPath, newPath)</code></p><p><strong>参数说明：</strong></p><ul><li><p>oldPath 文件当前的路径</p></li><li><p>newPath 文件新的路径</p></li><li><p>callback 操作后的回调</p></li></ul><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./论语/观书有感.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;移动完成&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./论语/.我的座右铭.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注</strong>: 如果还是移动到当前路径，但是修改了名字，就是重命名了</p><h2 id="_4-文件删除" tabindex="-1"><a class="header-anchor" href="#_4-文件删除" aria-hidden="true">#</a> 4. 文件删除</h2><blockquote><p>在 Node.js 中，我们可以使用 <code>unlink</code> 或 <code>unlinkSync</code> 来删除文件</p></blockquote><p><strong>语法:</strong></p><p><code>fs.unlink(path, callback)</code></p><p><code>fs.unlinkSync(path)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件路径</p></li><li><p>callback 操作后的回调</p></li></ul><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span><span class="token string">&#39;./test2.txt&#39;</span><span class="token punctuation">)</span>


<span class="token comment">// 调用 rm 方法  14.4版本引入的方法   同步 rmSync</span>
fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./论语.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除失败&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>

  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-文件夹操作" tabindex="-1"><a class="header-anchor" href="#_5-文件夹操作" aria-hidden="true">#</a> 5. 文件夹操作</h2><blockquote><p>借助 Node.js 的能力，我们可以对文件夹进行 <code>创建</code> 、<code>读取</code> 、<code>删除</code> 等操作</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h3 id="_5-1-创建文件夹" tabindex="-1"><a class="header-anchor" href="#_5-1-创建文件夹" aria-hidden="true">#</a> 5.1 创建文件夹</h3><blockquote><p>在 Node.js 中，我们可以使用 <code>mkdir</code> 或 <code>mkdirSync</code> 来创建文件夹</p></blockquote><p><strong>语法</strong>:</p><p><code>fs.mkdir(path[, options], callback)</code></p><p><code>fs.mkdirSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步创建文件夹  mk  make  制作   dir  directory  文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./page&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 递归异步创建</span>
fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./1/2/3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;递归创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 递归同步创建文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./x/y/z&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-读取文件夹" tabindex="-1"><a class="header-anchor" href="#_5-2-读取文件夹" aria-hidden="true">#</a> 5.2 读取文件夹</h3><blockquote><p>在 Node.js 中，我们可以使用 <code>readdir</code> 或 <code>readdirSync</code> 来读取文件夹</p></blockquote><p><strong>语法：</strong></p><p><code>fs.readdir(path[, options], callback)</code></p><p><code>fs.readdirSync(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步读取</span>
fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;./论语&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 同步读取 </span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./论语&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-删除文件夹" tabindex="-1"><a class="header-anchor" href="#_5-3-删除文件夹" aria-hidden="true">#</a> 5.3 删除文件夹</h3><blockquote><p>在 Node.js 中，我们可以使用 <code>rmdir</code> 或 <code>rmdirSync</code> 来删除文件夹</p></blockquote><p><strong>语法</strong>：</p><p><code>fs.rmdir(path[, options], callback)</code></p><p><code>fs.redirSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ 可选 ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步删除文件夹  rm  remove 移除</span>
fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;./page&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//异步递归删除文件夹  不推荐</span>
<span class="token comment">//=&gt;DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;递归删除&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//同步递归删除文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 建议使用</span>
fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-查看资源状态" tabindex="-1"><a class="header-anchor" href="#_6-查看资源状态" aria-hidden="true">#</a> 6. 查看资源状态</h2><blockquote><p>在 Node.js 中，我们可以使用 <code>stat</code> 或 <code>statSync</code> 来查看资源的详细信息</p></blockquote><p><strong>语法</strong>：</p><p><code>fs.stat(path[, options], callback)</code></p><p><code>fs.statSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ 可选 ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 异步获取状态</span>
<span class="token comment">// stat  方法  status 缩写 状态</span>
fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;/data.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 同步获取状态</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token string">&#39;./data.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果值对象结构</strong>：</p><ul><li><p>size 文件体积</p></li><li><p>birthtime 创建时间</p></li><li><p>mtime 最后修改时间</p></li><li><p>isFile 检测是否为文件</p></li><li><p>isDirectory 检测是否为文件夹</p></li><li><p>....</p></li></ul><h2 id="_7-fs路径" tabindex="-1"><a class="header-anchor" href="#_7-fs路径" aria-hidden="true">#</a> 7. fs路径</h2><p>fs 模块对资源进行操作时，路径的写法有两种：</p><ul><li><p>相对路径</p><ul><li><code>./座右铭.txt</code> 当前目录下的 <code>座右铭.txt</code></li><li><code>座右铭.txt</code> 等效于上面的写法</li><li><code>../座右铭.txt</code> 当前目录的上一级目录中的 <code>座右铭.txt</code></li></ul></li><li><p>绝对路径</p><ul><li><code>D:/Program Files</code> windows 系统下的绝对路径</li><li><code>/user/bin</code> Linux 系统下的绝对路径</li></ul></li></ul><blockquote><p>相对路径中所谓的 <code>当前目录</code> ，指的是 <code>命名行的工作目录</code> ，而并非是文件的所在目录</p><p>所以当命名行的工作目录与文件所在目录不一致时，会出现一些 Bug</p></blockquote><h2 id="_8-dirname" tabindex="-1"><a class="header-anchor" href="#_8-dirname" aria-hidden="true">#</a> 8. __dirname</h2><p><code>__dirname</code> 与 <code>require</code> 类似，都是 Node.js 环境中的 &#39;全局&#39; 变量</p><p><code>__dirname</code> 保存着<mark>当前文件的所在目录的绝对路径</mark>，可以使用 <code>__dirname</code> 与文件名拼接成绝对路径</p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// __dirname + &#39;/data.txt&#39;  === &#39;D:\\\\Desktop\\\\Node\\\\code\\\\03-fs模块/data.txt&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/data.txt&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 fs 模块的时候，尽量使用 <code>__dirname</code> 路径转换为绝对路径，这样可以避免相对路径产生的 Bug</p></blockquote>`,135),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","03-NodeJS-fs模块.html.vue"]]);export{r as default};
