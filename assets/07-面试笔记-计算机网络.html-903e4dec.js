import{_ as a,o as e,c as i,b as d}from"./app-0d76a3c2.js";const r={},h=d('<h2 id="_1-从输入url到网页显示的完整过程" tabindex="-1"><a class="header-anchor" href="#_1-从输入url到网页显示的完整过程" aria-hidden="true">#</a> 1. 从输入URL到网页显示的完整过程</h2><h3 id="_1-解析url" tabindex="-1"><a class="header-anchor" href="#_1-解析url" aria-hidden="true">#</a> 1. 解析URL</h3><p>首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程</p><h3 id="_2-缓存判断" tabindex="-1"><a class="header-anchor" href="#_2-缓存判断" aria-hidden="true">#</a> 2. 缓存判断</h3><p>浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求</p><h3 id="_3-dns解析" tabindex="-1"><a class="header-anchor" href="#_3-dns解析" aria-hidden="true">#</a> 3. DNS解析</h3><p>首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求</p><h3 id="_4-获取mac地址" tabindex="-1"><a class="header-anchor" href="#_4-获取mac地址" aria-hidden="true">#</a> 4. 获取MAC地址</h3><p>当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 ARP 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址</p><h3 id="_5-tcp三次握手" tabindex="-1"><a class="header-anchor" href="#_5-tcp三次握手" aria-hidden="true">#</a> 5. TCP三次握手</h3><p>首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了</p><h3 id="_6-https握手" tabindex="-1"><a class="header-anchor" href="#_6-https握手" aria-hidden="true">#</a> 6. HTTPS握手</h3><p>如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输</p><h3 id="_7-返回数据" tabindex="-1"><a class="header-anchor" href="#_7-返回数据" aria-hidden="true">#</a> 7. 返回数据</h3><p>当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程</p><h3 id="_8-页面渲染" tabindex="-1"><a class="header-anchor" href="#_8-页面渲染" aria-hidden="true">#</a> 8. 页面渲染</h3><p>浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判断是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了</p><h3 id="_9-tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#_9-tcp四次挥手" aria-hidden="true">#</a> 9. TCP四次挥手</h3><p>TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 连接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态</p><h2 id="_2-dns" tabindex="-1"><a class="header-anchor" href="#_2-dns" aria-hidden="true">#</a> 2. DNS</h2><h3 id="_1-dns协议是什么" tabindex="-1"><a class="header-anchor" href="#_1-dns协议是什么" aria-hidden="true">#</a> 1. DNS协议是什么</h3><p>概念：DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种<strong>主机名到 IP 地址的转换服务</strong>，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串</p><p>作用： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址</p><h3 id="_2-dns同时使用tcp和udp协议" tabindex="-1"><a class="header-anchor" href="#_2-dns同时使用tcp和udp协议" aria-hidden="true">#</a> 2. DNS同时使用TCP和UDP协议</h3><p><strong>DNS占用53号端口，同时使用TCP和UDP协议</strong></p><p>在区域传输的时候使用TCP协议</p><p>在域名解析的时候使用UDP协议</p><h3 id="_3-dns查询流程" tabindex="-1"><a class="header-anchor" href="#_3-dns查询流程" aria-hidden="true">#</a> 3. DNS查询流程</h3><ol><li><p>客户端发起一个DNS请求，先查看本地浏览器是否有这个域名的缓存，有则解析结束</p></li><li><p>没有则去看操作系统是否有缓存，有则解析结束</p></li><li><p>没有则去看本地host文件，有则解析结束</p></li><li><p>没有则发送该请求到本地DNS服务器，如果本地DNS服务器存在则返回</p></li><li><p>不存在本地DNS服务器则请求根域名服务器，比如请求<code>www.baidu.com</code>，根域名服务器告诉本地DNS <code>.com</code>顶级域名服务器的位置</p></li><li><p>本地DNS服务器收到顶级域名服务器位置后则向顶级域名服务器请求<code>www.baidu.com</code>的IP地址，顶级域名服务器收到后则告诉本地DNS服务器<code>www.baidu.com</code>的权威域名服务器地址</p></li><li><p>本地DNS服务器再向权威DNS服务器发起请求，权威DNS服务器查询后将对应的IP地址告诉本地DNS</p></li><li><p>本地DNS服务器缓存该域名与对应IP然后返回IP给客户端</p></li><li><p>浏览器根据TTL缓存该值</p></li></ol><blockquote><p><strong>注意：其中1-4为递归查询，5-7为迭代查询</strong></p></blockquote><h2 id="_3-osi七层模型" tabindex="-1"><a class="header-anchor" href="#_3-osi七层模型" aria-hidden="true">#</a> 3. OSI七层模型</h2><p><code>ISO</code>为了更好的使网络应用更为普及，推出了OSI参考模型</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/面试笔记-计算机网络01.png" alt="面试笔记-计算机网络01.png" tabindex="0" loading="lazy"><figcaption>面试笔记-计算机网络01.png</figcaption></figure><h3 id="_1-应用层" tabindex="-1"><a class="header-anchor" href="#_1-应用层" aria-hidden="true">#</a> 1. 应用层</h3><p>应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用</p><p>该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 <code>DNS</code>，支持万维网应用的 <code>HTTP</code> 协议，电子邮件系统采用的 <code>SMTP </code>协议等</p><p>在应用层交互的数据单元我们称之为报文</p><p><mark>文件传输、电子邮件、文件服务、虚拟终端</mark></p><h3 id="_2-表示层" tabindex="-1"><a class="header-anchor" href="#_2-表示层" aria-hidden="true">#</a> 2. 表示层</h3><p>表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 <code>OSI </code>参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务</p><p>该层提供的服务主要包括数据压缩，数据加密以及数据描述，使应用程序不必担心在各台计算机中表示和存储的内部格式差异</p><p><mark>数据格式化、代码转换、数据加密</mark></p><h3 id="_3-会话层" tabindex="-1"><a class="header-anchor" href="#_3-会话层" aria-hidden="true">#</a> 3. 会话层</h3><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话</p><p>该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法</p><p><mark>解除或建立与别的节点的联系</mark></p><h3 id="_4-传输层" tabindex="-1"><a class="header-anchor" href="#_4-传输层" aria-hidden="true">#</a> 4. 传输层</h3><p>传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题</p><p>传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层</p><p>其中，主要的传输层协议是<code>TCP</code>和<code>UDP</code></p><p><mark>提供端对端的接口</mark></p><h3 id="_5-网络层" tabindex="-1"><a class="header-anchor" href="#_5-网络层" aria-hidden="true">#</a> 5. 网络层</h3><p>两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网</p><p>网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送</p><p>在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包，向下传输到数据链路层</p><p>在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层</p><p><mark>为数据包选择路由</mark></p><h3 id="_6-数据链路层" tabindex="-1"><a class="header-anchor" href="#_6-数据链路层" aria-hidden="true">#</a> 6. 数据链路层</h3><p>数据链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议</p><p>在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 <code>IP </code>数据报组装成帧，在两个相邻节点间的链路上传送帧</p><p>每一帧的数据可以分成：报头<code>head</code>和数据<code>data</code>两部分:</p><ul><li>head 标明数据发送者、接受者、数据类型，如 MAC地址</li><li>data 存储了计算机之间交互的数据</li></ul><p>通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源</p><p><mark>传输有地址的帧以及错误检测功能</mark></p><h3 id="_7-物理层" tabindex="-1"><a class="header-anchor" href="#_7-物理层" aria-hidden="true">#</a> 7. 物理层</h3><p>作为<code> OSI</code> 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送</p><p>该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性）</p><p>该层主要是和硬件有关，与软件关系不大</p><p><mark>以二进制数据形式在物理媒体上传输数据</mark></p><h2 id="_4-tcp-ip五层模型" tabindex="-1"><a class="header-anchor" href="#_4-tcp-ip五层模型" aria-hidden="true">#</a> 4. TCP/IP五层模型</h2><p><code>TCP/IP</code>模型比<code>OSI</code>模型更加简洁，它把<code>应用层/表示层/会话层</code>全部整合为了应用层</p><h2 id="_5-get和post请求的区别" tabindex="-1"><a class="header-anchor" href="#_5-get和post请求的区别" aria-hidden="true">#</a> 5. GET和POST请求的区别</h2><ul><li>应用场景：GET 请求是一个幂等的请求，<mark>GET请求一般用于对服务器资源不会产生影响的场景</mark>，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，<mark>POST请求一般用于对服务器资源会产生影响的情景</mark>，比如注册用户这一类的操作</li><li>是否缓存：因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存</li><li>发送的报文格式：Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据</li><li>安全性：Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中</li><li>请求长度：浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的</li><li>参数类型：post 的参数传递支持更多的数据类型</li></ul><h2 id="_6-post和put请求的区别" tabindex="-1"><a class="header-anchor" href="#_6-post和put请求的区别" aria-hidden="true">#</a> 6. POST和PUT请求的区别</h2><ul><li>PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同（可以理解为更新数据）</li><li>POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容（可以理解为是创建数据）</li></ul><h2 id="_7-常见的http请求头和响应头" tabindex="-1"><a class="header-anchor" href="#_7-常见的http请求头和响应头" aria-hidden="true">#</a> 7. 常见的HTTP请求头和响应头</h2><p>HTTP Request Header 常见的请求头：</p><ul><li>Accept:浏览器能够处理的内容类型</li><li>Accept-Charset:浏览器能够显示的字符集</li><li>Accept-Encoding：浏览器能够处理的压缩编码</li><li>Accept-Language：浏览器当前设置的语言</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cookie：当前页面设置的任何Cookie</li><li>Host：发出请求的页面所在的域</li><li>Referer：发出请求的页面的URL</li><li>User-Agent：浏览器的用户代理字符串</li></ul><p>HTTP Responses Header 常见的响应头：</p><ul><li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li><li>server:服务器名称</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cache-Control：控制HTTP缓存</li><li>content-type:表示后面的文档属于什么MIME类型</li></ul><h2 id="_8-http状态码304是多好还是少好" tabindex="-1"><a class="header-anchor" href="#_8-http状态码304是多好还是少好" aria-hidden="true">#</a> 8. HTTP状态码304是多好还是少好</h2><p>服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载</p><p>产生较多304状态码的原因：</p><ul><li>页面更新周期长或不更新</li><li>纯静态页面或强制生成静态html</li></ul><p>304状态码出现过多会造成以下问题：</p><ul><li>网站快照停止</li><li>收录减少</li><li>权重下降</li></ul>',86),p=[h];function t(c,l){return e(),i("div",null,p)}const o=a(r,[["render",t],["__file","07-面试笔记-计算机网络.html.vue"]]);export{o as default};
