import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as t,c,d as a,e,a as l,b as i}from"./app-61b56faa.js";const r={},o=i('<p>#GitHub #Git</p><h1 id="git-简介" tabindex="-1"><a class="header-anchor" href="#git-简介" aria-hidden="true">#</a> Git 简介</h1><p>Git 是目前世界上最先进的分布式<mark>版本控制系统</mark>。</p><p>版本控制系统（version control system）, 是一种<mark>记录一个或若干文件内容变化</mark>，以便将来查阅特定版本修订情况的系统。</p><h2 id="git-的诞生" tabindex="-1"><a class="header-anchor" href="#git-的诞生" aria-hidden="true">#</a> Git 的诞生</h2><p>Git 是由 Linux 之父 Linus 开发的，在 2005 年 4 月 3 号开始开发，到 4 月 7 号仅四天时间 Git 就可以投入使用了。到同年 6 月份，Linux 已经在使用 Git 管理代码了。</p><p>Git 是用什么语言开发的：<mark>C 语言</mark>。</p><h2 id="集中式-vs-分布式" tabindex="-1"><a class="header-anchor" href="#集中式-vs-分布式" aria-hidden="true">#</a> 集中式 vs 分布式</h2><blockquote><p>集中式和分布式的区别是： 你的本地是否有完整的版本库历史！ 假设 SVN 服务器没了，那你丢掉了所有历史信息，因为你的本地只有当前版本以及部分历史信息。必须联网才能工作。 假设 GitHub 服务器没了，你不会丢掉任何 git 历史信息，因为你的本地有完整的版本库信息。你可以把本地的 git 库重新上传到另外的 git 服务商。可以离线工作。</p></blockquote><h1 id="安装-git" tabindex="-1"><a class="header-anchor" href="#安装-git" aria-hidden="true">#</a> 安装 Git</h1>',10),p={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，会出现一个类似如下图命令行窗口的东西，就说明 Git 安装成功！</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git教程01.png" alt="Git教程01.png" tabindex="0" loading="lazy"><figcaption>Git教程01.png</figcaption></figure><h1 id="git-初始化" tabindex="-1"><a class="header-anchor" href="#git-初始化" aria-hidden="true">#</a> Git 初始化</h1><h2 id="设置用户签名" tabindex="-1"><a class="header-anchor" href="#设置用户签名" aria-hidden="true">#</a> 设置用户签名</h2><blockquote><p>签名的作用就是用来标识用户，以区分不同的开发人员</p></blockquote><p>==安装完成后，还需要最后一步设置，==在命令行输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Your Name&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>git config</code> 命令的 <code>--global</code> 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p><h2 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h2><p><mark>如果你使用 Windows 系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</mark></p><p>通过 <code>git init</code> 命令可以把目录变成 Git 可以管理的仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git 初始化的指令</span>
$ <span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>瞬间 Git 就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），可以发现当前目录下多了一个 <code>.git</code> 的目录，这个目录是 Git 来跟踪仓库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把 Git 仓库给破坏了。</p><p>如果你没有看到 <code>.git</code> 目录，那是因为这个目录默认是隐藏的，用 <code>ls -ah</code> 命令就可以看见。</p><p><mark>也不一定必须在空目录下创建 Git 仓库，选择一个已经有东西的目录也是可以的。</mark></p><h1 id="git-工作机制" tabindex="-1"><a class="header-anchor" href="#git-工作机制" aria-hidden="true">#</a> Git 工作机制</h1><p>分为 Git 工作区、暂存区和版本库 <mark>具体流程：代码提交到暂存区（暂时保存），然后暂存区提交到 master 分支（版本库）</mark></p><h2 id="git-工作区" tabindex="-1"><a class="header-anchor" href="#git-工作区" aria-hidden="true">#</a> Git 工作区</h2><p>在电脑里面能够看得到的项目目录，但是项目目录下隐藏了一个 <code>.git</code> 目录，这个目录不属于工作区，而是版本库</p><h2 id="git-暂存区" tabindex="-1"><a class="header-anchor" href="#git-暂存区" aria-hidden="true">#</a> Git 暂存区</h2><p>英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</p><h2 id="git-版本库" tabindex="-1"><a class="header-anchor" href="#git-版本库" aria-hidden="true">#</a> Git 版本库</h2><p><code>.git</code> 目录就是版本库</p><h1 id="托管平台" tabindex="-1"><a class="header-anchor" href="#托管平台" aria-hidden="true">#</a> 托管平台</h1><ul><li>局域网（内网） <ul><li>GitLab</li></ul></li><li>公网（外网） <ul><li>GitLab</li><li>GitHub</li><li>Gitee</li></ul></li></ul><h1 id="添加文件到暂存区" tabindex="-1"><a class="header-anchor" href="#添加文件到暂存区" aria-hidden="true">#</a> 添加文件到暂存区</h1><p>我们要放入暂存区，要使用 <code>git add</code> 命令</p><ul><li>把单独一个文件放在暂存区</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下的index.txt文本放在暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> index.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把单独一个文件夹放在暂存区（<mark>暂存区不能存放空文件夹</mark>）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下的test文件夹放在暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> test/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把所有文件都放在暂存区</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把文件夹下所有的内容都放在暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span>
<span class="token comment"># git add --all 有一个简单的写法</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>可以使用 <code>git status</code> 命令来掌握仓库当前的状态</mark><mark>可以使用 <code>git rm --cached &lt;file&gt;...</code> 命令来从暂存区中删除 file</mark></p><h1 id="提交暂存区到本地仓库" tabindex="-1"><a class="header-anchor" href="#提交暂存区到本地仓库" aria-hidden="true">#</a> 提交暂存区到本地仓库</h1><p>将暂存区文件提交到本地仓库，使用 <code>git commit</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把暂存区的内容放到本地仓库</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;备注&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>git log</code> 命令来查看版本信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前历史区版本信息</span>
$ <span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="版本穿梭" tabindex="-1"><a class="header-anchor" href="#版本穿梭" aria-hidden="true">#</a> 版本穿梭</h1><h2 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退" aria-hidden="true">#</a> 版本回退</h2><p>使用 <code>git reset --hard 版本编号</code> 进行版本回退（回退到工作区）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 回退到上一次提交的版本</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
<span class="token comment"># 回退到上上次提交的版本</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 <code>HEAD</code> 指针，当你回退版本的时候，Git 仅仅是把 HEAD 从指向 <code>当前版本</code> ，改为指向 <code>要回到的版本</code></p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git教程02.gif" alt="Git教程02.gif" tabindex="0" loading="lazy"><figcaption>Git教程02.gif</figcaption></figure><p>然后顺便把工作区的文件更新了。所以你让 <code>HEAD</code> 指向哪个版本号，你就把当前版本定位在哪。 <mark>如果回退错了，可以使用 <code>git reflog</code> 命令来查看所有的操作记录，可以通过前面的标识符（版本号）来回退</mark> 使用 <code>git reset --soft 版本编号</code> 可以回退到暂存区，用处：备注重写和版本合并</p><h2 id="git-revert-和-git-reset" tabindex="-1"><a class="header-anchor" href="#git-revert-和-git-reset" aria-hidden="true">#</a> git revert 和 git reset</h2><ul><li>git reset 是回滚到对应的 commit-id，相当于是删除了 commit-id 以后的所有的提交，并且不会产生新的 commit-id 记录，如果要推送到远程服务器的话，需要强制推送-f</li><li>git revert 是反做撤销其中的 commit-id，然后重新生成一个 commit-id。本身不会对其他的提交 commit-id 产生影响，如果要推送到远程服务器的话，就是普通的操作 git push 就可以 git reset：</li></ul><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git教程03.gif" alt="Git教程03.gif" tabindex="0" loading="lazy"><figcaption>Git教程03.gif</figcaption></figure><p>git revert：</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git教程04.gif" alt="Git教程04.gif" tabindex="0" loading="lazy"><figcaption>Git教程04.gif</figcaption></figure><h1 id="git-分支" tabindex="-1"><a class="header-anchor" href="#git-分支" aria-hidden="true">#</a> Git 分支</h1><h2 id="初识分支" tabindex="-1"><a class="header-anchor" href="#初识分支" aria-hidden="true">#</a> 初识分支</h2><ul><li><code>git</code> 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域</li><li>比如我们在开发 <code>登录</code> 功能的时候，可以放在 <code>login</code> 分支下进行开发；在开发 <code>列表</code> 功能的时候，可以放在 <code>list</code> 分支下进行开发，大家互不干扰，每一个功能都是一个独立的功能分支，这样开发会更好</li><li><code>git</code> 在初始化的时候，会自动生成一个分支，叫做 <code>master</code>，是表示主要分支的意思</li><li>我们可以自己开辟出很多独立分支</li></ul><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><ul><li>开辟一个分支，使用 <code>git branch 分支名称</code> 命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开辟一个login分支</span>
$ <span class="token function">git</span> branch login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看一下当前分支情况，前面有个 <code>*</code> 的，并且有高亮显示的，表示你当前所处的分支</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前分支情况</span>
$ <span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>切换分支（HEAD 指向会跟着一起变），使用 <code>git checkout 分支名称</code> 命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到master分支</span>
$ <span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：切换分支时，记得将当前分支提交到暂存区（git add）</mark></p><ul><li>合并分支，使用 <code>git merge 分支名称</code> 命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 合并login分支到master分支</span>
<span class="token comment"># 首先切换到master分支</span>
$ <span class="token function">git</span> checkout master
<span class="token comment"># 合并分支</span>
$ <span class="token function">git</span> merge login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除分支，使用 <code>git branch -d 分支名称</code> 命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除login分支</span>
<span class="token comment"># 先切换到别的分支</span>
$ <span class="token function">git</span> checkout master
<span class="token comment"># 删除login分支</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分支合并冲突" tabindex="-1"><a class="header-anchor" href="#分支合并冲突" aria-hidden="true">#</a> 分支合并冲突</h2><p>分支合并后如有冲突，git 会在文件中标识出来，需要我们人工解决冲突</p><h1 id="初识团队协作" tabindex="-1"><a class="header-anchor" href="#初识团队协作" aria-hidden="true">#</a> 初识团队协作</h1><p>需要使用托管平台来实现，如 GitHub</p><h2 id="github-远端仓库" tabindex="-1"><a class="header-anchor" href="#github-远端仓库" aria-hidden="true">#</a> GitHub 远端仓库</h2><p>首先，登陆 GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在 Repository name 填入你的仓库名，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的 Git 仓库。</p><p>目前，在GitHub上的这个仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据 GitHub 的提示，在本地的要上传的仓库下运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:你的账户名/你的仓库名.git
<span class="token comment"># 如：$ git remote add origin git@github.com:zhf521/learngit.git</span>
<span class="token comment"># 这里的origin是你的远端库的别名，可以是任意的，以后你提交的时候就可以向origin提交即可</span>
<span class="token comment"># 使用 $ git remote remove origin 命令即可删除,这里的origin是仓库的别名，可以使用git remote -v查看</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>git remote -v</code> 可以查看连接的远程库</p><h2 id="推送" tabindex="-1"><a class="header-anchor" href="#推送" aria-hidden="true">#</a> 推送</h2><p>使用 <code>git push</code> 推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push origin master
<span class="token comment"># 将本地分支推送到远程库（别名为origin）master分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>-u</code> 参数即可以后只使用 <code>git push</code> 来推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="拉取" tabindex="-1"><a class="header-anchor" href="#拉取" aria-hidden="true">#</a> 拉取</h2><p>使用 <code>git pull</code> 拉取更新的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull origin master
<span class="token comment"># 将远程库（别名为origin）master分支拉取到本地分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>-u</code> 参数即可以后只使用 <code>git pull</code> 来推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="克隆" tabindex="-1"><a class="header-anchor" href="#克隆" aria-hidden="true">#</a> 克隆</h2><p>使用 <code>git clone 仓库地址</code> 克隆远程仓库里面的内容到本地==（注意：克隆只能克隆主分支）== 可以克隆别人的公开的仓库，也可以克隆自己的仓库，克隆别人的仓库，我们只能拿来用，修改后不能重新上传；克隆自己的仓库，我们修改后还可以再次上传更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接克隆仓库</span>
$ <span class="token function">git</span> clone 仓库地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="团队协作的分支管理" tabindex="-1"><a class="header-anchor" href="#团队协作的分支管理" aria-hidden="true">#</a> 团队协作的分支管理</h1><p>本地分支推送到远程分支 使用 <code>git push</code> 推送</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push origin login
<span class="token comment"># 将本地分支推送到远程库（别名为origin）login分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注意：克隆只能克隆主分支，需要拉取分支</mark> 使用 <code>git pull</code> 拉取更新的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull origin login
<span class="token comment"># 将远程库（别名为origin）login分支拉取到本地分支上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull origin :login
<span class="token comment"># 将远程库（别名为origin）login分支删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="跨团队协作" tabindex="-1"><a class="header-anchor" href="#跨团队协作" aria-hidden="true">#</a> 跨团队协作</h1><p>先 fork 到自己的仓库，然后修改，然后 pull request，等待原作者审核</p><h1 id="vscode-集成-git" tabindex="-1"><a class="header-anchor" href="#vscode-集成-git" aria-hidden="true">#</a> VSCode 集成 Git</h1><p>VSCode 中已经集成了 Git <code>.gitignore</code> 文件可以忽略文件，这个文件将不会上传</p><h1 id="一图总结" tabindex="-1"><a class="header-anchor" href="#一图总结" aria-hidden="true">#</a> 一图总结</h1><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/Git教程05.png" alt="Git教程05.png" tabindex="0" loading="lazy"><figcaption>Git教程05.png</figcaption></figure>`,102);function h(g,m){const n=d("ExternalLinkIcon");return t(),c("div",null,[o,a("p",null,[e("在 Windows 上使用 Git，可以从 Git 官网直接"),a("a",p,[e("下载安装程序"),l(n)]),e("，然后按默认选项安装即可。")]),u])}const f=s(r,[["render",h],["__file","Git教程.html.vue"]]);export{f as default};
