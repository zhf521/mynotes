import{_ as l,r as p,o,c as i,b as n,d as s,a as t,e}from"./app-d2d5bf33.js";const c={},u=e(`<h2 id="_1-vue-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-vue-基本使用" aria-hidden="true">#</a> 1. Vue 基本使用</h2><h3 id="_1-vue-cli-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-vue-cli-创建项目" aria-hidden="true">#</a> 1. vue-cli 创建项目</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 安装或者升级你的@vue/cli</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli
<span class="token comment">## 创建Vue项目，选择Vue版本</span>
vue create xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-插值与指令" tabindex="-1"><a class="header-anchor" href="#_2-插值与指令" aria-hidden="true">#</a> 2. 插值与指令</h3>`,4),r={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/02-Vue%E6%A0%B8%E5%BF%83-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95.html",target:"_blank",rel:"noopener noreferrer"},d=n("h3",{id:"_3-computed和watch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-computed和watch","aria-hidden":"true"},"#"),s(" 3. computed和watch")],-1),v={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/06-Vue%E6%A0%B8%E5%BF%83-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7.html",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"注意：",-1),m=n("ul",null,[n("li",null,"computed 是有缓存的，data 不变就不会重新计算"),n("li",null,[s("watch "),n("ul",null,[n("li",null,[s("如何深度监听：设置"),n("code",null,"deep:true")]),n("li",null,"引用类型无法拿到 oldVal")])])],-1),h=n("h3",{id:"_4-class-和-style",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-class-和-style","aria-hidden":"true"},"#"),s(" 4. class 和 style")],-1),g={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/07-Vue%E6%A0%B8%E5%BF%83-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F.html",target:"_blank",rel:"noopener noreferrer"},b=n("h3",{id:"_5-条件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-条件","aria-hidden":"true"},"#"),s(" 5. 条件")],-1),_={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/08-Vue%E6%A0%B8%E5%BF%83-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93.html",target:"_blank",rel:"noopener noreferrer"},f=n("ul",null,[n("li",null,"v-if 和 v-show 的区别，以及使用场景 —— 频繁切换用 v-show ，否则用 v-if（不展示的 dom 元素会直接移除）")],-1),E=n("h3",{id:"_6-循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-循环","aria-hidden":"true"},"#"),s(" 6. 循环")],-1),x={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/09-Vue%E6%A0%B8%E5%BF%83-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%9B%91%E8%A7%86.html#_1-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93",target:"_blank",rel:"noopener noreferrer"},B=n("ul",null,[n("li",null,"遍历数组，遍历对象"),n("li",null,"key"),n("li",null,[s("v-for 和 v-if 不要一起用 "),n("ul",null,[n("li",null,"v-for 会优先于 v-if 执行"),n("li",null,"因此 v-if 会在每一个 v-for 中都计算一遍"),n("li",null,"v-if 和 v-for 拆开使用")])])],-1),A=n("h3",{id:"_7-事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-事件","aria-hidden":"true"},"#"),s(" 7. 事件")],-1),q={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/05-Vue%E6%A0%B8%E5%BF%83-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>传参</li><li>event 参数</li><li>事件修饰符</li><li>按键修饰符</li><li>【注意】用 vue 绑定的事件，组建销毁时会自动被解绑。自己绑定的事件，需要自己销毁</li></ul><p>事件修饰符：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 阻止单击事件继续冒泡 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 提交事件不再重载页面 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 修饰符可以串联 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 只有修饰符 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span>
<span class="token comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span>
<span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按键修饰符：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onCtrlClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-表单" tabindex="-1"><a class="header-anchor" href="#_8-表单" aria-hidden="true">#</a> 8. 表单</h3>`,6),V={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/10-Vue%E6%A0%B8%E5%BF%83-%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE.html",target:"_blank",rel:"noopener noreferrer"},F=n("ul",null,[n("li",null,"textarea 要用 v-model")],-1),w=n("p",null,"修饰符：lazy number trim",-1),j=n("h2",{id:"_2-vue-组件使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-vue-组件使用","aria-hidden":"true"},"#"),s(" 2. Vue 组件使用")],-1),D={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/13-Vue%E6%A0%B8%E5%BF%83-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/14-Vue%E6%A0%B8%E5%BF%83-Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B.html",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"_3-vue-高级特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-vue-高级特性","aria-hidden":"true"},"#"),s(" 3. Vue 高级特性")],-1),C=n("h3",{id:"_1-自定义-v-model",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-自定义-v-model","aria-hidden":"true"},"#"),s(" 1. 自定义 v-model")],-1),N={href:"https://www.mulianju.com/vue-v-model/",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>为了保证数据完整性，Vue在自定义组件的props定义中，只允许父组件向子组件传递数据，子组件不能直接修改props中的数据，在实际项目中有很多需要子组件内部更新属性，并同步给父组件的情况，也就是v-model数据双向绑定，那自定义组件如何实现v-model数据双向绑定呢？</p><p>在 Vue 中,自定义组件可以通过 props 传递数据,然后通过 emit 触发事件向父级组件发送更新。这样就可以实现类似 v-model 的双向绑定效果。 具体步骤如下:</p><ol><li><p>在自定义组件中定义一个 prop 用于接收值,例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在自定义组件中维护该值的内部状态,例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">innerValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在自定义组件中定义一个 model 属性,例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后在内部状态发生变化时触发该事件,例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>最后,在使用自定义组件的父级组件中,使用 v-model 双向绑定 prop 和 emit,例如:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>这相当于:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;my-component 
  :value=&quot;someValue&quot;
  @input=&quot;someValue = $event&quot;
&gt;&lt;/my-component&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这 5 个步骤,我们就实现了自定义组件的 v-model 效果,以下是一个完整示例:</p><p>父组件:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;template&gt;
  &lt;my-component v-model=&quot;message&quot;&gt;&lt;/my-component&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {
      message: &#39;Hello&#39; 
    }
  }
}
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义组件:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;template&gt;
  &lt;input type=&quot;text&quot; :value=&quot;innerValue&quot; @input=&quot;onInput&quot;&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  props: [&#39;value&#39;],
  data() {
    return {
      innerValue: this.value 
    }
  },
  model: {
    prop: &#39;value&#39;,
    event: &#39;input&#39;
  }
  methods: {
    onInput(e) {
      this.innerValue = e.target.value 
      this.$emit(&#39;input&#39;, this.innerValue)
    }
  }
}
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-nexttick" tabindex="-1"><a class="header-anchor" href="#_2-nexttick" aria-hidden="true">#</a> 2. $nextTick</h3>`,11),I={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/17-Vue%E6%A0%B8%E5%BF%83-%E5%85%B6%E5%AE%83%E5%B0%8F%E7%9F%A5%E8%AF%86.html#_6-nexttick",target:"_blank",rel:"noopener noreferrer"},$=n("h3",{id:"_3-slot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-slot","aria-hidden":"true"},"#"),s(" 3. slot")],-1),R={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/18-Vue%E6%A0%B8%E5%BF%83-slot%E6%8F%92%E6%A7%BD.html",target:"_blank",rel:"noopener noreferrer"},L=e(`<p><strong>作用域插槽</strong></p><p>即子组件管理数据，父组件通过插槽的作用域来获取。</p><p><strong>具名插槽</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- NamedSlot 组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NamedSlot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 缩写 &lt;template #header&gt; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>将插入 header slot 中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>将插入到 main slot 中，即未命名的 slot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>将插入到 footer slot 中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NamedSlot</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-动态组件" tabindex="-1"><a class="header-anchor" href="#_4-动态组件" aria-hidden="true">#</a> 4. 动态组件</h3><p>关键代码如下，其中 <code>TplDemoName</code> 要有定义</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TplDemoName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> TplDemo <span class="token keyword">from</span> <span class="token string">&#39;../BaseUse/TplDemo&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        TplDemo
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">TplDemoName</span><span class="token operator">:</span> <span class="token string">&#39;TplDemo&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-异步组件" tabindex="-1"><a class="header-anchor" href="#_5-异步组件" aria-hidden="true">#</a> 5. 异步组件</h3><p><code>import()</code>函数实现</p><h3 id="_6-keep-alive" tabindex="-1"><a class="header-anchor" href="#_6-keep-alive" aria-hidden="true">#</a> 6. keep-alive</h3><p>缓存组件</p><p>使用<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>包裹</p><h3 id="_7-mixin" tabindex="-1"><a class="header-anchor" href="#_7-mixin" aria-hidden="true">#</a> 7. mixin</h3>`,15),H={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/17-Vue%E6%A0%B8%E5%BF%83-%E5%85%B6%E5%AE%83%E5%B0%8F%E7%9F%A5%E8%AF%86.html#_3-mixin%E6%B7%B7%E5%85%A5",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,[s("【注意】mixin 不是完美的解决方案，"),n("strong",null,"它的变量作用域不明确")],-1),O=n("p",null,"vue3 的 composition API 也是想解决这个问题",-1),P=n("h2",{id:"_4-vuex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-vuex","aria-hidden":"true"},"#"),s(" 4. Vuex")],-1),U={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/22-Vuex.html",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"_5-vuerouter-使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-vuerouter-使用","aria-hidden":"true"},"#"),s(" 5. VueRouter 使用")],-1),J=n("ul",null,[n("li",null,"vue-router"),n("li",null,"动态路由"),n("li",null,"to 和 push"),n("li",null,"hash 和 history"),n("li",null,"懒加载（配合动态组件）")],-1),K={href:"https://zhf521.github.io/mynotes/front-end/vue-notes/23-VueRouter.html",target:"_blank",rel:"noopener noreferrer"};function Q(W,X){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("详见："),n("a",r,[s("模板语法"),t(a)])]),d,n("p",null,[s("详见："),n("a",v,[s("计算属性与侦听属性"),t(a)])]),k,m,h,n("p",null,[s("详见："),n("a",g,[s("绑定样式"),t(a)])]),b,n("p",null,[s("详见："),n("a",_,[s("条件渲染"),t(a)])]),f,E,n("p",null,[s("详见："),n("a",x,[s("列表渲染"),t(a)])]),B,A,n("p",null,[s("详见："),n("a",q,[s("事件处理"),t(a)]),s(" 【注意】vue 事件是被注册到当前 DOM 元素的")]),y,n("p",null,[s("详见："),n("a",V,[s("表单"),t(a)])]),F,w,j,n("p",null,[s("详见："),n("a",D,[s("生命周期"),t(a)])]),n("p",null,[s("详见："),n("a",z,[s("组件化编程"),t(a)])]),T,C,n("p",null,[s("详见："),n("a",N,[s("Vue自定义组件如何实现v-model数据双向绑定"),t(a)])]),S,n("p",null,[s("详见："),n("a",I,[s("$nextTick"),t(a)])]),$,n("p",null,[s("详见："),n("a",R,[s("插槽"),t(a)])]),L,n("p",null,[s("详见："),n("a",H,[s("混入"),t(a)])]),M,O,P,n("p",null,[s("详见："),n("a",U,[s("Vuex"),t(a)])]),G,J,n("p",null,[s("详见："),n("a",K,[s("VueRouter"),t(a)])])])}const Z=l(c,[["render",Q],["__file","08-知识点总结-Vue.html.vue"]]);export{Z as default};
