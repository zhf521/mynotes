import{_ as o,r as p,o as c,c as l,d as n,e as s,a as t,b as e}from"./app-80689be4.js";const i={},u=e(`<h2 id="_1-面向过程与面向对象" tabindex="-1"><a class="header-anchor" href="#_1-面向过程与面向对象" aria-hidden="true">#</a> 1. 面向过程与面向对象</h2><h3 id="_1-面向过程" tabindex="-1"><a class="header-anchor" href="#_1-面向过程" aria-hidden="true">#</a> 1. 面向过程</h3><p><strong>通过函数一步一步实现这些步骤，接着依次调用即可</strong></p><p>优点：性能上它是优于面向对象的，因为类在调用的时候需要实例化，开销过大</p><p>缺点：不易维护、复用、扩展</p><p>用途：单片机、嵌入式开发、Linux/Unix等对性能要求较高的地方</p><h3 id="_2-面向对象" tabindex="-1"><a class="header-anchor" href="#_2-面向对象" aria-hidden="true">#</a> 2. 面向对象</h3><p><strong>将数据与函数绑定到一起，进行封装减少了重复代码的重写过程</strong></p><p>优点：易维护、易复用、易扩展，由于面向对象有<strong>封装、继承、多态性</strong>的特性，可以设计出<strong>低耦合</strong>的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><h2 id="_2-bom和dom" tabindex="-1"><a class="header-anchor" href="#_2-bom和dom" aria-hidden="true">#</a> 2. BOM和DOM</h2><h3 id="_1-bom-window" tabindex="-1"><a class="header-anchor" href="#_1-bom-window" aria-hidden="true">#</a> 1. BOM（window）</h3><p>Browser Object Model（浏览器对象模型），是JavaScript的组成之一，它提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与HTML的交互</p><p>window对象：<code>alert()</code> , <code>prompt()</code> , <code>confirm()</code> , <code>setInterval()</code> , <code>clearInterval()</code> , <code>setTimeout()</code> , <code>clearTimeout()</code></p><p>history对象：<code>go()</code>、<code>back()</code> , <code>foward()</code></p><p>location对象：<code>href</code>属性</p><h3 id="_2-dom-document" tabindex="-1"><a class="header-anchor" href="#_2-dom-document" aria-hidden="true">#</a> 2. DOM（document）</h3><p>Document Object Model（文档对象模型）</p><p>JavaScript中通过DOM来对HTML文档进行操作</p><p>文档是整个的HTML网页文档</p><p>将网页中的每一个部分都转换为了一个对象</p><p>使用模型来表示对象之间的关系，方便获取对象</p><h2 id="_3-常用触发事件" tabindex="-1"><a class="header-anchor" href="#_3-常用触发事件" aria-hidden="true">#</a> 3. 常用触发事件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> onkeyup<span class="token operator">=</span><span class="token string">&quot;myFunction()&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//不用 &quot;on&quot; 前缀。例如，使用 &quot;click&quot; 来取代 &quot;onclick&quot;。</span>
<span class="token comment">//true - 事件在捕获阶段执行</span>
<span class="token comment">//false- 默认。事件在冒泡阶段执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鼠标事件：</p>`,26),r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"属性"),n("th",{style:{"text-align":"left"}},"描述")])],-1),d={style:{"text-align":"left"}},k={href:"https://www.runoob.com/jsref/event-onclick.html",target:"_blank",rel:"noopener noreferrer"},h=n("td",{style:{"text-align":"left"}},"当用户点击某个对象时调用的事件句柄。",-1),f={style:{"text-align":"left"}},m={href:"https://www.runoob.com/jsref/event-ondblclick.html",target:"_blank",rel:"noopener noreferrer"},v=n("td",{style:{"text-align":"left"}},"当用户双击某个对象时调用的事件句柄。",-1),_={style:{"text-align":"left"}},b={href:"https://www.runoob.com/jsref/event-onmousedown.html",target:"_blank",rel:"noopener noreferrer"},g=n("td",{style:{"text-align":"left"}},"鼠标按钮被按下。",-1),y={style:{"text-align":"left"}},w={href:"https://www.runoob.com/jsref/event-onmousemove.html",target:"_blank",rel:"noopener noreferrer"},x=n("td",{style:{"text-align":"left"}},"鼠标被移动。",-1),j={style:{"text-align":"left"}},S={href:"https://www.runoob.com/jsref/event-onmouseover.html",target:"_blank",rel:"noopener noreferrer"},E=n("td",{style:{"text-align":"left"}},"鼠标移到某元素之上。",-1),A={style:{"text-align":"left"}},B={href:"https://www.runoob.com/jsref/event-onmouseout.html",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"left"}},"鼠标从某元素移开。",-1),N={style:{"text-align":"left"}},M={href:"https://www.runoob.com/jsref/event-onmouseup.html",target:"_blank",rel:"noopener noreferrer"},q=n("td",{style:{"text-align":"left"}},"鼠标按键被松开。",-1),J=n("p",null,"键盘事件：",-1),F=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"属性"),n("th",{style:{"text-align":"left"}},"描述")])],-1),I={style:{"text-align":"left"}},L={href:"https://www.runoob.com/jsref/event-onkeydown.html",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"某个键盘按键被按下。",-1),D={style:{"text-align":"left"}},P={href:"https://www.runoob.com/jsref/event-onkeypress.html",target:"_blank",rel:"noopener noreferrer"},U=n("td",{style:{"text-align":"left"}},"某个键盘按键被按下并松开。",-1),V={style:{"text-align":"left"}},C={href:"https://www.runoob.com/jsref/event-onkeyup.html",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"某个键盘按键被松开。",-1),z=n("p",null,"表单事件：",-1),G=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"属性"),n("th",{style:{"text-align":"left"}},"描述")])],-1),K={style:{"text-align":"left"}},Q={href:"https://www.runoob.com/jsref/event-onchange.html",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"left"}},[s("该事件在表单元素的内容改变时触发( "),n("code",null,"<input>"),s(", "),n("code",null,"<keygen>"),s(", "),n("code",null,"<select>"),s(", 和 "),n("code",null,"<textarea>"),s(")")],-1),W={style:{"text-align":"left"}},X={href:"https://www.runoob.com/jsref/event-onfocus.html",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"left"}},"元素获取焦点时触发",-1),Z={style:{"text-align":"left"}},$={href:"https://www.runoob.com/jsref/event-onfocusin.html",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"left"}},"元素即将获取焦点时触发",-1),sn={style:{"text-align":"left"}},an={href:"https://www.runoob.com/jsref/event-onfocusout.html",target:"_blank",rel:"noopener noreferrer"},tn=n("td",{style:{"text-align":"left"}},"元素即将失去焦点时触发",-1),en={style:{"text-align":"left"}},on={href:"https://www.runoob.com/jsref/event-oninput.html",target:"_blank",rel:"noopener noreferrer"},pn=n("td",{style:{"text-align":"left"}},"元素获取用户输入时触发",-1),cn={style:{"text-align":"left"}},ln={href:"https://www.runoob.com/jsref/event-onreset.html",target:"_blank",rel:"noopener noreferrer"},un=n("td",{style:{"text-align":"left"}},"表单重置时触发",-1),rn={style:{"text-align":"left"}},dn={href:"https://www.runoob.com/jsref/event-onsearch.html",target:"_blank",rel:"noopener noreferrer"},kn=n("td",{style:{"text-align":"left"}},[s("用户向搜索域输入文本时触发 ( "),n("code",null,'<input="search">'),s(")")],-1),hn={style:{"text-align":"left"}},fn={href:"https://www.runoob.com/jsref/event-onselect.html",target:"_blank",rel:"noopener noreferrer"},mn=n("td",{style:{"text-align":"left"}},[s("用户选取文本时触发 ( "),n("code",null,"<input>"),s(" 和 "),n("code",null,"<textarea>"),s(")")],-1),vn={style:{"text-align":"left"}},_n={href:"https://www.runoob.com/jsref/event-onsubmit.html",target:"_blank",rel:"noopener noreferrer"},bn=n("td",{style:{"text-align":"left"}},"表单提交时触发",-1),gn=e('<h2 id="_4-es6新增内容" tabindex="-1"><a class="header-anchor" href="#_4-es6新增内容" aria-hidden="true">#</a> 4. ES6新增内容</h2><ol><li>数据类型：基本数据类型：Symbol，引用数据类型：Set、Map</li><li>运算符：变量的解构赋值、对象和数组新增了扩展运算符</li><li>字符串方法：模版字符串</li><li>块级作用域：let、const</li><li>原生提供Proxy构造函数，用来生成Proxy实例</li><li>定义类的语法糖：class</li><li>模块化：import、export</li><li>生成器（Generator）和迭代器（Iterator）</li></ol>',2),yn={href:"https://zhf521.github.io/mynotes/front-end/javascript-notes/26-JavaScript-ES6~ES13.html#_1-es6",target:"_blank",rel:"noopener noreferrer"},wn=e(`<h2 id="_5-javascript有哪些数据类型-区别是什么" tabindex="-1"><a class="header-anchor" href="#_5-javascript有哪些数据类型-区别是什么" aria-hidden="true">#</a> 5. JavaScript有哪些数据类型，区别是什么</h2><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt</p><p>可以分为两种：基本数据类型和引用数据类型</p><h3 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型" aria-hidden="true">#</a> 1. 基本数据类型</h3><p>基本类型主要为以下6种：</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Symbol</li></ul><p>基本数据类型存储在栈中</p><h3 id="_2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-引用数据类型" aria-hidden="true">#</a> 2. 引用数据类型</h3><p>主要有：</p><ul><li>Object</li><li>Array</li><li>Function</li></ul><p>引用数据类型的对象存储于堆中</p><h2 id="_6-数据类型检测的方式" tabindex="-1"><a class="header-anchor" href="#_6-数据类型检测的方式" aria-hidden="true">#</a> 6. 数据类型检测的方式</h2><h3 id="_1-typeof" tabindex="-1"><a class="header-anchor" href="#_1-typeof" aria-hidden="true">#</a> 1. typeof</h3><p>typeof是通过变量存储的机器码的低位1-3位存储类型信息来判断的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// object    </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中数组、对象、null都会被判断为Object，其他判断都正确</p><h3 id="_2-instanceof" tabindex="-1"><a class="header-anchor" href="#_2-instanceof" aria-hidden="true">#</a> 2. instanceof</h3><p>instanceof可以正确判断对象的类型，其内部运行机制是判断其原型链中能否找到该类型的原型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>instanceof只能正确判断引用数据类型，而不能判断基本数据类型</p><p>instanceof可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性</p><h3 id="_3-constructor" tabindex="-1"><a class="header-anchor" href="#_3-constructor" aria-hidden="true">#</a> 3. constructor</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>constructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数</p><p>注意：如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#_4-object-prototype-tostring-call" aria-hidden="true">#</a> 4. Object.prototype.toString.call()</h3><p>使用 Object 对象的原型方法 toString 来判断数据类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-判断数组的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_7-判断数组的方式有哪些" aria-hidden="true">#</a> 7. 判断数组的方式有哪些</h2><ul><li><p>通过<code>Object.prototype.toString.call()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过原型链</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过<code>Array.isArray()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过instanceof</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过<code>Array.prototype.isPrototypeOf()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_8-null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#_8-null和undefined的区别" aria-hidden="true">#</a> 8. null和undefined的区别</h2><p>首先<code>Undefined</code>和<code>Null</code>都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null</p><p>undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化</p><p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 <code>object</code>，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false</p><h2 id="_9-typeof-null-的结果是什么-为什么" tabindex="-1"><a class="header-anchor" href="#_9-typeof-null-的结果是什么-为什么" aria-hidden="true">#</a> 9. typeof null 的结果是什么，为什么？</h2><p>JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object</p><h2 id="_10-intanceof-操作符的实现原理及实现" tabindex="-1"><a class="header-anchor" href="#_10-intanceof-操作符的实现原理及实现" aria-hidden="true">#</a> 10. intanceof 操作符的实现原理及实现</h2>`,40),xn={href:"https://zhf521.github.io/mynotes/front-end/Interview-notes/09-%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81.html#_5-%E6%89%8B%E5%86%99instanceof%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"};function jn(Sn,En){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[n("td",d,[n("a",k,[s("onclick"),t(a)])]),h]),n("tr",null,[n("td",f,[n("a",m,[s("ondblclick"),t(a)])]),v]),n("tr",null,[n("td",_,[n("a",b,[s("onmousedown"),t(a)])]),g]),n("tr",null,[n("td",y,[n("a",w,[s("onmousemove"),t(a)])]),x]),n("tr",null,[n("td",j,[n("a",S,[s("onmouseover"),t(a)])]),E]),n("tr",null,[n("td",A,[n("a",B,[s("onmouseout"),t(a)])]),O]),n("tr",null,[n("td",N,[n("a",M,[s("onmouseup"),t(a)])]),q])])]),J,n("table",null,[F,n("tbody",null,[n("tr",null,[n("td",I,[n("a",L,[s("onkeydown"),t(a)])]),T]),n("tr",null,[n("td",D,[n("a",P,[s("onkeypress"),t(a)])]),U]),n("tr",null,[n("td",V,[n("a",C,[s("onkeyup"),t(a)])]),H])])]),z,n("table",null,[G,n("tbody",null,[n("tr",null,[n("td",K,[n("a",Q,[s("onchange"),t(a)])]),R]),n("tr",null,[n("td",W,[n("a",X,[s("onfocus"),t(a)])]),Y]),n("tr",null,[n("td",Z,[n("a",$,[s("onfocusin"),t(a)])]),nn]),n("tr",null,[n("td",sn,[n("a",an,[s("onfocusout"),t(a)])]),tn]),n("tr",null,[n("td",en,[n("a",on,[s("oninput"),t(a)])]),pn]),n("tr",null,[n("td",cn,[n("a",ln,[s("onreset"),t(a)])]),un]),n("tr",null,[n("td",rn,[n("a",dn,[s("onsearch"),t(a)])]),kn]),n("tr",null,[n("td",hn,[n("a",fn,[s("onselect"),t(a)])]),mn]),n("tr",null,[n("td",vn,[n("a",_n,[s("onsubmit"),t(a)])]),bn])])]),gn,n("p",null,[s("详见："),n("a",yn,[s("ES6"),t(a)])]),wn,n("p",null,[s("详见："),n("a",xn,[s("手写instanceof方法"),t(a)])])])}const Bn=o(i,[["render",jn],["__file","03-面试笔记-JavaScript.html.vue"]]);export{Bn as default};
