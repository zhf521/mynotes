import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-55ddcb17.js";const p={},e=t(`<h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p><ul><li><p><code>+</code></p><ul><li>只有符号两边都是数字的时候才会进行加法运算</li><li>只要符号任意一边是字符串类型，就会进行字符串拼接</li></ul></li><li><p><code>-</code></p><ul><li>会执行减法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>*</code></p><ul><li>会执行乘法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>/</code></p><ul><li>会执行除法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>%</code></p><ul><li>会执行取余运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li></ul><p>注意：在计算失败时，显示的结果是 NaN（not a number）</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>赋值运算符：对变量进行赋值的运算符</p><p><code>=</code> 将等号右边的值赋予给左边, 要求左边必须是一个容器</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值</td></tr><tr><td>-+</td><td>减法赋值</td></tr><tr><td>*=</td><td>乘法赋值</td></tr><tr><td>/=</td><td>除法赋值</td></tr><tr><td>%=</td><td>取余赋值</td></tr></tbody></table><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>使用场景：比较两个数据是否相等，根据比较结果返回一个布尔值（true / false）</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&gt;</td><td>左边是否大于右边</td></tr><tr><td>&lt;</td><td>左边是否小于右边</td></tr><tr><td>&gt;=</td><td>左边是否大于或等于右边</td></tr><tr><td>&lt;=</td><td>左边是否小于或等于右边</td></tr><tr><td>===</td><td>左右两边是否<code>类型</code>和<code>值</code>都相等（重点）</td></tr><tr><td>==</td><td>左右两边<code>值</code>是否相等</td></tr><tr><td>!=</td><td>左右值不相等</td></tr><tr><td>!==</td><td>左右两边是否不全等</td></tr></tbody></table><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">// 比较运算符有隐式转换 把&#39;2&#39; 转换为 2  双等号 只判断值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
  <span class="token comment">// console.log(undefined === null)</span>
  <span class="token comment">// === 全等 判断 值 和 数据类型都一样才行</span>
  <span class="token comment">// 以后判断是否相等 请用 ===  </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// NaN 不等于任何人，包括他自己</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!==</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// true  </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------------------------&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span> <span class="token operator">&lt;</span> <span class="token string">&#39;aac&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------------------------&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值</p><table><thead><tr><th>符号</th><th>名称</th><th>日常读法</th><th>特点</th><th>口诀</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>并且</td><td>符号两边有一个假的结果为假</td><td>一假则假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者</td><td>符号两边有一个真的结果为真</td><td>一真则真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td><td>true变false false变true</td><td>真变假，假变真</td></tr></tbody></table><table><thead><tr><th>A</th><th>B</th><th>A &amp;&amp; B</th><th>A || B</th><th>!A</th></tr></thead><tbody><tr><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>false</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>false</td><td>true</td><td>false</td></tr><tr><td>true</td><td>true</td><td>true</td><td>true</td><td>false</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 逻辑与 一假则假</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 逻辑或 一真则真</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 逻辑非  取反</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">6</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----------------&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑中断" tabindex="-1"><a class="header-anchor" href="#逻辑中断" aria-hidden="true">#</a> 逻辑中断</h3><p>断路：只存在于 <code>&amp;&amp;</code> 和 <code>||</code> 中，当满足一定条件会让右边代码不执行</p><table><thead><tr><th>符号</th><th>短路条件</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>左边为 false 就断路</td></tr><tr><td>||</td><td>左边为 true 就断路</td></tr></tbody></table><p>原因：通过左边能得到整个式子的结果，因此没必要再判断右边</p><p>运算结果：无论 <code>&amp;&amp;</code> 还是 <code>||</code>，运算结果都是最后被执行的表达式值，一般用在变量赋值</p><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符优先级" tabindex="-1"><a class="header-anchor" href="#逻辑运算符优先级" aria-hidden="true">#</a> 逻辑运算符优先级</h3><p>！&gt; &amp;&amp; &gt; ||</p><h2 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符" aria-hidden="true">#</a> 自增自减运算符</h2><ul><li><p><code>++</code></p><ul><li><p>进行自增运算</p></li><li><p>分成两种，<strong>前置++</strong> 和 <strong>后置++</strong></p><ul><li><p>前置++，会先把值自动 +1，再返回</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span>
<span class="token comment">// 会返回 11，并且把 a 的值变成 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后置++，会先把值返回，再自动+1</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token comment">// 会返回 10，然后把 a 的值变成 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p><code>--</code></p><ul><li><p>进行自减运算</p></li><li><p>分成两种，<strong>前置--</strong> 和 <strong>后置--</strong></p></li><li><p>和 <code>++</code> 运算符道理一样</p></li></ul></li></ul><h2 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h2><p>三元运算，就是用 <strong>两个符号</strong> 组成一个语句</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>条件 <span class="token operator">?</span> 条件为 <span class="token boolean">true</span> <span class="token literal-property property">的时候执行</span> <span class="token operator">:</span> 条件为 <span class="token boolean">false</span> 的时候执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;已经成年&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;没有成年&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","08-JavaScript-运算符.html.vue"]]);export{d as default};
