import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c as t,d as e,e as n,a as c,b as a}from"./app-03e5850a.js";const l={},p=a(`<h2 id="c-c-的编译过程" tabindex="-1"><a class="header-anchor" href="#c-c-的编译过程" aria-hidden="true">#</a> C/C++的编译过程</h2><p>从 <code>.c</code> 或 <code>.cpp</code> 文件通过 <code>编译器</code> 来生成 <code>.exe</code> 文件（可执行程序）</p><p>编译器将执行以下步骤</p><ol><li>预编译 将 <code>.c </code> 中的头文件展开、宏展开，生成的文件是 <code>.i</code> 文件</li><li>编译 将预处理之后的 <code>.i</code> 文件生成 <code>.s</code> 汇编文件</li><li>汇编 将 <code>.s</code> 汇编文件生成 <code>.o</code> 目标文件</li><li>链接 将 <code>.o</code> 文件链接成目标文件</li></ol><p>使用命令行为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> C++文件目录
$ g++ <span class="token parameter variable">-c</span> test.cpp
$ g++ test.o
$ ./a.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>-o</code> 来自定义目标文件的名字</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> C++文件目录
$ g++ <span class="token parameter variable">-c</span> test.cpp <span class="token parameter variable">-o</span> a.o
$ g++ a.o <span class="token parameter variable">-o</span> test.exe
$ ./test.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或直接使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> C++文件目录
$ g++ test.cpp
$ ./a.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>-o</code> 来自定义目标文件的名字</p><h2 id="gcc-编译器下载和配置" tabindex="-1"><a class="header-anchor" href="#gcc-编译器下载和配置" aria-hidden="true">#</a> GCC 编译器下载和配置</h2><blockquote><p>GCC 中 C 语言编译器是 gcc，c++编译器是 g++，调试器是 gdb</p></blockquote>`,13),r={href:"https://lestore.lenovo.com/detail/L101412",target:"_blank",rel:"noopener noreferrer"},u=a(`<h2 id="vscode-配置-c-c" tabindex="-1"><a class="header-anchor" href="#vscode-配置-c-c" aria-hidden="true">#</a> VSCode 配置 C/C++</h2><ol><li>下载 C/C++插件</li></ol><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C01.png" alt="VSCode和C01.png" tabindex="0" loading="lazy"><figcaption>VSCode和C01.png</figcaption></figure><p>下载完成后重启 VSCode</p><ol start="2"><li>配置 新建文件夹（用来放 VSCode 的项目，<mark>必须是英文</mark>）</li><li>在文件夹下创建一个 <code>test1.c</code> 文件 代码如下：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你好\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个 <code>test2.cpp</code> 文件 代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World 哈哈\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行,<mark>选择 g++编译器</mark>，会在文件夹中自动创建 <code>.vscode</code> 文件夹 4. 测试是否成功 5. 设置外部窗口执行 点击右上角齿轮按钮</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C02.png" alt="VSCode和C02.png" tabindex="0" loading="lazy"><figcaption>VSCode和C02.png</figcaption></figure><p>点击生成和调试活动文件</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C03.png" alt="VSCode和C03.png" tabindex="0" loading="lazy"><figcaption>VSCode和C03.png</figcaption></figure><p>此时 <code>.vscode</code> 文件夹中出现 <code>launch.json</code> 文件 在 <code>launch.json</code> 文件中设置 <code>&quot;externalConsole&quot;: false,</code> 将 false 改为 true 6. 中文乱码解决 在 <code>tasks.json</code> 文件中找到 <code>&quot;\${fileDirname}\\\\\${fileBasenameNoExtension}.exe&quot;</code>, 在其后面添加 <code>,</code> 然后下一行添加 <code>&quot;-fexec-charset=GBK&quot;</code> 即可 9. 设置隐藏. exe 文件 点击设置，搜索：Files: Exclude</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C04.png" alt="VSCode和C04.png" tabindex="0" loading="lazy"><figcaption>VSCode和C04.png</figcaption></figure><p>点击添加模式，添加</p><p>例如：<code>**/*.exe</code> <code>**/*.class</code></p><h2 id="使用命令行进行多文件编译" tabindex="-1"><a class="header-anchor" href="#使用命令行进行多文件编译" aria-hidden="true">#</a> 使用命令行进行多文件编译</h2><p>文件目录结构如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>D:.
│  main.cpp
│
├─include
│      fun.h
│
└─src
        fun.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ g++ .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>fun.cpp .<span class="token punctuation">\\</span>main.cpp <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span> -I.<span class="token punctuation">\\</span>include<span class="token punctuation">\\</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在目录中会生成名称为 test 的可执行文件</p><h2 id="配置-cmake" tabindex="-1"><a class="header-anchor" href="#配置-cmake" aria-hidden="true">#</a> 配置 CMake</h2><h3 id="cmake-环境配置" tabindex="-1"><a class="header-anchor" href="#cmake-环境配置" aria-hidden="true">#</a> CMake 环境配置</h3>`,24),m={href:"https://cmake.org/download/",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>安装过程中注意勾选添加系统环境变量</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C05.png" alt="VSCode和C05.png" tabindex="0" loading="lazy"><figcaption>VSCode和C05.png</figcaption></figure><p>安装插件 CMake 和 CMake Tools</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/VSCode和C06.png" alt="VSCode和C06.png" tabindex="0" loading="lazy"><figcaption>VSCode和C06.png</figcaption></figure><p>安装完成后重启即可</p><h3 id="cmake-使用" tabindex="-1"><a class="header-anchor" href="#cmake-使用" aria-hidden="true">#</a> CMake 使用</h3><h4 id="单文件编译" tabindex="-1"><a class="header-anchor" href="#单文件编译" aria-hidden="true">#</a> 单文件编译</h4><p>在项目文件中创建一个 <code>CMakeLists.txt</code> 文件，注意，<mark>名称不能改变，区分大小写</mark></p><p>首先进入文件，文件第一行（第一行必须填写）填写本项目对 CMake 最低版本的要求</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 本项目对 CMake 最低版本的要求</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> 版本号<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注：使用 <code>cmake -version</code> 命令可以查看当前设备的版本号</p><p>第二行我们编写项目名称</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 项目名称</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>项目名称<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令会创建项目本身，并指定项目名称，每个 CMakeLists 文件只能定义一个项目</p><p>第三行我们编写生成可执行文件的名称和包含的文件</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 将源文件编译成一个可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>可执行文件名称 源文件<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 将名为 main.cpp 的源文件编译成一个名称为 myProject 的可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>myProject main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>以上三行是必须的</mark></p><p>然后使用快捷键 <code>ctrl+shift+p</code>, 运行 <code>CMake config</code>, 等待配置完成即可</p><p>然后运行 <code>CMake build</code></p><p>以上是简单的单文件的编译</p><h4 id="多文件编译" tabindex="-1"><a class="header-anchor" href="#多文件编译" aria-hidden="true">#</a> 多文件编译</h4><p>文件目录结构如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>D:.
│  main.cpp
│
├─include
│      fun.h
│
└─src
        fun.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目文件中创建一个 <code>CMakeLists.txt</code> 文件，注意，<mark>名称不能改变，区分大小写</mark></p><p><code>CMakeLists.txt</code> 文件中的内容如下</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.25.1</span><span class="token punctuation">)</span>

<span class="token keyword">project</span><span class="token punctuation">(</span>myProject<span class="token punctuation">)</span>

<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>src SRC_SUB<span class="token punctuation">)</span>

<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. SRC_CUR<span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Project <span class="token punctuation">\${</span>SRC_SUB<span class="token punctuation">}</span> <span class="token punctuation">\${</span>SRC_CUR<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">include_directories</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>cmake_minimum_required (VERSION 版本号)</code> : 本项目对 CMake 最低版本的要求</li><li><code>project()</code> ：设置项目名称，参数可以随意指定</li><li><code>aux_source_directory (dir VAR)</code> : 搜索 <code>dir</code> 目录下所有的源文件，并将结果列表存储在变量 <code>VAR</code> 中</li><li><code>add_executable (target src)</code> : 指定使用源文件 <code>src</code>，生成可执行程序 <code>target</code> , <code>\${变量名}</code> 是取变量的值</li><li><code>include_directories (headDir)</code> : 设置包含的头文件目录</li></ul><p>然后使用快捷键 <code>ctrl+shift+p</code>, 运行 <code>CMake config</code>, 等待配置完成即可</p><p>然后运行 <code>CMake build</code></p><p>或者使用命令行 在终端中进入 <code>build</code> 目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> build
$ cmake <span class="token punctuation">..</span>
$ mingw32-make.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终可执行程序就生成到 <code>build</code> 目录中了</p>`,34);function k(b,g){const s=d("ExternalLinkIcon");return o(),t("div",null,[p,e("p",null,[n("下载 TDM-GCC 联想应用商店下载链接："),e("a",r,[n("TDM-GCC-联想应用商店"),c(s)]),n(" 下载安装即可")]),u,e("p",null,[n("下载 CMake "),e("a",m,[n("Download | CMake"),c(s)])]),v])}const f=i(l,[["render",k],["__file","03-VSCode配置C和CPP环境.html.vue"]]);export{f as default};
