import{_ as o,r as t,o as c,c as i,d as e,e as n,a as s,b as d}from"./app-f469b6d2.js";const l={},r=d(`<h2 id="_1-包的概念" tabindex="-1"><a class="header-anchor" href="#_1-包的概念" aria-hidden="true">#</a> 1. 包的概念</h2><p>包的英文单词是 <code>package</code> ，代表了一组特定功能的源码集合</p><p>将模块，代码，其他资料整合成一个文件夹，这个文件夹就叫包</p><p>包分类：</p><ul><li>项目包：主要用于编写项目和业务逻辑</li><li>软件包：封装工具和方法进行使用</li></ul><p>包要求：根目录中，必须有 <code>package.json</code> 文件（记录包的清单信息）</p><p><code>package.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1-npm&quot;</span><span class="token punctuation">,</span> 		#包的名字
	<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span> 	#包的版本
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> 		#包的描述
	<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span> 	#包的入口文件
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 		    #脚本配置
		<span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> 			#作者
	<span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span> 		#开源证书
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包使用：在引入一个包文件夹到代码中，默认引入的是包文件节下的 <code>index.js</code> 模块文件里导出的对象，如果没有<code>index.js</code> 文件，则会引入 <code>package.json</code> 里 main 属性指定的文件模块导出的对象</p><h2 id="_2-包管理工具" tabindex="-1"><a class="header-anchor" href="#_2-包管理工具" aria-hidden="true">#</a> 2. 包管理工具</h2><p>管理包的应用软件，可以对包进行 <code>下载安装</code> ， <code>更新</code> ， <code>删除</code>， <code>上传</code>等操作</p><p>借助包管理工具，可以快速开发项目，提升开发效率</p><p>包管理工具是一个通用的概念，很多编程语言都有包管理工具</p><p>前端常用的包管理工具：</p><ul><li>npm</li><li>yarn</li><li>cnpm</li></ul><h2 id="_3-npm" tabindex="-1"><a class="header-anchor" href="#_3-npm" aria-hidden="true">#</a> 3. npm</h2><blockquote><p>npm 全称 <code>Node Package Manager</code> ，翻译为中文意思是『Node 的包管理工具』</p></blockquote><p>npm 是 node.js 官方内置的包管理工具</p><h3 id="_3-1-npm的安装" tabindex="-1"><a class="header-anchor" href="#_3-1-npm的安装" aria-hidden="true">#</a> 3.1 npm的安装</h3><p>node.js 在安装时会 <code>自动安装 npm</code> ，所以如果你已经安装了 node.js，可以直接使用 npm</p><p>可以通过 <code>npm -v</code> 查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p><h3 id="_3-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-2-基本使用" aria-hidden="true">#</a> 3.2 基本使用</h3><h4 id="_3-2-1-初始化" tabindex="-1"><a class="header-anchor" href="#_3-2-1-初始化" aria-hidden="true">#</a> 3.2.1 初始化</h4><p>创建一个空目录，然后以此目录作为工作目录启动命令行工具，执行 <code>npm init</code></p><p><code>npm init</code> 命令的作用是将文件夹初始化为一个『包』，交互式创建<code>package.json文件</code></p><p><code>package.json</code> 是包的配置文件，每个包都必须要有 <code>package.json</code></p><blockquote><p>初始化的过程中还有一些注意事项：</p><ol><li>package name (<code>包名</code>) 不能使用中文、大写，默认值是<code>文件夹的名称</code>，所以文件夹名称也不能使用中文和大写</li><li>version (<code>版本号</code>)要求 <code>x.x.x</code> 的形式定义，<code>x</code> 必须是数字，默认值是 <code>1.0.0</code></li><li>ISC 证书与 MIT 证书功能上是相同的</li><li><code>package.json</code> 可以手动创建与修改</li><li>可以使用 <code>npm init -y</code> 或者 <code>npm init --yes</code> 极速创建 <code>package.json</code></li></ol></blockquote><h4 id="_3-2-2-搜索包" tabindex="-1"><a class="header-anchor" href="#_3-2-2-搜索包" aria-hidden="true">#</a> 3.2.2 搜索包</h4><p>搜索包的方式有两种</p>`,29),p=e("li",null,[e("p",null,[n("命令行："),e("code",null,"npm s/search 关键字")])],-1),u=e("code",null,"网站搜索",-1),h={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},m=d(`<h4 id="_3-2-3-下载安装包" tabindex="-1"><a class="header-anchor" href="#_3-2-3-下载安装包" aria-hidden="true">#</a> 3.2.3 下载安装包</h4><p>我们可以通过 <code>npm install</code> 或 <code>npm i</code> 命令安装包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 语法</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>

<span class="token comment"># 示例</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token function">uniq</span>
<span class="token function">npm</span> i <span class="token function">uniq</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行之后文件夹下会增加两个资源</p><ul><li><code>node_modules</code> 文件夹存放下载的包</li><li><code>package-lock.json</code> 包的锁文件，用来锁定包的版本</li></ul><blockquote><p>安装 uniq 之后， uniq 就是当前这个包的一个 <code>依赖包</code> ，有时会简称为 <code>依赖</code></p><p>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说B 是 A 的一个依赖包，也会说A 依赖 B</p></blockquote><h4 id="_3-2-4-require导入npm包基本流程" tabindex="-1"><a class="header-anchor" href="#_3-2-4-require导入npm包基本流程" aria-hidden="true">#</a> 3.2.4 require导入npm包基本流程</h4><ol><li>在当前文件夹下 <code>node_modules</code> 中寻找同名的文件夹</li><li>在上级目录中下的 <code>node_modules</code> 中寻找同名的文件夹，直至找到磁盘根目录</li></ol><h3 id="_3-3-生产环境与开发环境" tabindex="-1"><a class="header-anchor" href="#_3-3-生产环境与开发环境" aria-hidden="true">#</a> 3.3 生产环境与开发环境</h3><p><code>开发环境</code> 是程序员专门用来写代码的环境，一般是指程序员的电脑，开发环境的项目一般只能程序员自己访问</p><p><code>生产环境</code> 是项目代码正式运行的环境，一般是指正式的服务器电脑，生产环境的项目一般每个客户都可以访问</p><h3 id="_3-4-生产依赖与开发依赖" tabindex="-1"><a class="header-anchor" href="#_3-4-生产依赖与开发依赖" aria-hidden="true">#</a> 3.4 生产依赖与开发依赖</h3><p>我们可以在安装时设置选项来区分依赖的类型，目前分为两类：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td>生产依赖</td><td><code>npm i -S &lt;包名&gt;</code> <br><code>npm i --save &lt;包名&gt;</code></td><td><code>-S</code> 等效于 <code>--save</code>，<code>-S</code> 是默认选项<br>包信息保存在 <code>package.json</code> 中 <code>dependencies</code> 属性里</td></tr><tr><td>开发依赖</td><td><code>npm i -D &lt;包名&gt;</code><br><code>npm i --save-dev &lt;包名&gt;</code></td><td><code>-D</code> 等效于 <code>--save-dev</code><br>包信息保存在 <code>package.json</code> 中 <code>devDependencies</code> 属性里</td></tr></tbody></table><blockquote><p>举个例子方便大家理解，比如说做蛋炒饭需要<code>大米</code>，<code>油</code>，<code>葱</code>，<code>鸡蛋</code>，<code>锅</code>，<code>煤气</code>，<code>铲子</code>等</p><p>其中<code>锅</code>， <code>煤气</code>， <code>铲子</code>属于开发依赖，只在制作阶段使用</p><p>而 <code>大米</code>， <code>油</code>， <code>葱</code>， <code>鸡蛋</code>属于生产依赖，在制作与最终食用都会用到</p><p>所以 <code>开发依赖</code> 是只在开发阶段使用的依赖包，而 <code>生产依赖</code> 是开发阶段和最终上线运行阶段都用到的依赖包</p></blockquote><h3 id="_3-5-全局安装" tabindex="-1"><a class="header-anchor" href="#_3-5-全局安装" aria-hidden="true">#</a> 3.5 全局安装</h3><p>我们可以执行安装选项 <code>-g</code> 进行全局安装</p><p>例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>全局安装完成之后就可以在命令行的任何位置运行 <code>nodemon</code> 命令</p><p>该命令的作用是自动重启 node 应用程序</p><blockquote><p>说明：</p><ul><li>全局安装的命令不受工作目录位置影响</li><li>可以通过 <code>npm root -g</code> 可以查看全局安装包的位置</li><li>不是所有的包都适合全局安装，只有全局类的工具才适合，可以通过查看包的官方文档来确定安装方式</li></ul></blockquote><h4 id="_3-5-1-修改windows执行策略" tabindex="-1"><a class="header-anchor" href="#_3-5-1-修改windows执行策略" aria-hidden="true">#</a> 3.5.1 修改windows执行策略</h4><p>windows默认不允许npm全局命令执行脚本文件，所以需要修改执行策略</p><ol><li><p>以管理员身份打开 <code>powershell</code> 命令行</p></li><li><p>键入命令 <code>set-ExecutionPolicy remoteSigned</code></p></li><li><p>键入<code>A</code>然后敲回车</p></li><li><p>如果不生效，可以尝试重启 vscode</p></li></ol><h4 id="_3-5-2-环境变量path" tabindex="-1"><a class="header-anchor" href="#_3-5-2-环境变量path" aria-hidden="true">#</a> 3.5.2 环境变量Path</h4><p>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</p><blockquote><p>补充说明：</p><ul><li>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境 变量Path中</li><li>windows下查找命令的所在位置 <ul><li>cmd命令行中执行<code>where nodemon</code></li><li>powershell命令行执行 <code>get-command nodemon</code></li></ul></li></ul></blockquote><h3 id="_3-6-安装包依赖" tabindex="-1"><a class="header-anchor" href="#_3-6-安装包依赖" aria-hidden="true">#</a> 3.6 安装包依赖</h3><p>在项目协作中有一个常用的命令就是 <code>npm i</code>，通过该命令可以依据 <code>package.json</code> 和 <code>package-lock.json</code> 的依赖声明安装项目依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i
<span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>node_modules 文件夹大多数情况都不会存入版本库</p></blockquote><h3 id="_3-7-安装指定版本的包" tabindex="-1"><a class="header-anchor" href="#_3-7-安装指定版本的包" aria-hidden="true">#</a> 3.7 安装指定版本的包</h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 命令</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>包名@版本号<span class="token operator">&gt;</span>

<span class="token comment">## 示例</span>
<span class="token function">npm</span> i jquery@1.11.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-删除依赖" tabindex="-1"><a class="header-anchor" href="#_3-8-删除依赖" aria-hidden="true">#</a> 3.8 删除依赖</h3><p>项目中可能需要删除某些不需要的包，可以使用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 局部删除</span>
<span class="token function">npm</span> remove <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>
<span class="token function">npm</span> r <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>

<span class="token comment">## 全局删除</span>
<span class="token function">npm</span> remove <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-配置命令别名" tabindex="-1"><a class="header-anchor" href="#_3-9-配置命令别名" aria-hidden="true">#</a> 3.9 配置命令别名</h3><p>通过配置命令别名可以更简单的执行命令</p><p>配置 <code>package.json</code> 中的 <code>scripts</code> 属性</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	.
	.
	.
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	.
	.
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，可以使用别名执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run server
<span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过 <code>start</code> 别名比较特别，使用时可以省略 <code>run</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>补充说明：</p><ul><li><code>npm start</code> 是项目中常用的一个命令，一般用来启动项目</li><li><code>npm run</code> 有自动向上级目录查找的特性，跟 <code>require</code> 函数也一样</li><li>对于陌生的项目，我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作</li></ul></blockquote><h2 id="_4-cnpm" tabindex="-1"><a class="header-anchor" href="#_4-cnpm" aria-hidden="true">#</a> 4. cnpm</h2><p>cnpm 是一个淘宝构建的<code>npmjs.com</code>的完整镜像，也称为淘宝镜像</p>`,49),b={href:"https://npmmirror.com/",target:"_blank",rel:"noopener noreferrer"},v=d(`<p>cnpm 服务部署在国内阿里云服务器上，可以提高包的下载速度</p><p>官方也提供了一个全局工具包 <code>cnpm</code> ，操作命令与 npm 大体相同</p><h3 id="_4-1-cnpm的安装" tabindex="-1"><a class="header-anchor" href="#_4-1-cnpm的安装" aria-hidden="true">#</a> 4.1 cnpm的安装</h3><p>我们可以通过 npm 来安装 cnpm 工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-操作命令" tabindex="-1"><a class="header-anchor" href="#_4-2-操作命令" aria-hidden="true">#</a> 4.2 操作命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>cnpm init</code> / <code>cnpm init</code></td></tr><tr><td>安装包</td><td><code>cnpm i &lt;包名&gt;</code><br><code>cnpm i -S &lt;包名&gt;</code><br><code>cnpm i -D &lt;包名&gt;</code><br><code>cnpm i -g &lt;包名&gt;</code></td></tr><tr><td>安装项目依赖</td><td><code>cnpm i</code></td></tr><tr><td>删除</td><td><code>cnpm r &lt;包名&gt;</code></td></tr></tbody></table><h3 id="_4-3-npm配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_4-3-npm配置淘宝镜像" aria-hidden="true">#</a> 4.3 npm配置淘宝镜像</h3><p>用 npm 也可以使用淘宝镜像，配置的方式有两种：</p><ul><li>直接配置</li><li>工具配置</li></ul><h4 id="_4-3-1-直接配置" tabindex="-1"><a class="header-anchor" href="#_4-3-1-直接配置" aria-hidden="true">#</a> 4.3.1 直接配置</h4><p>执行如下命令即可完成配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-3-2-工具配置" tabindex="-1"><a class="header-anchor" href="#_4-3-2-工具配置" aria-hidden="true">#</a> 4.3.2 工具配置</h4><p>使用 <code>nrm</code> 配置 npm 的镜像地址npm registry manager</p><ol><li><p>安装 nrm</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nrm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nrm use taobao
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检查是否配置成功（选做）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查 registry 地址是否为<code>https://registry.npmmirror.com/</code>, 如果是则表明成功</p></li></ol><blockquote><p>补充说明：</p><ol><li>建议使用第二种方式进行镜像配置，因为后续修改起来会比较方便</li><li>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以npm 的使用率还是高于 cnpm</li></ol></blockquote><h2 id="_5-yarn" tabindex="-1"><a class="header-anchor" href="#_5-yarn" aria-hidden="true">#</a> 5. yarn</h2><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具</p>`,19),g={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},k=d(`<p>yarn 官方宣称的一些特点</p><ul><li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快</li><li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li><li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li></ul><h3 id="_5-1-yarn的安装" tabindex="-1"><a class="header-anchor" href="#_5-1-yarn的安装" aria-hidden="true">#</a> 5.1 yarn的安装</h3><p>我们可以使用 npm 安装 yarn</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-操作命令" tabindex="-1"><a class="header-anchor" href="#_5-2-操作命令" aria-hidden="true">#</a> 5.2 操作命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>yarn init</code> / <code>yarn init -y</code></td></tr><tr><td>安装包</td><td><code>yarn add &lt;包名&gt;</code> 生产依赖<br><code>yarn add &lt;包名&gt; --dev</code> 开发依赖<br><code>yarn global add &lt;包名&gt;</code> 全局安装</td></tr><tr><td>删除包</td><td><code>yarn remove &lt;包名&gt;</code> 删除项目依赖包<br><code>yarn global remove &lt;包名&gt;</code> 全局删除包</td></tr><tr><td>安装项目依赖</td><td><code>yarn</code></td></tr><tr><td>运行命令别名</td><td><code>yarn &lt;别名&gt;</code> # 不需要添加 <code>run</code></td></tr></tbody></table><blockquote><p>思考题：</p><p>这里有个小问题就是全局安装的包不可用，yarn 全局安装包的位置可以通过 <code>yarn global bin</code>来查看</p><p>那你有没有办法使 yarn 全局安装的包能够正常运行？</p><ul><li>配置 path 环境</li></ul></blockquote><h3 id="_5-3-yarn配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_5-3-yarn配置淘宝镜像" aria-hidden="true">#</a> 5.3 yarn配置淘宝镜像</h3><p>可以通过如下命令配置淘宝镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过 <code>yarn config list</code> 查看 yarn 的配置项</p><h3 id="_5-4-npm和yarn选择" tabindex="-1"><a class="header-anchor" href="#_5-4-npm和yarn选择" aria-hidden="true">#</a> 5.4 npm和yarn选择</h3><p>大家可以根据不同的场景进行选择</p><ol><li><p>个人项目</p><p>如果是个人项目，哪个工具都可以，可以根据自己的喜好来选择</p></li><li><p>公司项目 如果是公司要根据项目代码来选择，可以通过锁文件判断项目的包管理工具</p><ul><li>npm 的锁文件为 <code>package-lock.json</code></li><li>yarn 的锁文件为 <code>yarn.lock</code></li></ul></li></ol><blockquote><p>包管理工具不要混着用，切记，切记，切记</p></blockquote><h2 id="_6-管理发布包" tabindex="-1"><a class="header-anchor" href="#_6-管理发布包" aria-hidden="true">#</a> 6. 管理发布包</h2><h3 id="_6-1-创建与发布" tabindex="-1"><a class="header-anchor" href="#_6-1-创建与发布" aria-hidden="true">#</a> 6.1 创建与发布</h3><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p>`,19),_=e("li",null,[e("p",null,[n("创建文件夹，并创建文件 "),e("code",null,"index.js"),n("， 在文件中声明函数，使用 "),e("code",null,"module.exports"),n(" 暴露")])],-1),f=e("li",null,[e("p",null,[n("npm 初始化工具包，"),e("code",null,"package.json"),n("填写包的信息 (包的名字是唯一的)")])],-1),y={href:"https://www.npmjs.com/signup",target:"_blank",rel:"noopener noreferrer"},q=d("<li><p>激活账号（一定要激活账号）</p></li><li><p>修改为官方的官方镜像 (命令行中运行 <code>nrm use npm</code> )</p></li><li><p>命令行下 <code>npm login</code> 填写相关用户信息</p></li><li><p>命令行下 <code>npm publish</code> 提交包</p></li>",4),x=d(`<h3 id="_6-2-更新包" tabindex="-1"><a class="header-anchor" href="#_6-2-更新包" aria-hidden="true">#</a> 6.2 更新包</h3><p>后续可以对自己发布的包进行更新，操作步骤：</p><ol><li><p>更新包中的代码</p></li><li><p>测试代码是否可用</p></li><li><p>修改 <code>package.json</code> 中的版本号</p></li><li><p>发布更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_6-3-删除包" tabindex="-1"><a class="header-anchor" href="#_6-3-删除包" aria-hidden="true">#</a> 6.3 删除包</h3><p>执行如下命令删除包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> unpublish <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>删除包需要满足一定的条件：</p><ul><li>你是包的作者</li><li>发布小于 24 小时</li><li>大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者</li></ul></blockquote><h2 id="_7-扩展内容" tabindex="-1"><a class="header-anchor" href="#_7-扩展内容" aria-hidden="true">#</a> 7. 扩展内容</h2><p>在很多语言中都有包管理工具，比如：</p><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>Go</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm/yarn/cnpm/other</td></tr><tr><td>Ruby</td><td>rubyGems</td></tr></tbody></table><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是<code>软件包</code></p>`,11),j=e("thead",null,[e("tr",null,[e("th",null,"操作系统"),e("th",null,"包管理工具"),e("th",null,"网址")])],-1),w=e("td",null,"Centos",-1),S=e("td",null,"yum",-1),P={href:"https://packages.debian.org/stable/",target:"_blank",rel:"noopener noreferrer"},N=e("td",null,"Ubuntu",-1),B=e("td",null,"apt",-1),A={href:"https://packages.ubuntu.com/",target:"_blank",rel:"noopener noreferrer"},E=e("td",null,"MacOS",-1),I=e("td",null,"homebrew",-1),J={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},C=e("td",null,"Windows",-1),D=e("td",null,"chocolatey",-1),M={href:"https://chocolatey.org/",target:"_blank",rel:"noopener noreferrer"};function V(G,L){const a=t("ExternalLinkIcon");return c(),i("div",null,[r,e("ol",null,[p,e("li",null,[e("p",null,[u,n("："),e("a",h,[n("npm"),s(a)])])])]),m,e("p",null,[n("官网："),e("a",b,[n("npmmirror 镜像站"),s(a)])]),v,e("p",null,[n("官网："),e("a",g,[n("Yarn - Package Manager"),s(a)])]),k,e("ol",null,[_,f,e("li",null,[e("p",null,[n("注册账号："),e("a",y,[n("npm | Sign Up"),s(a)])])]),q]),x,e("table",null,[j,e("tbody",null,[e("tr",null,[w,S,e("td",null,[e("a",P,[n("https://packages.debian.org/stable/"),s(a)])])]),e("tr",null,[N,B,e("td",null,[e("a",A,[n("https://packages.ubuntu.com/"),s(a)])])]),e("tr",null,[E,I,e("td",null,[e("a",J,[n("https://brew.sh/"),s(a)])])]),e("tr",null,[C,D,e("td",null,[e("a",M,[n("https://chocolatey.org/"),s(a)])])])])])])}const U=o(l,[["render",V],["__file","07-NodeJS-包管理工具.html.vue"]]);export{U as default};
