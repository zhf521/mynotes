import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,d as n,e as a,a as c,b as i}from"./app-97e7bac3.js";const l={},d=i(`<h2 id="margin-负值运用" tabindex="-1"><a class="header-anchor" href="#margin-负值运用" aria-hidden="true">#</a> margin 负值运用</h2><ol><li>让每个盒子 margin 往左侧移动 -1 px 正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如果有定位，则加（z-index）</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">ul li</span> <span class="token punctuation">{</span>
	<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
	<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
	<span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
	<span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
	<span class="token property">margin-left</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">ul li:hover</span> <span class="token punctuation">{</span>
	<span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文字围绕浮动元素" tabindex="-1"><a class="header-anchor" href="#文字围绕浮动元素" aria-hidden="true">#</a> 文字围绕浮动元素</h2><p>运用浮动元素不会压住文字的特性实现</p><h2 id="行内块巧妙运用" tabindex="-1"><a class="header-anchor" href="#行内块巧妙运用" aria-hidden="true">#</a> 行内块巧妙运用</h2><p>页面底部页码栏</p><p>页码在页面中间显示:</p><ol><li>把这些链接盒子转换为行内块，之后给父级指定 <code>text-align: center;</code></li><li>利用行内块元素中间有缝隙，并且给父级添加 <code>text-align: center;</code> 行内块元素会水平会居中</li></ol><h2 id="css-三角形" tabindex="-1"><a class="header-anchor" href="#css-三角形" aria-hidden="true">#</a> CSS 三角形</h2><p>网页中常见一些三角形，使用 CSS 直接画出来就可以，不必做成图片或者字体图标</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.box1</span> <span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">border-top</span><span class="token punctuation">:</span> 10px solid pink<span class="token punctuation">;</span>
	<span class="token property">border-right</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>
	<span class="token property">border-bottom</span><span class="token punctuation">:</span> 10px solid blue<span class="token punctuation">;</span>
	<span class="token property">border-left</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box2</span> <span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
	<span class="token property">border-top-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
	<span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS布局01.png" alt="CSS布局01.png" tabindex="0" loading="lazy"><figcaption>CSS布局01.png</figcaption></figure><ol><li>我们用 CSS 边框可以模拟三角效果</li><li>宽度高度为 0</li><li>我们 4 个边框都要写，只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性低版本的浏览器，加上 <code>font-size: 0;</code> <code>line-height: 0;</code></li></ol><h2 id="关于默认宽度" tabindex="-1"><a class="header-anchor" href="#关于默认宽度" aria-hidden="true">#</a> 关于默认宽度</h2><p>所谓的默认宽度，就是不设置 width 属性时，元素所呈现出来的宽度 总宽度 = 父的content - 自身的左右margin 内容区的宽度 = 父的content - 自身的左右margin - 自身的左右border - 自身的左右padding</p><h2 id="行内元素、行内块元素-可以被父元素当做文本处理" tabindex="-1"><a class="header-anchor" href="#行内元素、行内块元素-可以被父元素当做文本处理" aria-hidden="true">#</a> 行内元素、行内块元素，可以被父元素当做文本处理</h2><h2 id="如何让子元素在父亲中水平居中" tabindex="-1"><a class="header-anchor" href="#如何让子元素在父亲中水平居中" aria-hidden="true">#</a> 如何让子元素在父亲中水平居中</h2><p>若子元素为块元素，给父元素加上： <code>margin:0 auto;</code> 若子元素为行内元素、行内块元素，给父元素加上： <code>text-align:center;</code></p><h2 id="如何让子元素-在父亲中垂直居中" tabindex="-1"><a class="header-anchor" href="#如何让子元素-在父亲中垂直居中" aria-hidden="true">#</a> 如何让子元素，在父亲中垂直居中</h2><p>（若想绝对垂直居中，父元素 font-size 设置为 0）</p><p>若子元素为块元素，给子元素加上： <code>margin-top</code> ，值为：<code>(父元素content －子元素盒子总高) / 2</code> 若子元素为行内元素、行内块元素：让父元素的 <code>height = line-height</code> ，每个子元素都加上： <code>vertical-align: middle;</code></p><h2 id="元素之间的空白问题" tabindex="-1"><a class="header-anchor" href="#元素之间的空白问题" aria-hidden="true">#</a> 元素之间的空白问题</h2><p>产生原因：行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符 解决方案： 方案一： 去掉换行和空格（不推荐） 方案二： 给父元素设置 <code>font-size: 0</code> ，再给需要显示文字的元素，单独设置字体大小（推荐）</p><h2 id="行内块的幽灵空白问题" tabindex="-1"><a class="header-anchor" href="#行内块的幽灵空白问题" aria-hidden="true">#</a> 行内块的幽灵空白问题</h2><p>产生原因：行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的 解决方案： 方案一： 给行行内块设置 <code>vertical-align</code> ，值不为 baseline 即可，设置为 middel 、 bottom 、 top 均可 方案二： 若父元素中只有一张图片，设置图片为 <code>display: block;</code> 方案三： 给父元素设置 <code>font-size: 0;</code> 。如果该行内块内部还有文本，则需单独设置 <code>font-size</code></p><h2 id="常用布局名词" tabindex="-1"><a class="header-anchor" href="#常用布局名词" aria-hidden="true">#</a> 常用布局名词</h2><table><thead><tr><th>位置</th><th>名词</th></tr></thead><tbody><tr><td>顶部导航条</td><td><code>topbar</code></td></tr><tr><td>页头</td><td><code>header</code>、<code>page-header</code></td></tr><tr><td>导航</td><td><code>nav</code>、<code>navigator</code>、<code>navbar</code></td></tr><tr><td>搜索框</td><td><code>search</code>、<code>search-box</code></td></tr><tr><td>横幅、广告、宣传图</td><td><code>banner</code></td></tr><tr><td>主要内容</td><td><code>content</code>、<code>main</code></td></tr><tr><td>侧边栏</td><td><code>aside</code>、<code>sidebar</code></td></tr><tr><td>页脚</td><td><code>footer</code>、<code>page-footer</code></td></tr></tbody></table><h2 id="重置默认样式-css初始化" tabindex="-1"><a class="header-anchor" href="#重置默认样式-css初始化" aria-hidden="true">#</a> 重置默认样式（CSS初始化）</h2><p>很多元素都有默认样式，比如：</p><ol><li>p 元素有默认的上下 margin</li><li>h1~h6 标题也有上下 margin ，且字体加粗</li><li>body 元素有默认的 8px 外边距</li><li>超链接有默认的文字颜色和下划线</li><li>ul 元素有默认的左 pading</li><li>……</li></ol><h3 id="使用全局选择器" tabindex="-1"><a class="header-anchor" href="#使用全局选择器" aria-hidden="true">#</a> 使用全局选择器</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span> 
	<span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
	<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
	......
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset-css" tabindex="-1"><a class="header-anchor" href="#reset-css" aria-hidden="true">#</a> reset.css</h3><p>选择到具有默认样式的元素，清空其默认的样式</p><h3 id="normalize-css" tabindex="-1"><a class="header-anchor" href="#normalize-css" aria-hidden="true">#</a> Normalize.css</h3><p><code>Normalize.css</code> 是一种最新方案，它在清除默认样式的基础上，保留了一些有价值的默认样式</p>`,38),r={href:"http://necolas.github.io/normalize.css/",target:"_blank",rel:"noopener noreferrer"},u=n("p",null,[a("相对于 "),n("code",null,"reset.css"),a(" ， "),n("code",null,"Normalize.css"),a(" 有如下优点：")],-1),h=n("ol",null,[n("li",null,"保护了有价值的默认样式，而不是完全去掉它们"),n("li",null,"为大部分 HTML 元素提供一般化的样式"),n("li",null,"新增对 HTML5 元素的设置"),n("li",null,"对并集选择器的使用比较谨慎，有效避免调试工具杂乱")],-1);function k(v,g){const s=e("ExternalLinkIcon");return p(),o("div",null,[d,n("p",null,[a("官网地址："),n("a",r,[a("Normalize.css"),c(s)])]),u,h])}const x=t(l,[["render",k],["__file","11-CSS布局技巧.html.vue"]]);export{x as default};
