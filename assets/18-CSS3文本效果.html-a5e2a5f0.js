import{_ as t,o as e,c as d,b as a}from"./app-a1cb27f9.js";const r={},o=a(`<h2 id="_1-文本阴影" tabindex="-1"><a class="header-anchor" href="#_1-文本阴影" aria-hidden="true">#</a> 1. 文本阴影</h2><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">text-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊的距离</td></tr><tr><td>color</td><td>可选。阴影的颜色</td></tr></tbody></table><p>默认值：<code>text-shadow: none;</code> 表示没有阴影</p><h2 id="_2-文本换行" tabindex="-1"><a class="header-anchor" href="#_2-文本换行" aria-hidden="true">#</a> 2. 文本换行</h2><p>在 CSS3 中，我们可以使用 white-space 属性设置文本换行方式</p><p>常用值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>normal</td><td>文本超出边界自动换行，文本中的换行被浏览器识别为一个空格（默认值）</td></tr><tr><td>pre</td><td>原样输出，与 pre 标签的效果相同</td></tr><tr><td>pre-wrap</td><td>在 pre 效果的基础上，超出元素边界自动换行</td></tr><tr><td>pre-line</td><td>在 pre 效果的基础上，超出元素边界自动换行，且识别文本中的换行，空格会忽略</td></tr><tr><td>nowrap</td><td>强制不换行</td></tr></tbody></table><h2 id="_3-文本溢出" tabindex="-1"><a class="header-anchor" href="#_3-文本溢出" aria-hidden="true">#</a> 3. 文本溢出</h2><p>在 CSS3 中，我们可以使用 text-overflow 属性设置文本内容溢出时的呈现模式</p><p>常用值如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>clip</td><td>当内联内容溢出时，将溢出部分裁切掉（默认值）</td></tr><tr><td>ellipsis</td><td>当内联内容溢出块容器时，将溢出部分替换为 <code>…</code></td></tr></tbody></table><p>注意：要使得 text-overflow 属性生效，块容器必须显式定义 overflow 为非 visible 值， white-space 为 nowrap 值</p><h2 id="_4-文本修饰" tabindex="-1"><a class="header-anchor" href="#_4-文本修饰" aria-hidden="true">#</a> 4. 文本修饰</h2><p>CSS3 升级了 text-decoration 属性，让其变成了复合属性</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">text-decoration</span><span class="token punctuation">:</span> text-decoration-line || text-decoration-style || text-decoration-color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子属性及其含义：</p><ul><li><code>text-decoration-line</code> 设置文本装饰线的位置 <ul><li>none ： 指定文字无装饰 （默认值）</li><li>underline ： 指定文字的装饰是下划线</li><li>overline ： 指定文字的装饰是上划线</li><li>line-through ： 指定文字的装饰是贯穿线</li></ul></li><li><code>text-decoration-style</code> 文本装饰线条的形状 <ul><li>solid ： 实线 （默认）</li><li>double ： 双线</li><li>dotted ： 点状线条</li><li>dashed ： 虚线</li><li>wavy ： 波浪线</li></ul></li><li><code>text-decoration-color</code> 文本装饰线条的颜色</li></ul><h2 id="_5-文本描边" tabindex="-1"><a class="header-anchor" href="#_5-文本描边" aria-hidden="true">#</a> 5. 文本描边</h2><p>注意：文字描边功能仅 webkit 内核浏览器支持</p><ul><li><code>-webkit-text-stroke-width</code> ：设置文字描边的宽度，写长度值</li><li><code>-webkit-text-stroke-color</code> ：设置文字描边的颜色，写颜色值</li><li><code>-webkit-text-stroke</code> ：复合属性，设置文字描边宽度和颜色</li></ul>`,23),i=[o];function l(s,n){return e(),d("div",null,i)}const h=t(r,[["render",l],["__file","18-CSS3文本效果.html.vue"]]);export{h as default};
