import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,b as d}from"./app-2b375074.js";const l={},a=d(`<h2 id="元素的显示与隐藏" tabindex="-1"><a class="header-anchor" href="#元素的显示与隐藏" aria-hidden="true">#</a> 元素的显示与隐藏</h2><ul><li>目的：让一个元素在页面中消失或者显示出来</li><li>场景：类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现</li></ul><h3 id="display-显示" tabindex="-1"><a class="header-anchor" href="#display-显示" aria-hidden="true">#</a> display 显示</h3><ul><li>display 属性用于设置一个元素应如何显示</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> none； <span class="token comment">/* 隐藏对象 */</span>
display：block；<span class="token comment">/* 除了转换为块级元素之外，同时还有显示元素的意思 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特点： display 隐藏元素后，不再占有原来的位置</li></ul><h3 id="visibility-可见性" tabindex="-1"><a class="header-anchor" href="#visibility-可见性" aria-hidden="true">#</a> visibility 可见性</h3><ul><li>visibility 属性用于指定一个元素应可见还是隐藏</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>visibility：visible<span class="token punctuation">;</span> 　<span class="token comment">/* 元素可视 */</span>
visibility：hidden<span class="token punctuation">;</span> 　 <span class="token comment">/* 元素隐藏 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特点：visibility 隐藏元素后，继续占有原来的位置</li><li>如果隐藏元素想要原来位置，就用 <code>visibility:hidden;</code></li><li>如果隐藏元素不想要原来位置，就用 <code>display:none;</code></li></ul><h3 id="overflow-溢出" tabindex="-1"><a class="header-anchor" href="#overflow-溢出" aria-hidden="true">#</a> overflow 溢出</h3><ul><li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><ul><li>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局</li><li>但是如果有定位的盒子，请慎用 <code>overflow:hidden</code> 因为它会隐藏多余的部分</li></ul><ul><li>用途 <ul><li>清除浮动</li><li>保证盒子里面的内容不会超出该盒子范围</li></ul></li></ul><h3 id="显示与隐藏总结" tabindex="-1"><a class="header-anchor" href="#显示与隐藏总结" aria-hidden="true">#</a> 显示与隐藏总结</h3><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td>display 显示</td><td>隐藏对象，不保留位置</td><td>配合后面 js 做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单，应用极为广泛</td></tr><tr><td>visibility 可见性</td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td>overflow 溢出</td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table>`,17),s=[a];function n(r,o){return i(),e("div",null,s)}const u=t(l,[["render",n],["__file","08-CSS元素显示与隐藏.html.vue"]]);export{u as default};
