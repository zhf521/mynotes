import{_ as a,o as e,c as s,b as n}from"./app-889e2ba8.js";const i={},o=n(`<h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h2><h3 id="_1-1-模块化与模块" tabindex="-1"><a class="header-anchor" href="#_1-1-模块化与模块" aria-hidden="true">#</a> 1.1 模块化与模块</h3><blockquote><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <code>模块化</code></p></blockquote><p>其中拆分出的每个文件就是一个模块，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p><h3 id="_1-2-模块化项目" tabindex="-1"><a class="header-anchor" href="#_1-2-模块化项目" aria-hidden="true">#</a> 1.2 模块化项目</h3><blockquote><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p></blockquote><h3 id="_1-3-模块化好处" tabindex="-1"><a class="header-anchor" href="#_1-3-模块化好处" aria-hidden="true">#</a> 1.3 模块化好处</h3><p>下面是模块化的一些好处：</p><ol><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ol><h2 id="_2-模块导出与导入" tabindex="-1"><a class="header-anchor" href="#_2-模块导出与导入" aria-hidden="true">#</a> 2. 模块导出与导入</h2><p>因为模块内的属性和函数都是私有的，如果对外使用，需要使用标准语法导出和导入才可以</p><h3 id="_2-1-commonjs标准" tabindex="-1"><a class="header-anchor" href="#_2-1-commonjs标准" aria-hidden="true">#</a> 2.1 CommonJS标准</h3><p>导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> 变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;模块名或路径&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// Node.js 环境内置模块直接写模块名（例如：fs，path，http）</span>
<span class="token comment">// 自定义模块：写模块文件路径（例如：./utils.js)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量名的值接收的就是目标模块导出的对象</p></blockquote><h3 id="_2-2-ecmascript标准" tabindex="-1"><a class="header-anchor" href="#_2-2-ecmascript标准" aria-hidden="true">#</a> 2.2 ECMAScript标准</h3><p>CommonJS 规范是 Node.js 环境中默认的，后来官方推出 ECMAScript 标准语法</p><h4 id="_2-2-1-默认导出和导入" tabindex="-1"><a class="header-anchor" href="#_2-2-1-默认导出和导入" aria-hidden="true">#</a> 2.2.1 默认导出和导入</h4><p>导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">对外属性名</span><span class="token operator">:</span> 模块内私有变量
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 变量名 <span class="token keyword">from</span> <span class="token string">&#39;模块名或路径&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>变量名的值接收的就是目标模块导出的对象</p></blockquote><p>注意：Node.js 默认只支持 CommonJS 标准语法，如果想要在当前项目环境下使用 ECMAScript 标准语法，请新建 <code>package.json</code> 文件设置<code>type: &#39;module&#39;</code> 来进行设置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> “type”<span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-2-命名导出和导入" tabindex="-1"><a class="header-anchor" href="#_2-2-2-命名导出和导入" aria-hidden="true">#</a> 2.2.2 命名导出和导入</h4><p>命名导出语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> 修饰定义语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命名导入语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> 同名变量 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;模块名或路径&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：同名变量指的是模块内导出的变量名</p></blockquote><p>与默认导出如何选择：</p><ul><li>按需加载，使用命名导出和导入</li><li>全部加载，使用默认导出和导入</li></ul>`,35),t=[o];function d(r,c){return e(),s("div",null,t)}const l=a(i,[["render",d],["__file","06-NodeJS-模块化.html.vue"]]);export{l as default};
