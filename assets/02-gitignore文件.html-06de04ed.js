import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,b as s}from"./app-47e4447c.js";const i={},c=s(`<p>在使用 git 过程中，我们可能有些文件不需要上传上去，比如一些缓存文件，生成的图片，运行环境的一些配置等等，这时就需要用到 <code>.gitignore</code> 文件来忽略掉这些文件</p><h2 id="创建-gitignore-文件" tabindex="-1"><a class="header-anchor" href="#创建-gitignore-文件" aria-hidden="true">#</a> 创建. gitignore 文件</h2><p>在要管理的根目录下（即 <code>.git</code> 文件夹同级目录中）创建一个 <code>.gitignore</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建.gitignore文件命令</span>
$ <span class="token function">touch</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="写入要忽略的文件或文件夹" tabindex="-1"><a class="header-anchor" href="#写入要忽略的文件或文件夹" aria-hidden="true">#</a> 写入要忽略的文件或文件夹</h2><p>使用 Vim 来写入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令</span>
$ <span class="token function">vim</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Vim 插入模式来编写，在文件末尾一行要写入 <code>.gitignore</code> 然后退出保存即可</p><p>注意：<mark><code>.gitignore</code> 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 <code>.gitignore</code> 是无效的。那么解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交</mark></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gitignore-的格式规范" tabindex="-1"><a class="header-anchor" href="#gitignore-的格式规范" aria-hidden="true">#</a> . gitignore 的格式规范</h3><ul><li><code>#</code> 为注释</li><li>可以使用 shell 所使用的正则表达式来进行模式匹配</li><li>匹配模式最后跟 <code>/</code> 说明要忽略的是目录</li><li>使用 <code>!</code> 取反，（例如目录中包含 <code>test.a</code>，并且 <code>.gitignore</code> 文件中包含 <code>*.[oa]</code>，如果在文件中加入 <code>!test.a</code> 表明忽略除 <code>test.a</code> 文件以外的后缀名为 <code>.a</code> 或者 <code>.o</code> 的文件）</li></ul><h3 id="配置语法" tabindex="-1"><a class="header-anchor" href="#配置语法" aria-hidden="true">#</a> 配置语法</h3><ul><li>以斜杠 <code>/</code> 开头表示目录</li><li>以星号 <code>*</code> 通配多个字符</li><li>以问号 <code>?</code> 通配多个字符</li><li>以方括号 <code>[]</code> 包含单个字符的匹配列表</li><li>以感叹号 <code>!</code> 表示不忽略（跟踪）匹配到的文件或目录</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*.a       <span class="token comment"># 忽略所有 .a 结尾的文件  </span>
<span class="token operator">!</span>lib.a    <span class="token comment"># 但 lib.a 除外  </span>
/TODO     <span class="token comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括subdir/TODO  </span>
build/    <span class="token comment"># 忽略 build/ 目录下的所有文件  </span>
doc/*.txt <span class="token comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<mark>git 对于 <code>.gitignore</code> 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效</mark></p>`,17),d=[c];function o(t,l){return a(),n("div",null,d)}const m=e(i,[["render",o],["__file","02-gitignore文件.html.vue"]]);export{m as default};
