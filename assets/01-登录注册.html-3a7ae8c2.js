import{_ as e,r as o,o as c,c as i,b as s,d as n,a as p,e as a}from"./app-39fc351f.js";const l={},u=a(`<h2 id="_1-登录的流程" tabindex="-1"><a class="header-anchor" href="#_1-登录的流程" aria-hidden="true">#</a> 1. 登录的流程</h2><p>使用JWT实现：</p><ol><li><p><strong>用户登录</strong>：</p><ul><li><p>用户在前端输入用户名和密码，并将其发送到后端进行验证。</p></li><li><p>后端验证用户的凭据，并生成一个包含用户信息的 JWT。</p></li></ul></li><li><p><strong>JWT生成</strong>：</p><ul><li><p>后端使用密钥对用户信息进行签名，生成一个 JWT。</p></li><li><p>JWT 包含了用户的一些信息以及用于验证的签名信息，通常会包含用户身份、权限等信息。</p></li></ul></li><li><p><strong>JWT返回</strong>：</p><ul><li>后端将生成的 JWT 发送回前端应用程序。</li></ul></li><li><p><strong>前端存储</strong>：</p><ul><li>前端应用程序接收到 JWT 后，将其存储在本地，通常是在浏览器的本地存储（如 Local Storage 或 Session Storage）中。</li></ul></li><li><p><strong>后续请求</strong>：</p><ul><li><p>用户在前端应用程序执行其他操作时，前端会将 JWT 添加到每个请求的 Authorization 头中。</p></li><li><p>后端服务器在收到请求后，会验证 JWT 的有效性，从而验证用户的身份和权限</p></li></ul></li></ol><h2 id="_2-注册的流程" tabindex="-1"><a class="header-anchor" href="#_2-注册的流程" aria-hidden="true">#</a> 2. 注册的流程</h2><p>使用JWT实现：</p><ol><li><p><strong>前端注册页面</strong>：</p><ul><li>前端提供用户注册表单，用户输入注册所需的信息，如用户名、密码、邮箱等。</li></ul></li><li><p><strong>前端验证</strong>：</p><ul><li>前端应用程序对用户输入的信息进行验证，确保格式正确并满足要求。</li></ul></li><li><p><strong>发送注册请求</strong>：</p><ul><li>用户填写完注册信息后，前端应用程序将注册信息发送到后端进行处理。</li></ul></li><li><p><strong>后端处理注册请求</strong>：</p><ul><li>后端服务器接收到注册请求后，验证用户提供的信息的有效性，如检查用户名是否已存在。</li></ul></li><li><p><strong>用户信息存储和JWT生成</strong>：</p><ul><li><p>如果提供的信息有效，后端服务器将用户信息存储到数据库中，并生成一个包含用户信息的 JWT。</p></li><li><p>JWT 包含了用户的一些信息以及用于验证的签名信息，通常会包含用户身份、权限等信息。</p></li></ul></li><li><p><strong>JWT返回（可选）</strong>：</p><ul><li>后端向前端通知用户注册成功，包含生成的 JWT 的响应（可选的）</li></ul></li></ol><h2 id="_3-nest实现注册接口" tabindex="-1"><a class="header-anchor" href="#_3-nest实现注册接口" aria-hidden="true">#</a> 3. Nest实现注册接口</h2><h3 id="_1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-创建项目" aria-hidden="true">#</a> 1. 创建项目</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nest new project-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-连接数据库" tabindex="-1"><a class="header-anchor" href="#_2-连接数据库" aria-hidden="true">#</a> 2. 连接数据库</h3>`,10),r={href:"https://docs.nestjs.com/recipes/prisma#prisma",target:"_blank",rel:"noopener noreferrer"},d=a(`<h4 id="_1-安装prisma" tabindex="-1"><a class="header-anchor" href="#_1-安装prisma" aria-hidden="true">#</a> 1. 安装Prisma</h4><p>安装 Prisma Cli：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prisma --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 npx 在本地调用CLI：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建初始的 Prisma 设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx prisma init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-设置数据库连接" tabindex="-1"><a class="header-anchor" href="#_2-设置数据库连接" aria-hidden="true">#</a> 2. 设置数据库连接</h4><p>将<code>schema.prisma</code>文件中内容更改为：</p><div class="language-prisma line-numbers-mode" data-ext="prisma"><pre class="language-prisma"><code>generator client {
  provider = &quot;prisma-client-js&quot;
}

datasource db {
  provider = &quot;mysql&quot;
  url      = env(&quot;DATABASE_URL&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>.env</code>文件中内容更改为：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code>DATABASE_URL=&quot;mysql://用户名:密码@域名:端口号/数据库名称&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code># .env

DATABASE_URL=&quot;mysql://root:123456@localhost:3306/nest-blog&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-创建数据库表" tabindex="-1"><a class="header-anchor" href="#_3-创建数据库表" aria-hidden="true">#</a> 3. 创建数据库表</h4><p>我们创建一个User模型并添加到<code>schema.prisma</code>文件中：</p><div class="language-prisma line-numbers-mode" data-ext="prisma"><pre class="language-prisma"><code>model user {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  name     String @unique
  password String
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-prisma line-numbers-mode" data-ext="prisma"><pre class="language-prisma"><code>// schema.prisma

generator client {
  provider = &quot;prisma-client-js&quot;
}

datasource db {
  provider = &quot;mysql&quot;
  url      = env(&quot;DATABASE_URL&quot;)
}

model user {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  name     String @unique
  password String
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Prisma模型后，可以生成SQL迁移文件并在数据库运行它们。在终端中运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx prisma migrate dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-创建-prismaclient-模块和服务" tabindex="-1"><a class="header-anchor" href="#_4-创建-prismaclient-模块和服务" aria-hidden="true">#</a> 4. 创建 PrismaClient 模块和服务</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nest g mo prisma
nest g s prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让 PrismaService 继承自 PrismaClient：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// prisma.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrismaService</span> <span class="token keyword">extends</span> <span class="token class-name">PrismaClient</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 PrismaModule 设置成全局，并导出 PrismaService：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// prisma.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Global<span class="token punctuation">,</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./prisma.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Global</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>PrismaService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token operator">:</span> <span class="token punctuation">[</span>PrismaService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrismaModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以后我们可以在任何NestJS的服务、控制器或其他组件中注入<code>PrismaService</code>，然后使用它来执行数据库操作</p><h3 id="_3-创建认证-auth-模块" tabindex="-1"><a class="header-anchor" href="#_3-创建认证-auth-模块" aria-hidden="true">#</a> 3. 创建认证（auth）模块</h3><p>创建模块：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nest generate module auth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建控制器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nest generate controller auth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nest generate <span class="token function">service</span> auth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-创建数据传输对象-dto" tabindex="-1"><a class="header-anchor" href="#_4-创建数据传输对象-dto" aria-hidden="true">#</a> 4. 创建数据传输对象（DTO）</h3><p>使用DTO（数据传输对象）的主要原因之一是帮助规范和验证数据的结构和内容，以及在不同层之间传递数据。DTO可以在Nest.js应用程序中用于定义请求和响应的数据结构，并通过验证来确保数据的完整性和有效性</p><p>在auth文件夹下创建dto文件夹，在文件夹中创建<code>register.dto.ts</code>文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// register.dto.ts</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RegisterDto</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  password_confirm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-为dto添加验证装饰器" tabindex="-1"><a class="header-anchor" href="#_5-为dto添加验证装饰器" aria-hidden="true">#</a> 5. 为DTO添加验证装饰器</h3><p>管道有两个典型的应用场景:</p><ul><li><strong>转换</strong>：管道将输入数据转换为所需的数据输出(例如，将字符串转换为整数)</li><li><strong>验证</strong>：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常</li></ul>`,42),k={href:"https://docs.nestjs.com/pipes#class-validator",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>我们使用<code>class-validator</code>库来实现</p><p>安装依赖：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npm i <span class="token operator">--</span>save <span class="token keyword">class</span><span class="token operator">-</span>validator <span class="token keyword">class</span><span class="token operator">-</span>transformer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用装饰器来验证字段：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// register.dto.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RegisterDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;用户名不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;确认密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password_confirm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中创建接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Body<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;register&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> registerDto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> registerDto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们请求<code>/auth/register</code>，发送数据即可得到如下内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password_confirm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-为dto添加自定义验证规则" tabindex="-1"><a class="header-anchor" href="#_6-为dto添加自定义验证规则" aria-hidden="true">#</a> 6. 为DTO添加自定义验证规则</h3>`,10),m=s("code",null,"class-validator",-1),b={href:"https://github.com/typestack/class-validator#custom-validation-decorators",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>我们创建一个<code>rules</code>文件夹来存放自定义验证规则，创建一个<code>is-not-exists.rule.ts</code>文件，写入验证规则，验证用户名是否已经存在：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// is-not-exists.rule.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  registerDecorator<span class="token punctuation">,</span>
  ValidationOptions<span class="token punctuation">,</span>
  ValidationArguments<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../prisma/prisma.service&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IsNotExistsRule</span><span class="token punctuation">(</span>
  property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  validationOptions<span class="token operator">?</span><span class="token operator">:</span> ValidationOptions<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">registerDecorator</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;IsNotExistsRule&#39;</span><span class="token punctuation">,</span>
      target<span class="token operator">:</span> object<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>
      propertyName<span class="token operator">:</span> propertyName<span class="token punctuation">,</span>
      constraints<span class="token operator">:</span> <span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> validationOptions<span class="token punctuation">,</span>
      validator<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> args<span class="token operator">:</span> ValidationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            where<span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token punctuation">[</span>args<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">Boolean</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个<code>is-confirm.rule.ts</code>文件，写入验证规则，验证确认密码与密码是否一致：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// is-confirm.rule.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  registerDecorator<span class="token punctuation">,</span>
  ValidationOptions<span class="token punctuation">,</span>
  ValidationArguments<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IsConfirmRule</span><span class="token punctuation">(</span>validationOptions<span class="token operator">?</span><span class="token operator">:</span> ValidationOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">registerDecorator</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;IsConfirmRule&#39;</span><span class="token punctuation">,</span>
      target<span class="token operator">:</span> object<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>
      propertyName<span class="token operator">:</span> propertyName<span class="token punctuation">,</span>
      constraints<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> validationOptions<span class="token punctuation">,</span>
      validator<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> args<span class="token operator">:</span> ValidationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>value <span class="token operator">==</span> args<span class="token punctuation">.</span>object<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_confirm</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在DTO中使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// register.dto.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsConfirmRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/rules/is-confirm.rule&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotExistsRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/rules/is-not-exists.rule&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RegisterDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;用户名不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotExistsRule</span></span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;该用户名已经注册&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsConfirmRule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;两次输入的密码不一致&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;确认密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password_confirm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-完成注册服务" tabindex="-1"><a class="header-anchor" href="#_7-完成注册服务" aria-hidden="true">#</a> 7. 完成注册服务</h3><p>在<code>auth.service.ts</code>中实现注册的逻辑，需要安装密码加密的工具包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> argon2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/prisma/prisma.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> argon2 <span class="token keyword">from</span> <span class="token string">&#39;argon2&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 依赖注入</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> prisma<span class="token operator">:</span> PrismaService<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 注册服务</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存入数据库</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        password<span class="token operator">:</span> <span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对密码进行加密</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&#39;注册成功&#39;</span><span class="token punctuation">,</span>
      user<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        username<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中使用该服务：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Body<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.service&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> auth<span class="token operator">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;register&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> registerDto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们请求<code>/auth/register</code>，注册成功后会返回：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;注册成功&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-nest实现登录接口" tabindex="-1"><a class="header-anchor" href="#_4-nest实现登录接口" aria-hidden="true">#</a> 4. Nest实现登录接口</h2><h3 id="_1-创建数据传输对象-dto" tabindex="-1"><a class="header-anchor" href="#_1-创建数据传输对象-dto" aria-hidden="true">#</a> 1. 创建数据传输对象（DTO）</h3><p>在auth文件夹下创建dto文件夹，在文件夹中创建<code>login.dto.ts</code>文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// login.dto.ts</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginDto</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-为dto添加验证装饰器" tabindex="-1"><a class="header-anchor" href="#_2-为dto添加验证装饰器" aria-hidden="true">#</a> 2. 为DTO添加验证装饰器</h3><p>使用装饰器来验证字段：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// login.dto.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;用户名不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中创建接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Body<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/login.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> auth<span class="token operator">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 注册</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;register&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> registerDto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 登录</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> LoginDto<span class="token operator">:</span> LoginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> LoginDto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们请求<code>/auth/login</code>，发送数据即可得到如下内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-为dto添加自定义验证规则" tabindex="-1"><a class="header-anchor" href="#_3-为dto添加自定义验证规则" aria-hidden="true">#</a> 3. 为DTO添加自定义验证规则</h3><p>在rules文件夹中创建一个<code>is-exists.rule.ts</code>文件，写入验证规则，验证用户名是否已经存在：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// is-exists.rule.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  registerDecorator<span class="token punctuation">,</span>
  ValidationOptions<span class="token punctuation">,</span>
  ValidationArguments<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../prisma/prisma.service&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">IsExistsRule</span><span class="token punctuation">(</span>
  property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  validationOptions<span class="token operator">?</span><span class="token operator">:</span> ValidationOptions<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">registerDecorator</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;IsExistsRule&#39;</span><span class="token punctuation">,</span>
      target<span class="token operator">:</span> object<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>
      propertyName<span class="token operator">:</span> propertyName<span class="token punctuation">,</span>
      constraints<span class="token operator">:</span> <span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">,</span>
      options<span class="token operator">:</span> validationOptions<span class="token punctuation">,</span>
      validator<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> args<span class="token operator">:</span> ValidationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            where<span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token punctuation">[</span>args<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在DTO中使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// login.dto.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsExistsRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/rules/is-exists.rule&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginDto</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;用户名不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsExistsRule</span></span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;用户名不存在&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;密码不能为空&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-实现登录的逻辑" tabindex="-1"><a class="header-anchor" href="#_4-实现登录的逻辑" aria-hidden="true">#</a> 4. 实现登录的逻辑</h3><p>在<code>auth.service.ts</code>中实现检索用户并验证密码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> BadRequestException<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/prisma/prisma.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> argon2 <span class="token keyword">from</span> <span class="token string">&#39;argon2&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/login.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 依赖注入</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> prisma<span class="token operator">:</span> PrismaService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 注册服务</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存入数据库</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        password<span class="token operator">:</span> <span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对密码进行加密</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&#39;注册成功&#39;</span><span class="token punctuation">,</span>
      user<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        username<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 登录服务</span>
  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> LoginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> dto<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中调用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.controller.ts</span>


<span class="token keyword">import</span> <span class="token punctuation">{</span> Body<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/login.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> auth<span class="token operator">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;register&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> registerDto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> LoginDto<span class="token operator">:</span> LoginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>LoginDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们请求<code>/auth/login</code>，登录成功后会返回：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;登录成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用jwt" tabindex="-1"><a class="header-anchor" href="#_5-使用jwt" aria-hidden="true">#</a> 5. 使用JWT</h3><p>我们使用Passport库来实现</p>`,39),y={href:"https://docs.nestjs.com/recipes/passport",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>安装Passport相关包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @nestjs/passport passport passport-local @nestjs/jwt passport-jwt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/passport-local @types/passport-jwt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注入 <code>JwtService</code>，并更新生成JWT令牌的方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/jwt&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> jwtService<span class="token operator">:</span> JwtService<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 更新生成JWT令牌的方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.service.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> BadRequestException<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/register.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/prisma/prisma.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> argon2 <span class="token keyword">from</span> <span class="token string">&#39;argon2&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LoginDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/login.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/jwt&#39;</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 依赖注入</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> prisma<span class="token operator">:</span> PrismaService<span class="token punctuation">,</span>
    <span class="token keyword">private</span> jwtService<span class="token operator">:</span> JwtService<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 注册服务</span>
  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> RegisterDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存入数据库</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        password<span class="token operator">:</span> <span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 对密码进行加密</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">&#39;注册成功&#39;</span><span class="token punctuation">,</span>
      user<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        username<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 登录服务</span>
  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> LoginDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> dto<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> argon2<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> dto<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// payload 包含了用户的名称和标识（id）</span>
    <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> sub<span class="token operator">:</span> user<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      access_token<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtService<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在auth文件夹下创建<code>constants.ts</code>文件中设置token密钥：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code>// constants.ts

export const jwtConstants = {
  secret: &#39;zhf&#39;,
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用它在 JWT 签名和验证步骤之间共享密钥</p><p>在<code>auth.module.ts</code>文件中配置：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// auth.module.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.controller&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/jwt&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> jwtConstants <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./constants&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    JwtModule<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      global<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      secret<span class="token operator">:</span> jwtConstants<span class="token punctuation">.</span>secret<span class="token punctuation">,</span>
      signOptions<span class="token operator">:</span> <span class="token punctuation">{</span> expiresIn<span class="token operator">:</span> <span class="token string">&#39;100d&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AuthController<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AuthService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们请求<code>/auth/login</code>，登录成功后会返回token：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW4iLCJzdWIiOjEsImlhdCI6MTcwMTg0NjM2NCwiZXhwIjoxNzEwNDg2MzY0fQ.l7GsYbO4d8iq_CcrjMjJapzWRs0DftR5ruesaU5QHZg&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function h(f,x){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("使用Prisma连接MySQL数据库（细节见文档："),s("a",r,[n("Prisma"),p(t)]),n("）")]),d,s("p",null,[n("我们可以使用管道中的类验证器（"),s("a",k,[n("类验证器"),p(t)]),n("）来对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常")]),v,s("p",null,[n("要为 DTO（数据传输对象）添加自定义验证规则，可以使用 "),m,n(" 库提供的自定义验证装饰器（"),s("a",b,[n("自定义验证装饰器"),p(t)]),n("）")]),g,s("p",null,[n("详见："),s("a",y,[n("Passport"),p(t)])]),w])}const j=e(l,[["render",h],["__file","01-登录注册.html.vue"]]);export{j as default};
