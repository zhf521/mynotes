import{_ as n,o as s,c as a,b as e}from"./app-48c987c6.js";const p={},t=e(`<h2 id="_1-webpack简介及体验" tabindex="-1"><a class="header-anchor" href="#_1-webpack简介及体验" aria-hidden="true">#</a> 1. webpack简介及体验</h2><p>Webpack 是一个静态模块打包工具，从入口构建依赖图，打包有关的模块，最后用于展示你的内容</p><p>静态模块：编写代码过程中的html、css、js、图片等固定内容的文件</p><p>打包过程：</p><figure><img src="https://zhf-picture.oss-cn-qingdao.aliyuncs.com/my-img/webpack基础01.png" alt="webpack基础01.png" tabindex="0" loading="lazy"><figcaption>webpack基础01.png</figcaption></figure><p>注意：只有和入口有直接/间接引入关系的模块，才会被打包</p><p>Webpack 的作用：把静态模块内容，压缩、整合、转译等（前端工程化）</p><ul><li>把 less/sass 转成 css 代码</li><li>把 ES6+ 降级成 ES5 等</li><li>支持多种模块文件类型，多种模块标准语法</li></ul><p>体验：</p><ol><li><p>在项目文件夹下初始化包环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>编写代码</p></li><li><p>下载<code>webpack webpack-cli</code>到项目（版本独立）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i webpack webpack-cli --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：虽然 webpack 是全局软件包，封装的是命令工具，但是为了保证项目之间版本分别独立，所以这次比较特殊，下载到某个项目环境下，但是需要把 webpack 命令配置到 package.json 的 scripts 自定义命令，作为局部命令使用</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>项目中运行工具命令，采用自定义命令的方式（局部命令）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npm run 自定义命令名字</code></p><p>注意：实际上在终端运行的是 build 右侧的具体命名</p></li><li><p>自动产生 dist 分发文件夹（压缩和优化后，用于最终运行的代码）</p></li></ol><h2 id="_2-webpack修改入口和出口" tabindex="-1"><a class="header-anchor" href="#_2-webpack修改入口和出口" aria-hidden="true">#</a> 2. webpack修改入口和出口</h2><p>webpack配置：影响 Webpack 打包过程</p><p>步骤：</p><ol><li><p>在项目根目录，新建<code>Webpack.config.js</code>配置文件</p></li><li><p>导出配置对象，配置入口，出口文件路径（别忘了修改磁盘文件夹和文件的名字）</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>const path = require(&#39;path&#39;)

module.exports = {
  entry: path.resolve(__dirname, &#39;入口路径及名字&#39;),
  output: {
    path: path.resolve(__dirname, &#39;dist&#39;),
    filename: &#39;出口路径及名字&#39;  
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/login/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./login/index.js&#39;</span>  
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-webpack自动生成html文件" tabindex="-1"><a class="header-anchor" href="#_3-webpack自动生成html文件" aria-hidden="true">#</a> 3. webpack自动生成html文件</h2><p>使用<code>html-webpack-plugin</code>插件，可以在 webpack 打包时生成 html 文件并引入其它打包后的资源</p><p>步骤：</p><ol><li><p>下载<code>html-webpack-plugin</code>本地软件包到项目中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i html-webpack-plugin --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置<code>webpack.config.js</code>让webpack拥有插件功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/login.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 模板文件</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./login/index.html&#39;</span> <span class="token comment">// 输出文件</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">//指定以public/login.html为模板复制到dist/login/index.html，并自动引入其他打包后资源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_4-webpack打包css代码" tabindex="-1"><a class="header-anchor" href="#_4-webpack打包css代码" aria-hidden="true">#</a> 4. webpack打包CSS代码</h2><p>注意：webpack 默认只识别 JS 和 JSON 文件内容，所以想要让 webpack 识别更多不同内容，需要使用加载器</p><p>需要 2 个加载器来辅助 webpack 才能打包 css 代码：</p><ul><li>加载器 css-loader：解析 css 代码</li><li>加载器 style-loader：把解析后的 css 代码插入到 DOM（style 标签之间）</li></ul><p>步骤：</p><ol><li><p>准备 css 文件引入到 <code>src/login/index.js</code> 中（压缩转译处理等）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标：打包 css 代码
 *  1 准备 css 代码，并引入到 js 中
 *  2 下载 css-loader 和 style-loader 本地软件包
 *  3 配置 webpack.config.js 让 Webpack 拥有该加载器功能
 *  4 打包后观察效果
 */</span>
<span class="token comment">// 5.1 准备 css 代码，并引入到 js 中</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：这里只是引入代码内容让 webpack 处理，不需定义变量接收在 JS 代码中继续使用，所以没有定义变量接收</p></blockquote></li><li><p>下载 <code>css-loader</code> 和 <code>style-loader</code> 本地软件包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i css-loader style-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有该加载器功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 加载器</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 规则列表</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配 .css 结尾的文件</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 使用从后到前的加载器来解析 css 代码和插入到 DOM</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_5-优化-提取css代码" tabindex="-1"><a class="header-anchor" href="#_5-优化-提取css代码" aria-hidden="true">#</a> 5. 优化-提取CSS代码</h2><p>让 webpack 把 css 代码内容字符串单独提取到 dist 下的 css 文件中</p><p>使用<code>mini-css-extract-plugin</code>插件来实现</p><p>步骤：</p><ol><li><p>下载 <code>mini-css-extract-plugin</code> 插件软件包到本地项目中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev mini-css-extract-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有该插件功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token comment">// use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>注意：不能和 <code>style-loader</code> 一起使用</p><p>好处：css 文件可以被浏览器缓存，减少 JS 文件体积，让浏览器并行下载 css 和 js 文件</p><h2 id="_6-优化压缩过程" tabindex="-1"><a class="header-anchor" href="#_6-优化压缩过程" aria-hidden="true">#</a> 6. 优化压缩过程</h2><p>把提出的 css 文件内样式代码压缩</p><p>使用<code>css-minimizer-webpack-plugin</code>插件来实现</p><p>步骤：</p><ol><li><p>下载 <code>mini-css-extract-plugin</code> 插件软件包到本地项目中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i css-minimizer-webpack-plugin --save-dev 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有该插件功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 优化</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 最小化</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 在 webpack@5 中，你可以使用 \`...\` 语法来扩展现有的 minimizer（即\`terser-webpack-plugin\`），将下一行取消注释（保证 JS 代码还能被压缩处理）</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_7-webpack-打包less代码" tabindex="-1"><a class="header-anchor" href="#_7-webpack-打包less代码" aria-hidden="true">#</a> 7. webpack-打包less代码</h2><p>加载器 <code>less-loader</code>：把 less 代码编译为 css 代码，还需要依赖 less 软件包</p><p>步骤：</p><ol><li><p>新建 <code>login/index.less</code> 文件，设置背景图样式（图片在配套资料-素材文件夹中）</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;./assets/login-bg.png&#39;</span><span class="token punctuation">)</span></span> no<span class="token operator">-</span>repeat center<span class="token operator">/</span>cover<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>less 样式引入到 <code>src/login/index.js</code> 中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标8：打包 less 代码
 *  8.1 新建 less 代码（设置背景图）并引入到 src/login/index.js 中
 *  8.2 下载 less 和 less-loader 本地软件包
 *  8.3 配置 webpack.config.js 让 Webpack 拥有功能
 *  8.4 打包后观察效果
 */</span>
<span class="token comment">// 8.1 新建 less 代码（设置背景图）并引入到 src/login/index.js 中</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.less&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>下载 <code>less</code> 和 <code>less-loader</code> 本地软件包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token function">less</span> less-loader --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// ...</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_8-webpack-打包图片" tabindex="-1"><a class="header-anchor" href="#_8-webpack-打包图片" aria-hidden="true">#</a> 8. webpack-打包图片</h2><p>资源模块：webpack 内置了资源模块的打包，无需下载额外 loader</p><p>步骤：</p><ol><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有打包图片功能</p><ul><li>占位符 【hash】对模块内容做算法计算，得到映射的数字字母组合的字符串</li><li>占位符 【ext】使用当前模块原本的占位符，例如：<code>.png</code>/<code>.jpg</code> 等字符串</li><li>占位符 【query】保留引入文件时代码中查询参数（只有 URL 下生效）</li></ul></li><li><p>注意：判断临界值默认为 8KB</p><ul><li>大于 8KB 文件：发送一个单独的文件并导出 URL 地址</li><li>小于 8KB 文件：导出一个 data URI（base64字符串）</li></ul></li><li><p>在 <code>src/login/index.js</code> 中给 img 标签添加 logo 图片</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 目标9：打包资源模块（图片处理）
 *  9.1 创建 img 标签并动态添加到页面，配置 webpack.config.js
 *  9.2 打包后观察效果和区别
 */</span>
<span class="token comment">// 9.1 创建 img 标签并动态添加到页面，配置 webpack.config.js</span>
<span class="token comment">// 注意：js 中引入本地图片资源要用 import 方式（如果是网络图片http地址，字符串可以直接写）</span>
<span class="token keyword">import</span> imgObj <span class="token keyword">from</span> <span class="token string">&#39;./assets/logo.png&#39;</span>
<span class="token keyword">const</span> theImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
theImg<span class="token punctuation">.</span>src <span class="token operator">=</span> imgObj
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.login-wrap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>theImg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 <code>webpack.config.js</code> 让 webpack 拥有打包图片功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// ...</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;assets/[hash][ext][query]&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_9-webpack搭建开发环境" tabindex="-1"><a class="header-anchor" href="#_9-webpack搭建开发环境" aria-hidden="true">#</a> 9. webpack搭建开发环境</h2><p>每次改动代码，都要重新打包，很麻烦，我们可以给项目集成 <code>webpack-dev-server</code> 开发服务器</p><p>作用：启动 Web 服务，打包输出源码在内存，并会自动检测代码变化热更新到网页</p><p>步骤；</p><ol><li><p>下载<code> webpack-dev-server</code> 软件包到当前项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i webpack-dev-server --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置自定义命令，并设置打包的模式为开发模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve --mode=development&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>npm run dev</code> 来启动开发服务器，访问提示的<code>域名+端口号</code>，在浏览器访问打包后的项目网页，修改代码后试试热更新效果</p><blockquote><p>在 js / css 文件中修改代码保存后，会实时反馈到浏览器</p></blockquote></li></ol><h2 id="_10-webpack打包模式" tabindex="-1"><a class="header-anchor" href="#_10-webpack打包模式" aria-hidden="true">#</a> 10. webpack打包模式</h2><p>打包模式：告知 webpack 使用相应模式的内置优化</p><p>分类：</p><table><thead><tr><th><strong>模式名称</strong></th><th><strong>模式名字</strong></th><th><strong>特点</strong></th><th>场景</th></tr></thead><tbody><tr><td>开发模式</td><td>development</td><td>调试代码，实时加载，模块热替换等</td><td>本地开发</td></tr><tr><td>生产模式</td><td>production</td><td>压缩代码，资源优化，更轻量等</td><td>打包上线</td></tr></tbody></table><p>如何设置影响 Webpack呢？</p><ul><li><p>方式1：在 <code>webpack.config.js</code> 配置文件设置 mode 选项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式2：在 <code>package.json</code> 命令行设置 mode 参数</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack serve --mode=development&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>注意：命令行设置的优先级高于配置文件中的，推荐用命令行设置</p><h2 id="_11-webpack打包模式的应用" tabindex="-1"><a class="header-anchor" href="#_11-webpack打包模式的应用" aria-hidden="true">#</a> 11. webpack打包模式的应用</h2><p>需求：在开发模式下用 style-loader 内嵌更快，在生产模式下提取 css 代码</p><p>方案1：webpack.config.js 配置导出函数，但是局限性大（只接受 2 种模式）</p><p>方案2：借助 cross-env （跨平台通用）包命令，设置参数区分环境</p><p>方案3：配置不同的 webpack.config.js （适用多种模式差异性较大情况）</p><p>主要使用方案 2：</p><p>步骤：</p><ol><li><p>下载 cross-env 软件包到当前项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i cross-env --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置自定义命令，传入参数名和值（会绑定到 <code>p<wbr>rocess.env</code> 对象下）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production webpack --mode=production&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;cross-env NODE_ENV=development webpack serve --open --mode-development&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>webpack.config.js</code> 区分不同环境使用不同配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token comment">// use: [&#39;style-loader&#39;, &quot;css-loader&quot;],</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// compiles Less to CSS</span>
          process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_12-webpack前端注入环境变量" tabindex="-1"><a class="header-anchor" href="#_12-webpack前端注入环境变量" aria-hidden="true">#</a> 12. webpack前端注入环境变量</h2><p>需求：前端项目中，开发模式下打印语句生效，生产模式下打印语句失效</p><p>问题：cross-env 设置的只在 Node.js 环境生效，前端代码无法访问 p<wbr>rocess.env.NODE_ENV</p><p>解决：使用 Webpack 内置的 DefinePlugin 插件</p><p>作用：在编译时，将前端代码中匹配的变量名，替换为值或表达式</p><p>配置 webpack.config.js 中给前端注入环境变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// key 是注入到打包后的前端 JS 代码中作为全局变量</span>
      <span class="token comment">// value 是变量对应的值（在 corss-env 注入在 node.js 中的环境变量字符串）</span>
      <span class="token string-property property">&#39;p<wbr>rocess.env.NODE_ENV&#39;</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-webpack开发环境调错source-map" tabindex="-1"><a class="header-anchor" href="#_13-webpack开发环境调错source-map" aria-hidden="true">#</a> 13. webpack开发环境调错source map</h2><p><code>source map</code>可以准确追踪 error 和 warning 在原始代码的位置</p><p>问题：代码被压缩和混淆，无法正确定位源代码位置（行数和列数）</p><p>设置：webpack.config.js 配置 devtool 选项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;inline-source-map&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>inline-source-map 选项：把源码的位置信息一起打包在 JS 文件内</p></blockquote><p>注意：source map 适用于开发环境，不要在生产环境使用（防止被轻易查看源码位置）</p><h2 id="_14-webpack设置解析别名路径" tabindex="-1"><a class="header-anchor" href="#_14-webpack设置解析别名路径" aria-hidden="true">#</a> 14. webpack设置解析别名路径</h2><p>解析别名可以配置模块如何解析，创建 import 或 require 的别名，来确保模块引入变得更简单</p><p>例：</p><p>原来路径如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> checkPhone<span class="token punctuation">,</span> checkCode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/utils/check.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置解析别名：在 webpack.config.js 中设置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们以后，引入目标模块写的路径就更简单了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> checkPhone<span class="token punctuation">,</span> checkCode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/check.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_15-优化-cdn使用" tabindex="-1"><a class="header-anchor" href="#_15-优化-cdn使用" aria-hidden="true">#</a> 15. 优化-CDN使用</h2><p>开发模式使用本地第三方库，生产模式下使用 CDN 加载引入</p><p>CDN：内容分发网络，指的是一组分布在各个地区的服务器</p><p>作用：把静态资源文件/第三方库放在 CDN 网络中各个服务器中，供用户就近请求获取</p><p>好处：减轻自己服务器请求压力，就近请求物理延迟低，配套缓存策略</p><p>步骤：</p><ol><li><p>在 html 中引入第三方库的CDN地址并用模板语法判断</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;% if(htmlWebpackPlugin.options.useCdn){ %&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
&lt;% } %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 webpack.config.js 中externals外部扩展选项（防止某些 import 的包被打包）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生产环境下使用相关配置</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 外部扩展（让 webpack 防止 import 的包被打包进来）</span>
  config<span class="token punctuation">.</span>externals <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// key：import from 语句后面的字符串</span>
    <span class="token comment">// value：留在原地的全局变量（最好和 cdn 在全局暴露的变量一致）</span>
    <span class="token string-property property">&#39;bootstrap/dist/css/bootstrap.min.css&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bootstrap&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;axios&#39;</span><span class="token operator">:</span> <span class="token string">&#39;axios&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token comment">// 自定义属性，在 html 模板中 &lt;%=htmlWebpackPlugin.options.useCdn%&gt; 访问使用</span>
      <span class="token literal-property property">useCdn</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_16-webpack多页面打包" tabindex="-1"><a class="header-anchor" href="#_16-webpack多页面打包" aria-hidden="true">#</a> 16. webpack多页面打包</h2><p>单页面：单个 html 文件，切换 DOM 的方式实现不同业务逻辑展示</p><p>多页面：多个 html 文件，切换页面实现不同业务逻辑展示</p><p>步骤：</p><ol><li><p>准备源码（html，css，js）放入相应位置，并改用模块化语法导出</p></li><li><p>下载 form-serialize 包并导入到核心代码中使用</p></li><li><p>配置 webpack.config.js 多入口和多页面的设置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;模块名1&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/入口1.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;模块名2&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/入口2.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./[name]/index.js&#39;</span>  
  <span class="token punctuation">}</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/页面2.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 模板文件</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./路径/index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;模块名2&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/页面2.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 模板文件</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./路径/index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;模块名2&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_17-优化-分割公共代码" tabindex="-1"><a class="header-anchor" href="#_17-优化-分割公共代码" aria-hidden="true">#</a> 17. 优化-分割公共代码</h2><p>需求：把 2 个以上页面引用的公共代码提取</p><p>配置 webpack.config.js 的 splitChunks 分割功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 所有模块动态非动态移入的都分割分析</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 分隔组</span>
        <span class="token literal-property property">commons</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 抽取公共模块</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 抽取的chunk最小大小字节</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 最小引用数</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用</span>
          <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> cacheGroupKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 分离出模块文件名</span>
            <span class="token keyword">const</span> allChunksNames <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 模块名1~模块名2</span>
            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./js/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>allChunksNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 输出到 dist 目录下位置</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105),l=[t];function i(o,c){return s(),a("div",null,l)}const u=n(p,[["render",i],["__file","01-webpack基础.html.vue"]]);export{u as default};
