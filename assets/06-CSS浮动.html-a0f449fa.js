import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,b as t}from"./app-9d21922c.js";const e={},i=t(`<h2 id="传统网页布局的三种方式" tabindex="-1"><a class="header-anchor" href="#传统网页布局的三种方式" aria-hidden="true">#</a> 传统网页布局的三种方式</h2><p>CSS 提供了三种传统布局方式 (简单说, 就是盒子如何进行排列)：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了</p><p>注意：实际开发中，一个页面基本都包含了这三种布局方式</p><h3 id="标准流-普通流-文档流" tabindex="-1"><a class="header-anchor" href="#标准流-普通流-文档流" aria-hidden="true">#</a> 标准流（普通流/文档流）</h3><p>所谓的标准流: 就是标签按照规定好默认方式排列</p><ul><li>块级元素会独占一行，从上向下顺序排列 <ul><li>常用元素：div、hr、p、h 1~h 6、ul、ol、dl、form、table</li></ul></li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行 <ul><li>常用元素：span、a、i、em 等</li></ul></li></ul><p>标准流是最基本的布局方式</p><h3 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动" aria-hidden="true">#</a> 浮动</h3><h4 id="为什么需要浮动" tabindex="-1"><a class="header-anchor" href="#为什么需要浮动" aria-hidden="true">#</a> 为什么需要浮动</h4><p>有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式</p><p>浮动最典型的应用：可以让多个块级元素一行内排列显示</p><p><mark>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</mark></p><h4 id="什么是浮动" tabindex="-1"><a class="header-anchor" href="#什么是浮动" aria-hidden="true">#</a> 什么是浮动</h4><p>float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及块或另一个浮动框的边缘</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">选择器</span> <span class="token punctuation">{</span> <span class="token property">float</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h4 id="浮动特性" tabindex="-1"><a class="header-anchor" href="#浮动特性" aria-hidden="true">#</a> 浮动特性</h4><p>加了浮动之后的元素, 会具有很多特性</p><ul><li>浮动元素会脱离标准流 (脱标：浮动的盒子不再保留原先的位置)</li></ul><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS浮动01.png" alt="CSS浮动01.png" tabindex="0" loading="lazy"><figcaption>CSS浮动01.png</figcaption></figure><ul><li>浮动的元素会一行内显示并且元素顶部对齐 <ul><li>注意：浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐</li></ul></li><li>浮动的元素会具有行内块元素的特性 <ul><li>任何元素都可以浮动，如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的</li></ul></li></ul><h4 id="浮动元素经常和标准流父级搭配使用" tabindex="-1"><a class="header-anchor" href="#浮动元素经常和标准流父级搭配使用" aria-hidden="true">#</a> 浮动元素经常和标准流父级搭配使用</h4><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是: 先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置，符合网页布局第一准侧</p><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS浮动02.png" alt="CSS浮动02.png" tabindex="0" loading="lazy"><figcaption>CSS浮动02.png</figcaption></figure><h4 id="浮动布局注意点" tabindex="-1"><a class="header-anchor" href="#浮动布局注意点" aria-hidden="true">#</a> 浮动布局注意点</h4><ul><li>浮动和标准流的父盒子搭配 <ul><li>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</li></ul></li><li>一个元素浮动了，理论上其余的兄弟元素也要浮动 <ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题</li></ul></li><li>浮动的盒子只会影响浮动盒子后面的标准流, 不会影响前面的标准流</li></ul><h3 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h3><h4 id="为什么需要清除浮动" tabindex="-1"><a class="header-anchor" href="#为什么需要清除浮动" aria-hidden="true">#</a> 为什么需要清除浮动</h4><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子</p><h4 id="清除浮动本质" tabindex="-1"><a class="header-anchor" href="#清除浮动本质" aria-hidden="true">#</a> 清除浮动本质</h4><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p><p>注意：</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度</li><li>父级有了高度，就不会影响下面的标准流了</li></ul><h4 id="清除浮动样式" tabindex="-1"><a class="header-anchor" href="#清除浮动样式" aria-hidden="true">#</a> 清除浮动样式</h4><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>属性值<span class="token punctuation">;</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>清除浮动的策略是: 闭合浮动</p><h4 id="清除浮动的多种方式" tabindex="-1"><a class="header-anchor" href="#清除浮动的多种方式" aria-hidden="true">#</a> 清除浮动的多种方式</h4><h5 id="额外标签法" tabindex="-1"><a class="header-anchor" href="#额外标签法" aria-hidden="true">#</a> 额外标签法</h5><p>额外标签法也称为隔墙法，是 W 3 C 推荐的做法</p><p>使用方式：额外标签法会在浮动元素末尾添加一个空的标签</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">clear</span><span class="token punctuation">:</span>both</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>，或者其他标签（如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>等）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差</li><li>注意： 要求这个新的空标签必须是块级元素</li></ul><h5 id="父级添加-overflow-属性" tabindex="-1"><a class="header-anchor" href="#父级添加-overflow-属性" aria-hidden="true">#</a> 父级添加 overflow 属性</h5><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll</p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">overflow</span><span class="token punctuation">:</span>hidden | auto | scroll<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li><li>注意：是给父元素添加代码</li></ul><h5 id="父级添加-after-伪元素" tabindex="-1"><a class="header-anchor" href="#父级添加-after-伪元素" aria-hidden="true">#</a> 父级添加 after 伪元素</h5><p><code>:after </code> 方式是额外标签法的升级版。给父元素添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> 
   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> 
   <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> 
   <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> 
   <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  
 <span class="token punctuation">}</span> 
 <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>  <span class="token comment">/* IE6、7 专有 */</span> 
   *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：兼容性问题</li></ul><h5 id="父级添加双伪元素" tabindex="-1"><a class="header-anchor" href="#父级添加双伪元素" aria-hidden="true">#</a> 父级添加双伪元素</h5><p>给父元素添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span> 
 <span class="token punctuation">}</span>
 <span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
   <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
    *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：代码更简洁</li><li>缺点：兼容性问题</li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>为什么需要清除浮动？</p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了</li></ol><table><thead><tr><th>清除浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级 <code>overflow:hidden;</code></td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级 <code>after</code> 伪元素</td><td>结构语义化，代码简洁</td><td>兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化，代码简洁</td><td>兼容性问题</td></tr></tbody></table>`,64),l=[i];function p(c,d){return n(),s("div",null,l)}const u=a(e,[["render",p],["__file","06-CSS浮动.html.vue"]]);export{u as default};
