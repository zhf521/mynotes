import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-9d21922c.js";const e={},i=t(`<h2 id="为什么使用定位" tabindex="-1"><a class="header-anchor" href="#为什么使用定位" aria-hidden="true">#</a> 为什么使用定位</h2><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子</li></ol><h2 id="定位组成" tabindex="-1"><a class="header-anchor" href="#定位组成" aria-hidden="true">#</a> 定位组成</h2><p>定位：将盒子定在某一个位置，所以<strong>定位也是在摆放盒子，按照定位的方式移动盒子</strong></p><p>定位也是用来布局的，它有两部分组成：<code>定位 = 定位模式 + 边偏移</code></p><p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式</p><p><strong>边偏移</strong>则决定了该元素的最终位置</p><h3 id="边偏移-方位名词" tabindex="-1"><a class="header-anchor" href="#边偏移-方位名词" aria-hidden="true">#</a> 边偏移（方位名词）</h3><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right 4 个属性</p><table><thead><tr><th>边偏移属性</th><th style="text-align:left;">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td style="text-align:left;"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong></td></tr><tr><td><code>bottom</code></td><td style="text-align:left;"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong></td></tr><tr><td><code>left</code></td><td style="text-align:left;"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong></td></tr><tr><td><code>right</code></td><td style="text-align:left;"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table><p>定位的盒子有了边偏移才有价值。一般情况下，凡是有定位的地方必有边偏移</p><h3 id="定位模式-position" tabindex="-1"><a class="header-anchor" href="#定位模式-position" aria-hidden="true">#</a> 定位模式 (position)</h3><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span> 
    <span class="token property">position</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式</p><p>定位模式决定元素的定位方式，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><table><thead><tr><th>值</th><th style="text-align:center;">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td style="text-align:center;"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td style="text-align:center;"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td style="text-align:center;"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td style="text-align:center;"><strong>固定</strong>定位</td></tr></tbody></table><h2 id="定位模式介绍" tabindex="-1"><a class="header-anchor" href="#定位模式介绍" aria-hidden="true">#</a> 定位模式介绍</h2><h3 id="静态定位-static" tabindex="-1"><a class="header-anchor" href="#静态定位-static" aria-hidden="true">#</a> 静态定位 (static)</h3><ul><li><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>，在不需要定位的时候用</li><li>语法：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
    position: static; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>静态定位按照标准流特性摆放位置，它没有边偏移</li><li>静态定位在布局时几乎不用</li></ul><h3 id="相对定位-relative" tabindex="-1"><a class="header-anchor" href="#相对定位-relative" aria-hidden="true">#</a> 相对定位 (relative)</h3><ul><li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的</li><li>语法：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
	position: relative; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>相对定位的特点：（务必记住） <ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）</li></ul><ul><li><strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它，因此，<strong>相对定位并没有脱标</strong></li></ul></li></ul><h3 id="绝对定位-absolute" tabindex="-1"><a class="header-anchor" href="#绝对定位-absolute" aria-hidden="true">#</a> 绝对定位 (absolute)</h3><h4 id="绝对定位的介绍" tabindex="-1"><a class="header-anchor" href="#绝对定位的介绍" aria-hidden="true">#</a> 绝对定位的介绍</h4><ul><li><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的</li><li>语法：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
 	position: absolute; 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li>绝对定位的特点： <ul><li><strong>完全脱标</strong> —— 完全不占位置</li><li>如果没有祖先元素或者祖先元素没有定位，则以<strong>浏览器</strong>为准定位（Document 文档）</li><li>如果祖先元素有定位 (相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</li></ul></li></ul><h4 id="定位口诀-——-子绝父相" tabindex="-1"><a class="header-anchor" href="#定位口诀-——-子绝父相" aria-hidden="true">#</a> 定位口诀 —— 子绝父相</h4><p><mark>子级是绝对定位的话，父级要用相对定位</mark></p><ul><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</li><li>父盒子需要加定位限制子盒子在父盒子内显示</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位</li></ul><p><strong>父级要占有位置，子级要任意摆放</strong>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong></p><p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到</p><h3 id="固定定位-fixed" tabindex="-1"><a class="header-anchor" href="#固定定位-fixed" aria-hidden="true">#</a> 固定定位 (fixed)</h3><ul><li><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong></li><li>主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</li><li>语法：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
 	position: fixed; 
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>固定定位的特点： <ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong></li><li>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong></li></ul></li></ul><h3 id="粘性定位-sticky" tabindex="-1"><a class="header-anchor" href="#粘性定位-sticky" aria-hidden="true">#</a> 粘性定位 (sticky)</h3><ul><li><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合</li><li>语法：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 选择器 { 
     position: sticky; 
     top: 10px; 
 }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>粘性定位的特点： <ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</li></ul></li></ul><h3 id="定位模式总结" tabindex="-1"><a class="header-anchor" href="#定位模式总结" aria-hidden="true">#</a> 定位模式总结</h3><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static 静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否 (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><p>注意：</p><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong></li><li><code>top</code> 和 <code>bottom</code> 不要同时使用</li><li><code>left</code> 和 <code>right</code> 不要同时使用</li></ol><h2 id="定位的应用" tabindex="-1"><a class="header-anchor" href="#定位的应用" aria-hidden="true">#</a> 定位的应用</h2><p>固定定位小技巧： 固定在版心右侧位置</p><p>小算法：</p><ol><li>让固定定位的盒子 <code>left: 50%;</code>，走到浏览器可视区（也可以看做版心）的一半位置</li><li>让固定定位的盒子 <code>margin-left: 版心宽度的一半距离;</code> 多走版心宽度的一半位置</li><li>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了</li></ol><h2 id="定位堆叠顺序-z-index" tabindex="-1"><a class="header-anchor" href="#定位堆叠顺序-z-index" aria-hidden="true">#</a> 定位堆叠顺序 (z-index)</h2><ul><li>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>，此时，可以使用 <code>z-index</code> 来控制盒子的前后次序 (z 轴)</li><li>语法：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选择器 { 
	z-index: 1; 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>z-index</code> 的特性如下： <ul><li>属性值：正整数、负整数或0，默认值是0，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来者居上</li><li>数字后面<mark>不能加单位</mark></li></ul></li></ul><p><mark>注意：<code>z-index</code> 只能应用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效</mark></p><h2 id="定位的拓展" tabindex="-1"><a class="header-anchor" href="#定位的拓展" aria-hidden="true">#</a> 定位的拓展</h2><h3 id="绝对定位的盒子居中" tabindex="-1"><a class="header-anchor" href="#绝对定位的盒子居中" aria-hidden="true">#</a> 绝对定位的盒子居中</h3><p>注意：加了绝对定位/固定定位的盒子不能通过设置 <code>margin: auto</code> 设置水平居中，但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p><ol><li><code>left: 50%;</code> 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left: -x px;</code> 让盒子向左移动自身宽度的一半</li></ol><h3 id="定位特殊特性" tabindex="-1"><a class="header-anchor" href="#定位特殊特性" aria-hidden="true">#</a> 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似：</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li></ol><p>display 是显示模式，可以改变显示模式有以下方式:</p><ul><li>可以用 inline-block 转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似，默认转换的特性转换为行内块</li></ul><blockquote><p>所以说，一个行内的盒子，如果加了浮动、固定定位和绝对定位，不用转换，就可以给这个盒子直接设置宽度和高度等</p></blockquote><h3 id="脱标的盒子不会触发外边距塌陷" tabindex="-1"><a class="header-anchor" href="#脱标的盒子不会触发外边距塌陷" aria-hidden="true">#</a> 脱标的盒子不会触发外边距塌陷</h3><p>浮动元素、绝对定位 (固定定位）元素的都不会触发外边距合并的问题</p><p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题</p><h3 id="绝对定位-固定定位-会完全压住盒子" tabindex="-1"><a class="header-anchor" href="#绝对定位-固定定位-会完全压住盒子" aria-hidden="true">#</a> 绝对定位 (固定定位)会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字，但是绝对定位（固定定位）会压住下面标准流所有的内容</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的，文字会围绕浮动元素</p><h2 id="精灵图" tabindex="-1"><a class="header-anchor" href="#精灵图" aria-hidden="true">#</a> 精灵图</h2><h3 id="为什么需要精灵图" tabindex="-1"><a class="header-anchor" href="#为什么需要精灵图" aria-hidden="true">#</a> 为什么需要精灵图</h3><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度</p><p>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites、CSS 雪碧图）</p><p>核心原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了</p><h3 id="精灵图-sprites-的使用" tabindex="-1"><a class="header-anchor" href="#精灵图-sprites-的使用" aria-hidden="true">#</a> 精灵图（sprites）的使用</h3><p>使用精灵图核心：</p><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中</li><li>这个大图片也称为 sprites 精灵图或者雪碧图</li><li>移动背景图片位置，此时可以使用 background-position</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置</li></ol><p>例：</p><p>效果：</p><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS定位01.png" alt="CSS定位01.png" tabindex="0" loading="lazy"><figcaption>CSS定位01.png</figcaption></figure><p>精灵图：</p><figure><img src="https://obsidian-picture.oss-cn-qingdao.aliyuncs.com/my-img/CSS定位02.jpg" alt="CSS定位02.jpg" tabindex="0" loading="lazy"><figcaption>CSS定位02.jpg</figcaption></figure><p>结构：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/abcd.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.p</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 112px<span class="token punctuation">;</span>
    <span class="token comment">/* background-color: pink; */</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span>  -493px -276px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.i</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>
    <span class="token comment">/* background-color: pink; */</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> -327px -142px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.n</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 109px<span class="token punctuation">;</span>
    <span class="token comment">/* background-color: pink; */</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> -215px -141px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.k</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 105px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 114px<span class="token punctuation">;</span>
    <span class="token comment">/* background-color: pink; */</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> -495px -142px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,82),l=[i];function o(p,d){return s(),a("div",null,l)}const u=n(e,[["render",o],["__file","07-CSS定位.html.vue"]]);export{u as default};
