import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-d59ce998.js";const p={},o=e(`<p>首先，我们要明确，面向对象不是语法，是一个思想，是一种<strong>编程思想</strong></p><h2 id="编程思想" tabindex="-1"><a class="header-anchor" href="#编程思想" aria-hidden="true">#</a> 编程思想</h2><h3 id="面向过程" tabindex="-1"><a class="header-anchor" href="#面向过程" aria-hidden="true">#</a> 面向过程</h3><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了</p><ul><li>优点：性能比面向对象高，适合跟硬件联系很紧密的东西</li><li>缺点：没有面向对象易维护、易复用、易扩展</li></ul><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h3><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工</p><p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目</p><p>面向对象的特性：封装性、继承性、多态性</p><ul><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</li><li>缺点：性能比面向过程低</li></ul><h2 id="创建对象的方式" tabindex="-1"><a class="header-anchor" href="#创建对象的方式" aria-hidden="true">#</a> 创建对象的方式</h2><p>因为面向对象就是一个找到对象的过程，所以我们先要了解如何创建一个对象</p><h3 id="调用系统内置的构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#调用系统内置的构造函数创建对象" aria-hidden="true">#</a> 调用系统内置的构造函数创建对象</h3><p>JS 给我们内置了一个 Object 构造函数，这个构造函数就是用来创造对象的，当构造函数和new 关键字连用的时候，就可以为我们创造出一个对象，因为 JS 是一个动态的语言，那么我们就可以动态的向对象中添加成员了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 就能得到一个空对象</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// 正常操作对象</span>
o1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
o1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
o1<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字面量的方式创建一个对象" tabindex="-1"><a class="header-anchor" href="#字面量的方式创建一个对象" aria-hidden="true">#</a> 字面量的方式创建一个对象</h3><p>直接使用字面量的形式，也就是直接写 <code>{}</code>，可以在写的时候就添加好成员，也可以动态的添加</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 字面量方式创建对象</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 再来一个</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
o2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rose&#39;</span>
o2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
o2<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用工厂函数的方式创建对象" tabindex="-1"><a class="header-anchor" href="#使用工厂函数的方式创建对象" aria-hidden="true">#</a> 使用工厂函数的方式创建对象</h3><p>先书写一个工厂函数，这个工厂函数里面可以创造出一个对象，并且给对象添加一些属性，还能把对象返回</p><p>使用这个工厂函数创造对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 先创建一个工厂函数</span>
<span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 手动创建一个对象</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 手动的向对象中添加成员</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
  obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>

  <span class="token comment">// 手动返回一个对象</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token comment">// 2. 使用这个工厂函数创建对象</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用自定义构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#使用自定义构造函数创建对象" aria-hidden="true">#</a> 使用自定义构造函数创建对象</h3><p>工厂函数需要经历三个步骤：</p><ol><li>手动创建对象</li><li>手动添加成员</li><li>手动返回对象</li></ol><p>构造函数会比工厂函数简单一些：</p><ol><li>自动创建对象</li><li>手动添加成员</li><li>自动返回对象</li></ol><p>先书写一个构造函数，在构造函数内向对象添加一些成员，使用这个构造函数创造一个对象（和 new 连用），构造函数可以创建对象，并且创建一个带有属性和方法的对象</p><p>面向对象就是要想办法找到一个有属性和方法的对象，面向对象就是我们自己制造 <strong>构造函数</strong> 的过程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 先创造一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender
<span class="token punctuation">}</span>

<span class="token comment">// 2. 使用构造函数创建对象</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;man&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;woman&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数详解" tabindex="-1"><a class="header-anchor" href="#构造函数详解" aria-hidden="true">#</a> 构造函数详解</h2><p>我们了解了对象的创建方式，我们的面向对象就是要么能直接得到一个对象，要么就弄出一个能创造对象的东西，我们自己创造对象，我们的构造函数就能创造对象，所以接下来我们就详细聊聊 <strong>构造函数</strong></p><h3 id="构造函数的基本使用" tabindex="-1"><a class="header-anchor" href="#构造函数的基本使用" aria-hidden="true">#</a> 构造函数的基本使用</h3><p>和普通函数一样，只不过 <strong>调用的时候要和 new 连用</strong>，不然就是一个普通函数调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 能得到一个空对象</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 什么也得不到，这个就是普通函数调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <strong>不写 new 的时候就是普通函数调用，没有创造对象的能力</strong></p><p>首字母大写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 能得到一个对象</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 能得到一个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <strong>首字母不大写，只要和 new 连用，就有创造对象的能力</strong></p><p>当调用的时候如果不需要传递参数可以不写 <code>()</code>，建议都写上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 能得到一个空对象</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span>    <span class="token comment">// 能得到一个空对象 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <strong>如果不需要传递参数，那么可以不写 ()，如果传递参数就必须写</strong></p><p>构造函数内部的 this，由于和 new 连用的关系，是指向当前实例对象的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 本次调用的时候，this =&gt; o1</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 本次调用的时候，this =&gt; o2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <strong>每次 new 的时候，函数内部的 this 都是指向当前这次的实例化对象</strong></p><p>因为构造函数会自动返回一个对象，所以构造函数内部不要写 return</p><ul><li>你如果 return 一个基本数据类型，那么写了没有意义</li><li>如果你 return 一个引用数据类型，那么构造函数本身的意义就没有了</li></ul><h3 id="使用构造函数创建一个对象" tabindex="-1"><a class="header-anchor" href="#使用构造函数创建一个对象" aria-hidden="true">#</a> 使用构造函数创建一个对象</h3><p>我们在使用构造函数的时候，可以通过一些代码和内容来向当前的对象中添加一些内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们得到的两个对象里面都有自己的成员 <strong>name</strong> 和 <strong>age</strong></p><p>我们在写构造函数的时候，是不是也可以添加一些方法进去呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello constructor&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然是可以的，我们的到的两个对象中都有 <code>sayHi</code> 这个函数，也都可以正常调用</p><p>但是这样好不好呢？缺点在哪里？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello constructor&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第一次 new 的时候， Person 这个函数要执行一遍</span>
<span class="token comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 第二次 new 的时候， Person 这个函数要执行一遍</span>
<span class="token comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，那么我们两个对象内的 <code>sayHi</code> 函数就是一个代码一摸一样，功能一摸一样</p><p>但是是两个空间函数，占用两个内存空间</p><p>也就是说 <code>o1.sayHi</code> 是一个地址，<code>o2.sayHi</code> 是一个地址</p><p>所以我们执行 <code>console.log(o1 === o2.sayHi)</code> 的到的结果是 <code>false</code></p><p>缺点： <strong>一摸一样的函数出现了两次，占用了两个空间地址</strong></p><p>怎么解决这个问题呢？</p><ul><li>就需要用到一个东西，叫做 <strong>原型</strong></li></ul><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><p>原型的出现，就是为了解决 <strong>构造函数的缺点</strong>，也就是给我们提供了一个给对象添加函数的方法，不然构造函数只能给对象添加属性，不能合理的添加函数就太 LOW 了</p><h3 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> prototype</h3><ul><li><p><strong>每一个函数天生自带一个成员，叫做 prototype，是一个对象空间</strong></p></li><li><p>即然每一个函数都有，构造函数也是函数，构造函数也有这个对象空间</p></li><li><p>这个 <code>prototype</code> 对象空间可以由函数名来访问</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 是一个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>即然是个对象，那么我们就可以向里面放入一些东西</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;prototype&#39;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们发现了一个叫做 <code>prototype</code> 的空间是和函数有关联的</p></li><li><p>并且可以向里面存储一些东西</p></li><li><p>重点： <strong>在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的</strong></p></li><li><p>那实例化对象怎么使用能？</p></li></ul><h3 id="proto" tabindex="-1"><a class="header-anchor" href="#proto" aria-hidden="true">#</a> __proto__</h3><ul><li><p><strong>每一个对象都天生自带一个成员，叫做 <code>__proto__</code>，是一个对象空间</strong></p></li><li><p>即然每一个对象都有，实例化对象也是对象，那么每一个实例化对象也有这个成员</p></li><li><p>这个 <code>__proto__</code> 对象空间是给每一个对象使用的</p></li><li><p>当你访问一个对象中的成员的时候</p><ul><li>如果这个对象自己本身有这个成员，那么就会直接给你结果</li><li>如果没有，就会去 <code>__proto__</code> 这个对象空间里面找，里面有的话就给你结果</li><li>未完待续。。。</li></ul></li><li><p>那么这个 <code>__proto__</code> 又指向哪里呢？</p><ul><li>这个对象是由哪个构造函数 new 出来的</li><li>那么这个对象的 <code>__proto__</code> 就指向这个构造函数的 <code>prototype</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们发现实例化对象的 <code>__proto__</code> 和所属的构造函数的 <code>prototype</code> 是一个对象空间</li><li>我们可以通过构造函数名称来向 <code>prototype</code> 中添加成员</li><li>对象在访问的时候自己没有，可以自动去自己的 <code>__proto__</code> 中查找</li><li>那么，我们之前构造函数的缺点就可以解决了 <ul><li>我们可以把函数放在构造函数的 <code>prototype</code> 中</li><li>实例化对象访问的时候，自己没有，就会自动去 <code>__proto__</code> 中找</li><li>那么也可以使用了</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello Person&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>p1</code> 自己没有 <code>sayHi</code> 方法，就会去自己的 <code>__proto__</code> 中查找</li><li><code>p1.__proto__</code> 就是 <code>Person.prototype</code></li><li>我们又向 <code>Person.prototype</code> 中添加了 <code>sayHi</code> 方法</li><li>所以 <code>p1.sayHi</code> 就可以执行了</li></ul></li><li><p>到这里，当我们实例化多个对象的时候，每个对象里面都没有方法</p><ul><li>都是去所属的构造函数的 <code>protottype</code> 中查找</li><li>那么每一个对象使用的函数，其实都是同一个函数</li><li>那么就解决了我们构造函数的缺点</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sayHi <span class="token operator">===</span> p2<span class="token punctuation">.</span>sayHi<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>p1</code> 是 <code>Person</code> 的一个实例</li><li><code>p2</code> 是 <code>Person</code> 的一个实例</li><li>也就是说 <code>p1.__proto__</code> 和 <code>p2.__proto__</code> 指向的都是 <code>Person.prototype</code></li><li>当 <code>p1</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>当 <code>p2</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>那么两个实例化对象就是找到的一个方法，也是执行的一个方法</li></ul></li><li><p>结论</p><ul><li>当我们写构造函数的时候</li><li><strong>属性我们直接写在构造函数体内</strong></li><li><strong>方法我们写在原型上</strong></li></ul></li></ul><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3><ul><li>我们刚才聊过构造函数了，也聊了原型</li><li>那么问题出现了，我们说构造函数的 <code>prototype</code> 是一个对象</li><li>又说了每一个对象都天生自带一个 <code>__proto__</code> 属性</li><li>那么 <strong>构造函数的 prototype</strong> 里面的 <code>__proto__</code> 属性又指向哪里呢？</li></ul><h3 id="一个对象所属的构造函数" tabindex="-1"><a class="header-anchor" href="#一个对象所属的构造函数" aria-hidden="true">#</a> 一个对象所属的构造函数</h3><ul><li><p>每一个对象都有一个自己所属的构造函数</p></li><li><p>比如： 数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组本身也是一个对象</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上两种方式都是创造一个数组</li><li>我们就说数组所属的构造函数就是 <code>Array</code></li></ul></li><li><p>比如： 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数本身也是一个对象</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上两种方式都是创造一个函数</li><li>我们就说函数所属的构造函数就是 <code>Function</code></li></ul></li></ul><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><ul><li>对象的 <code>__proto__</code> 里面也有一个成员叫做 <strong><code>constructor</code></strong></li><li>这个属性就是指向当前这个对象所属的构造函数</li></ul><h3 id="链状结构" tabindex="-1"><a class="header-anchor" href="#链状结构" aria-hidden="true">#</a> 链状结构</h3><ul><li>当一个对象我们不知道准确的是谁构造的时候，我们呢就把它看成 <code>Object</code> 的实例化对象</li><li>也就是说，我们的 <strong>构造函数 的 prototype 的 <code>__proto__</code></strong> 指向的是 <code>Object.prototype</code></li><li>那么 <code>Object.prototype</code> 也是个对象，那么它的 <code>__proto__</code> 又指向谁呢？</li><li>因为 <code>Object</code> 的 js 中的顶级构造函数，我们有一句话叫 <strong>万物皆对象</strong></li><li>所以 <code>Object.prototype</code> 就到顶了，<code>Object.prototype</code> 的 <code>__proto__</code> 就是 null</li></ul><h3 id="原型链的访问原则" tabindex="-1"><a class="header-anchor" href="#原型链的访问原则" aria-hidden="true">#</a> 原型链的访问原则</h3><ul><li>我们之前说过，访问一个对象的成员的时候，自己没有就会去 <code>__proto__</code> 中找</li><li>接下来就是，如果 <code>__proto__</code> 里面没有就再去 <code>__proto__</code> 里面找</li><li>一直找到 <code>Object.prototype</code> 里面都没有，那么就会返回 <code>undefiend</code></li></ul><h3 id="对象的赋值" tabindex="-1"><a class="header-anchor" href="#对象的赋值" aria-hidden="true">#</a> 对象的赋值</h3><ul><li>到这里，我们就会觉得，如果是赋值的话，那么也会按照原型链的规则来</li><li>但是： <strong>并不是！并不是！并不是！</strong> 重要的事情说三遍</li><li>赋值的时候，就是直接给对象自己本身赋值 <ul><li>如果原先有就是修改</li><li>原先没有就是添加</li><li>不会和 <code>__proto__</code> 有关系</li></ul></li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><h3 id="构造函数继承" tabindex="-1"><a class="header-anchor" href="#构造函数继承" aria-hidden="true">#</a> 构造函数继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>classroom</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>classroom <span class="token operator">=</span> classroom
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型继承" tabindex="-1"><a class="header-anchor" href="#原型继承" aria-hidden="true">#</a> 原型继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h3><p>构造函数继承+原型继承</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>classroom</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>classroom <span class="token operator">=</span> classroom
<span class="token punctuation">}</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;kerwin&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;1班&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),t=[o];function c(l,i){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","20-JavaScript-面向对象编程.html.vue"]]);export{d as default};
